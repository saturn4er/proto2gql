// This file was generated by github.com/saturn4er/proto2gql. DO NOT EDIT IT
package test

import (
	context "context"
	debug "runtime/debug"

	graphql "github.com/graphql-go/graphql"
	errors "github.com/pkg/errors"
	scalars "github.com/saturn4er/proto2gql/api/scalars"
	tracer "github.com/saturn4er/proto2gql/api/tracer"
	testdata "github.com/saturn4er/proto2gql/testdata"
	common "github.com/saturn4er/proto2gql/testdata/out/Users/yaroslavmytsyo/go/src/github.com/saturn4er/proto2gql/testdata/common"
) // Enums
var RootEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplRootEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"RootEnumVal0": &graphql.EnumValueConfig{
			Value: 0,
		},
		"RootEnumVal1": &graphql.EnumValueConfig{
			Value: 1,
		},
		"RootEnumVal2": &graphql.EnumValueConfig{
			Value:       2,
			Description: "It's a RootEnumVal2",
		},
	},
})
var NestedEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplNestedEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"NestedEnumVal0": &graphql.EnumValueConfig{
			Value: 0,
		},
		"NestedEnumVal1": &graphql.EnumValueConfig{
			Value: 1,
		},
	},
})
var NestedNestedEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplNestedNestedEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"NestedNestedEnumVal0": &graphql.EnumValueConfig{
			Value: 0,
		},
		"NestedNestedEnumVal1": &graphql.EnumValueConfig{
			Value: 1,
		},
		"NestedNestedEnumVal2": &graphql.EnumValueConfig{
			Value: 2,
		},
		"NestedNestedEnumVal3": &graphql.EnumValueConfig{
			Value: 3,
		},
	},
})

// Input object
var ExmplRootMessageInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"r_msg":               &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageNestedMessageInput))},
			"r_scalar":            &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar))},
			"r_enum":              &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(RootEnum))},
			"r_empty_msg":         &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(scalars.NoDataScalar))},
			"n_r_enum":            &graphql.InputObjectFieldConfig{Type: common.CommonEnum},
			"n_r_scalar":          &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"n_r_msg":             &graphql.InputObjectFieldConfig{Type: common.CommonMessageInput},
			"scalar_from_context": &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"n_r_empty_msg":       &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
			"map_enum":            &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__map_enum))},
			"map_scalar":          &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__map_scalar))},
			"map_msg":             &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__map_msg))},
			"e_f_o_e":             &graphql.InputObjectFieldConfig{Type: common.CommonEnum},
			"e_f_o_s":             &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"e_f_o_m":             &graphql.InputObjectFieldConfig{Type: common.CommonMessageInput},
			"e_f_o_em":            &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
			"s_f_o_s":             &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"s_f_o_e":             &graphql.InputObjectFieldConfig{Type: RootEnum},
			"s_f_o_mes":           &graphql.InputObjectFieldConfig{Type: ExmplRootMessage2Input},
			"s_f_o_m":             &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
			"m_f_o_m":             &graphql.InputObjectFieldConfig{Type: ExmplRootMessage2Input},
			"m_f_o_s":             &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"m_f_o_e":             &graphql.InputObjectFieldConfig{Type: RootEnum},
			"m_f_o_em":            &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
			"em_f_o_em":           &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
			"em_f_o_s":            &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"em_f_o_en":           &graphql.InputObjectFieldConfig{Type: RootEnum},
			"em_f_o_m":            &graphql.InputObjectFieldConfig{Type: ExmplRootMessage2Input},
		}
	}),
})
var ExmplRootMessageNestedMessageInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessage__NestedMessageInput",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"sub_r_enum":     &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(NestedEnum))},
			"sub_sub_r_enum": &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(NestedNestedEnum))},
		}
	}),
})
var ExmplMessageWithEmptyInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplMessageWithEmptyInput",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"empt": &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
		}
	}),
})
var ExmplRootMessage2Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessage2Input",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"some_field": &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
		}
	}),
})

// Input objects resolvers
func ResolveRootMessage(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.RootMessage, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveRootMessage")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", perr)
			span.SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.RootMessage)
	return result, nil
}
func ResolveRootMessageNestedMessage(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.RootMessage_NestedMessage, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveRootMessageNestedMessage")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", perr)
			span.SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.RootMessage_NestedMessage)
	return result, nil
}
func ResolveEmpty(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.Empty, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveEmpty")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", perr)
			span.SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.Empty)
	return result, nil
}
func ResolveMessageWithEmpty(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.MessageWithEmpty, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveMessageWithEmpty")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", perr)
			span.SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.MessageWithEmpty)
	return result, nil
}
func ResolveRootMessage2(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.RootMessage2, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveRootMessage2")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", perr)
			span.SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.RootMessage2)
	return result, nil
}

// Output objects
// Maps input objects
var ExmplRootMessageInput__map_enum = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__map_enum",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: NestedEnum},
		}
	}),
})
var ExmplRootMessageInput__map_scalar = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__map_scalar",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
		}
	}),
})
var ExmplRootMessageInput__map_msg = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__map_msg",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: graphql.String},
			"value": &graphql.InputObjectFieldConfig{Type: ExmplRootMessageNestedMessageInput},
		}
	}),
})

// Maps input objects resolvers
func ResolveExmplRootMessageInput__map_enum(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[int32]testdata.NestedEnum, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__map_enum")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", perr)
			span.SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]testdata.NestedEnum)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv := testdata.RootMessage_NestedEnum(v.(int))
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplRootMessageInput__map_scalar(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[int32]int32, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__map_scalar")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", perr)
			span.SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]int32)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv := v.(int32)
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplRootMessageInput__map_msg(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[string]*testdata.RootMessage_NestedMessage, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__map_msg")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", perr)
			span.SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true")
			span.SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[string]*testdata.RootMessage_NestedMessage)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(string)
		vv, err := ResolveRootMessageNestedMessage(tr, tr.ContextWithSpan(ctx, span), v)
		if err != nil {
			return nil, errors.Wrapf(err, "failed to resolve #%d map element value", i)
		}
		result[kk] = vv
	}
	return result, nil
}

// Maps output objects
var ExmplRootMessage__map_enum = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__map_enum",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__map_enum.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__map_enum.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: NestedEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplRootMessage__map_scalar = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__map_scalar",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__map_scalar.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__map_scalar.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplRootMessage__map_msg = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__map_msg",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__map_msg.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: graphql.String,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__map_msg.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: ExmplRootMessageNestedMessageInput,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

// Services
