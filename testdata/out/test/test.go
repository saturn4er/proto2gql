// This file was generated by github.com/saturn4er/proto2gql. DO NOT EDIT IT
package test

import (
	context "context"
	fmt "fmt"
	debug "runtime/debug"

	graphql "github.com/graphql-go/graphql"
	errors "github.com/pkg/errors"
	interceptors "github.com/saturn4er/proto2gql/api/interceptors"
	scalars "github.com/saturn4er/proto2gql/api/scalars"
	tracer "github.com/saturn4er/proto2gql/api/tracer"
	testdata "github.com/saturn4er/proto2gql/testdata"
	common_1 "github.com/saturn4er/proto2gql/testdata/common"
	common "github.com/saturn4er/proto2gql/testdata/out/Users/yaroslavmytsyo/go/src/github.com/saturn4er/proto2gql/testdata/common"
) // Enums
var RootEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplRootEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"RootEnumVal0": &graphql.EnumValueConfig{
			Value: 0,
		},
		"RootEnumVal1": &graphql.EnumValueConfig{
			Value: 1,
		},
		"RootEnumVal2": &graphql.EnumValueConfig{
			Value:       2,
			Description: "It's a RootEnumVal2",
		},
	},
})
var NestedEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplNestedEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"NestedEnumVal0": &graphql.EnumValueConfig{
			Value: 0,
		},
		"NestedEnumVal1": &graphql.EnumValueConfig{
			Value: 1,
		},
	},
})
var NestedNestedEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplNestedNestedEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"NestedNestedEnumVal0": &graphql.EnumValueConfig{
			Value: 0,
		},
		"NestedNestedEnumVal1": &graphql.EnumValueConfig{
			Value: 1,
		},
		"NestedNestedEnumVal2": &graphql.EnumValueConfig{
			Value: 2,
		},
		"NestedNestedEnumVal3": &graphql.EnumValueConfig{
			Value: 3,
		},
	},
})

// Input object
var ExmplRootMessageInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"r_msg":               &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageNestedMessage))},
			"r_scalar":            &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar))},
			"r_enum":              &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(RootEnum))},
			"r_empty_msg":         &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(scalars.NoDataScalar))},
			"n_r_enum":            &graphql.InputObjectFieldConfig{Type: common.CommonEnum},
			"n_r_scalar":          &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"n_r_msg":             &graphql.InputObjectFieldConfig{Type: common.CommonMessage},
			"scalar_from_context": &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"n_r_empty_msg":       &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
			"map_enum":            &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__map_enum))},
			"map_scalar":          &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__map_scalar))},
			"map_msg":             &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(ExmplRootMessageInput__map_msg))},
			"e_f_o_e":             &graphql.InputObjectFieldConfig{Type: common.CommonEnum},
			"e_f_o_s":             &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"e_f_o_m":             &graphql.InputObjectFieldConfig{Type: common.CommonMessage},
			"e_f_o_em":            &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
			"s_f_o_s":             &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"s_f_o_e":             &graphql.InputObjectFieldConfig{Type: RootEnum},
			"s_f_o_mes":           &graphql.InputObjectFieldConfig{Type: ExmplRootMessage2},
			"s_f_o_m":             &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
			"m_f_o_m":             &graphql.InputObjectFieldConfig{Type: ExmplRootMessage2},
			"m_f_o_s":             &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"m_f_o_e":             &graphql.InputObjectFieldConfig{Type: RootEnum},
			"m_f_o_em":            &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
			"em_f_o_em":           &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
			"em_f_o_s":            &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"em_f_o_en":           &graphql.InputObjectFieldConfig{Type: RootEnum},
			"em_f_o_m":            &graphql.InputObjectFieldConfig{Type: ExmplRootMessage2},
		}
	}),
})
var ExmplRootMessageNestedMessageInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessage__NestedMessageInput",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"sub_r_enum":     &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(NestedEnum))},
			"sub_sub_r_enum": &graphql.InputObjectFieldConfig{Type: graphql.NewList(graphql.NewNonNull(NestedNestedEnum))},
		}
	}),
})
var ExmplMessageWithEmptyInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplMessageWithEmptyInput",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"empt": &graphql.InputObjectFieldConfig{Type: scalars.NoDataScalar},
		}
	}),
})
var ExmplRootMessage2Input = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessage2Input",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"some_field": &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
		}
	}),
})

// Input objects resolvers
func ResolveRootMessage(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.RootMessage, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveRootMessage")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.RootMessage)
	if args["r_msg"] != nil {
		in := args["r_msg"].([]interface{})
		result.RMsg = make([]*testdata.RootMessage_NestedMessage, len(in))
		for i, val := range in {

			v, err := ResolveRootMessageNestedMessage(tr, tr.ContextWithSpan(ctx, span), val)
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve input object field")
			}
			result.RMsg[i] = v
		}
	}
	if args["r_scalar"] != nil {
		in := args["r_scalar"].([]interface{})
		result.RScalar = make([]int32, len(in))
		for i, val := range in {
			result.RScalar[i] = val.(int32)
		}
	}
	if args["r_enum"] != nil {
		in := args["r_enum"].([]interface{})
		result.REnum = make([]testdata.RootEnum, len(in))
		for i, val := range in {
			result.REnum[i] = testdata.RootEnum(val.(int))
		}
	}
	if args["r_empty_msg"] != nil {
		in := args["r_empty_msg"].([]interface{})
		result.REmptyMsg = make([]*testdata.Empty, len(in))
		for i, val := range in {

			v, err := ResolveEmpty(tr, tr.ContextWithSpan(ctx, span), val)
			if err != nil {
				return nil, errors.Wrap(err, "failed to resolve input object field")
			}
			result.REmptyMsg[i] = v
		}
	}
	if args["n_r_enum"] != nil {
		result.NREnum = common_1.CommonEnum(args["n_r_enum"].(int))
	}
	if args["n_r_scalar"] != nil {
		result.NRScalar = args["n_r_scalar"].(int32)
	}
	if args["n_r_msg"] != nil {

		v, err := common.ResolveCommonMessage(tr, tr.ContextWithSpan(ctx, span), args["n_r_msg"])
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve input object field")
		}
		result.NRMsg = v
	}
	if args["scalar_from_context"] != nil {
		result.ScalarFromContext = args["scalar_from_context"].(int32)
	}
	if args["n_r_empty_msg"] != nil {

		v, err := ResolveEmpty(tr, tr.ContextWithSpan(ctx, span), args["n_r_empty_msg"])
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve input object field")
		}
		result.NREmptyMsg = v
	}
	if e_f_o_e_, ok := args["e_f_o_e"]; ok && e_f_o_e_ != nil {
		v := common_1.CommonEnum(e_f_o_e_.(int))
		result.EnumFirstOneoff = &testdata.RootMessage_EFOE{v}
	} else if e_f_o_s_, ok := args["e_f_o_s"]; ok && e_f_o_s_ != nil {
		v := e_f_o_s_.(int32)
		result.EnumFirstOneoff = &testdata.RootMessage_EFOS{v}
	} else if e_f_o_m_, ok := args["e_f_o_m"]; ok && e_f_o_m_ != nil {
		v, err := common.ResolveCommonMessage(tr, tr.ContextWithSpan(ctx, span), e_f_o_m_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field e_f_o_m")
		}
		result.EnumFirstOneoff = &testdata.RootMessage_EFOM{v}
	} else if e_f_o_em_, ok := args["e_f_o_em"]; ok && e_f_o_em_ != nil {
		v, err := ResolveEmpty(tr, tr.ContextWithSpan(ctx, span), e_f_o_em_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field e_f_o_em")
		}
		result.EnumFirstOneoff = &testdata.RootMessage_EFOEm{v}
	}
	if s_f_o_s_, ok := args["s_f_o_s"]; ok && s_f_o_s_ != nil {
		v := s_f_o_s_.(int32)
		result.ScalarFirstOneoff = &testdata.RootMessage_SFOS{v}
	} else if s_f_o_e_, ok := args["s_f_o_e"]; ok && s_f_o_e_ != nil {
		v := testdata.RootEnum(s_f_o_e_.(int))
		result.ScalarFirstOneoff = &testdata.RootMessage_SFOE{v}
	} else if s_f_o_mes_, ok := args["s_f_o_mes"]; ok && s_f_o_mes_ != nil {
		v, err := ResolveRootMessage2(tr, tr.ContextWithSpan(ctx, span), s_f_o_mes_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field s_f_o_mes")
		}
		result.ScalarFirstOneoff = &testdata.RootMessage_SFOMes{v}
	} else if s_f_o_m_, ok := args["s_f_o_m"]; ok && s_f_o_m_ != nil {
		v, err := ResolveEmpty(tr, tr.ContextWithSpan(ctx, span), s_f_o_m_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field s_f_o_m")
		}
		result.ScalarFirstOneoff = &testdata.RootMessage_SFOM{v}
	}
	if m_f_o_m_, ok := args["m_f_o_m"]; ok && m_f_o_m_ != nil {
		v, err := ResolveRootMessage2(tr, tr.ContextWithSpan(ctx, span), m_f_o_m_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field m_f_o_m")
		}
		result.MessageFirstOneoff = &testdata.RootMessage_MFOM{v}
	} else if m_f_o_s_, ok := args["m_f_o_s"]; ok && m_f_o_s_ != nil {
		v := m_f_o_s_.(int32)
		result.MessageFirstOneoff = &testdata.RootMessage_MFOS{v}
	} else if m_f_o_e_, ok := args["m_f_o_e"]; ok && m_f_o_e_ != nil {
		v := testdata.RootEnum(m_f_o_e_.(int))
		result.MessageFirstOneoff = &testdata.RootMessage_MFOE{v}
	} else if m_f_o_em_, ok := args["m_f_o_em"]; ok && m_f_o_em_ != nil {
		v, err := ResolveEmpty(tr, tr.ContextWithSpan(ctx, span), m_f_o_em_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field m_f_o_em")
		}
		result.MessageFirstOneoff = &testdata.RootMessage_MFOEm{v}
	}
	if em_f_o_em_, ok := args["em_f_o_em"]; ok && em_f_o_em_ != nil {
		v, err := ResolveEmpty(tr, tr.ContextWithSpan(ctx, span), em_f_o_em_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field em_f_o_em")
		}
		result.EmptyFirstOneoff = &testdata.RootMessage_EmFOEm{v}
	} else if em_f_o_s_, ok := args["em_f_o_s"]; ok && em_f_o_s_ != nil {
		v := em_f_o_s_.(int32)
		result.EmptyFirstOneoff = &testdata.RootMessage_EmFOS{v}
	} else if em_f_o_en_, ok := args["em_f_o_en"]; ok && em_f_o_en_ != nil {
		v := testdata.RootEnum(em_f_o_en_.(int))
		result.EmptyFirstOneoff = &testdata.RootMessage_EmFOEn{v}
	} else if em_f_o_m_, ok := args["em_f_o_m"]; ok && em_f_o_m_ != nil {
		v, err := ResolveRootMessage2(tr, tr.ContextWithSpan(ctx, span), em_f_o_m_)
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve oneOf object field em_f_o_m")
		}
		result.EmptyFirstOneoff = &testdata.RootMessage_EmFOM{v}
	}

	return result, nil
}
func ResolveRootMessageNestedMessage(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.RootMessage_NestedMessage, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveRootMessageNestedMessage")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.RootMessage_NestedMessage)
	if args["sub_r_enum"] != nil {
		in := args["sub_r_enum"].([]interface{})
		result.SubREnum = make([]testdata.RootMessage_NestedEnum, len(in))
		for i, val := range in {
			result.SubREnum[i] = testdata.RootMessage_NestedEnum(val.(int))
		}
	}
	if args["sub_sub_r_enum"] != nil {
		in := args["sub_sub_r_enum"].([]interface{})
		result.SubSubREnum = make([]testdata.RootMessage_NestedMessage_NestedNestedEnum, len(in))
		for i, val := range in {
			result.SubSubREnum[i] = testdata.RootMessage_NestedMessage_NestedNestedEnum(val.(int))
		}
	}

	return result, nil
}
func ResolveEmpty(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.Empty, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveEmpty")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.Empty)

	return result, nil
}
func ResolveMessageWithEmpty(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.MessageWithEmpty, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveMessageWithEmpty")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.MessageWithEmpty)
	if args["empt"] != nil {

		v, err := ResolveEmpty(tr, tr.ContextWithSpan(ctx, span), args["empt"])
		if err != nil {
			return nil, errors.Wrap(err, "failed to resolve input object field")
		}
		result.Empt = v
	}

	return result, nil
}
func ResolveRootMessage2(tr tracer.Tracer, ctx context.Context, i interface{}) (_ *testdata.RootMessage2, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveRootMessage2")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.RootMessage2)
	if args["some_field"] != nil {
		result.SomeField = args["some_field"].(int32)
	}

	return result, nil
}

// Output objects
var ExmplRootMessage = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage.AddFieldConfig("r_msg", &graphql.Field{
		Name: "r_msg",
		Type: ExmplRootMessageNestedMessage,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				return src.RMsg, nil
			case testdata.RootMessage:
				return src.RMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("r_scalar", &graphql.Field{
		Name: "r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				return src.RScalar, nil
			case testdata.RootMessage:
				return src.RScalar, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("r_enum", &graphql.Field{
		Name: "r_enum",
		Type: RootEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				return src.REnum, nil
			case testdata.RootMessage:
				return src.REnum, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("r_empty_msg", &graphql.Field{
		Name: "r_empty_msg",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				return src.REmptyMsg, nil
			case testdata.RootMessage:
				return src.REmptyMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("n_r_enum", &graphql.Field{
		Name: "n_r_enum",
		Type: common.CommonEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				return src.NREnum, nil
			case testdata.RootMessage:
				return src.NREnum, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("n_r_scalar", &graphql.Field{
		Name: "n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				return src.NRScalar, nil
			case testdata.RootMessage:
				return src.NRScalar, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("n_r_msg", &graphql.Field{
		Name: "n_r_msg",
		Type: common.CommonMessage,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				return src.NRMsg, nil
			case testdata.RootMessage:
				return src.NRMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("scalar_from_context", &graphql.Field{
		Name: "scalar_from_context",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				return src.ScalarFromContext, nil
			case testdata.RootMessage:
				return src.ScalarFromContext, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessage.AddFieldConfig("n_r_empty_msg", &graphql.Field{
		Name: "n_r_empty_msg",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage:
				if src == nil {
					return nil, nil
				}
				return src.NREmptyMsg, nil
			case testdata.RootMessage:
				return src.NREmptyMsg, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

var ExmplRootMessageNestedMessage = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__NestedMessage",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessageNestedMessage.AddFieldConfig("sub_r_enum", &graphql.Field{
		Name: "sub_r_enum",
		Type: NestedEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage_NestedMessage:
				if src == nil {
					return nil, nil
				}
				return src.SubREnum, nil
			case testdata.RootMessage_NestedMessage:
				return src.SubREnum, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
	ExmplRootMessageNestedMessage.AddFieldConfig("sub_sub_r_enum", &graphql.Field{
		Name: "sub_sub_r_enum",
		Type: NestedNestedEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage_NestedMessage:
				if src == nil {
					return nil, nil
				}
				return src.SubSubREnum, nil
			case testdata.RootMessage_NestedMessage:
				return src.SubSubREnum, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

var ExmplEmpty = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplEmpty",
	Fields: graphql.Fields{},
})

func init() {
}

var ExmplMessageWithEmpty = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplMessageWithEmpty",
	Fields: graphql.Fields{},
})

func init() {
	ExmplMessageWithEmpty.AddFieldConfig("empt", &graphql.Field{
		Name: "empt",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.MessageWithEmpty:
				if src == nil {
					return nil, nil
				}
				return src.Empt, nil
			case testdata.MessageWithEmpty:
				return src.Empt, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

var ExmplRootMessage2 = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage2",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage2.AddFieldConfig("some_field", &graphql.Field{
		Name: "some_field",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			switch src := p.Source.(type) {
			case *testdata.RootMessage2:
				if src == nil {
					return nil, nil
				}
				return src.SomeField, nil
			case testdata.RootMessage2:
				return src.SomeField, nil
			}
			return nil, errors.New("source of unknown type")
		},
	})
}

// Maps input objects
var ExmplRootMessageInput__map_enum = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__map_enum",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: NestedEnum},
		}
	}),
})
var ExmplRootMessageInput__map_scalar = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__map_scalar",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
			"value": &graphql.InputObjectFieldConfig{Type: scalars.GraphQLInt32Scalar},
		}
	}),
})
var ExmplRootMessageInput__map_msg = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplRootMessageInput__map_msg",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"key":   &graphql.InputObjectFieldConfig{Type: graphql.String},
			"value": &graphql.InputObjectFieldConfig{Type: ExmplRootMessageNestedMessage},
		}
	}),
})

// Maps input objects resolvers
func ResolveExmplRootMessageInput__map_enum(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[int32]testdata.RootMessage_NestedEnum, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__map_enum")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]testdata.RootMessage_NestedEnum)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv := testdata.RootMessage_NestedEnum(v.(int))
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplRootMessageInput__map_scalar(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[int32]int32, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__map_scalar")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[int32]int32)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(int32)
		vv := v.(int32)
		result[kk] = vv
	}
	return result, nil
}
func ResolveExmplRootMessageInput__map_msg(tr tracer.Tracer, ctx context.Context, i interface{}) (_ map[string]*testdata.RootMessage_NestedMessage, rerr error) {
	span := tr.CreateChildSpanFromContext(ctx, "ResolveExmplRootMessageInput__map_msg")
	defer span.Finish()
	defer func() {
		if perr := recover(); perr != nil {
			span.SetTag("error", "true").SetTag("error_message", perr).SetTag("error_stack", string(debug.Stack()))
		}
		if rerr != nil {
			span.SetTag("error", "true").SetTag("error_message", rerr.Error())
		}
	}()
	if i == nil {
		return nil, nil
	}
	in := i.([]interface{})
	result := make(map[string]*testdata.RootMessage_NestedMessage)
	for i, ival := range in {
		_ = i
		val := ival.(map[string]interface{})
		k, v := val["key"], val["value"]
		_, _ = k, v
		kk := k.(string)
		vv, err := ResolveRootMessageNestedMessage(tr, tr.ContextWithSpan(ctx, span), v)
		if err != nil {
			return nil, errors.Wrapf(err, "failed to resolve #%d map element value", i)
		}
		result[kk] = vv
	}
	return result, nil
}

// Maps output objects
var ExmplRootMessage__map_enum = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__map_enum",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__map_enum.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__map_enum.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: NestedEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplRootMessage__map_scalar = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__map_scalar",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__map_scalar.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__map_scalar.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

var ExmplRootMessage__map_msg = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplRootMessage__map_msg",
	Fields: graphql.Fields{},
})

func init() {
	ExmplRootMessage__map_msg.AddFieldConfig("key", &graphql.Field{
		Name: "key",
		Type: graphql.String,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["key"], nil
		},
	})
	ExmplRootMessage__map_msg.AddFieldConfig("value", &graphql.Field{
		Name: "value",
		Type: ExmplRootMessageNestedMessage,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(map[string]interface{})
			if src == nil {
				return nil, nil
			}
			return src["value"], nil
		},
	})
}

// Services
func GetServiceExampleServiceMethods(c testdata.ServiceExampleClient, ih *interceptors.InterceptorHandler, tr tracer.Tracer) graphql.Fields {
	return graphql.Fields{
		"getQueryMethod": &graphql.Field{
			Name: "getQueryMethod",
			Type: ExmplRootMessage,
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				span := tr.CreateChildSpanFromContext(p.Context, "ServiceExample.getQueryMethod Resolver")
				defer span.Finish()
				defer func() {
					if rerr != nil {
						span.SetTag("error", "true").SetTag("error_message", rerr.Error())
					}
				}()
				if ih == nil {
					req, err := ResolveRootMessage(tr, tr.ContextWithSpan(p.Context, span), p.Args)
					if err != nil {
						return nil, err
					}
					return c.GetQueryMethod(p.Context, req)
				}
				ctx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "getQueryMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ctx, func(ctx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveRootMessage(tr, tr.ContextWithSpan(p.Context, span), p.Args)
				})
				if err != nil {
					return nil, err
				}
				res, err := ih.Call(ctx, req, func(ctx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*testdata.RootMessage)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *testdata.RootMessage", req))
					}
					res, err := c.GetQueryMethod(ctx.Params.Context, r)
					return res, err
				})
				if err != nil {
					return nil, err
				}
				rc, ok := res.(*testdata.RootMessage)
				if !ok {
					return nil, errors.New(fmt.Sprintf("Call Interceptor returns bad value type(%T). Should return *testdata.RootMessage", res))
				}
				return rc, err
			},
		},
	}
}
func GetMutationsServiceExampleServiceMethods(c testdata.ServiceExampleClient, ih *interceptors.InterceptorHandler, tr tracer.Tracer) graphql.Fields {
	return graphql.Fields{
		"mutationMethod": &graphql.Field{
			Name: "mutationMethod",
			Type: ExmplRootMessageNestedMessage,
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				span := tr.CreateChildSpanFromContext(p.Context, "MutationsServiceExample.mutationMethod Resolver")
				defer span.Finish()
				defer func() {
					if rerr != nil {
						span.SetTag("error", "true").SetTag("error_message", rerr.Error())
					}
				}()
				if ih == nil {
					req, err := ResolveRootMessage2(tr, tr.ContextWithSpan(p.Context, span), p.Args)
					if err != nil {
						return nil, err
					}
					return c.MutationMethod(p.Context, req)
				}
				ctx := &interceptors.Context{
					Service: "MutationsServiceExample",
					Method:  "mutationMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ctx, func(ctx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveRootMessage2(tr, tr.ContextWithSpan(p.Context, span), p.Args)
				})
				if err != nil {
					return nil, err
				}
				res, err := ih.Call(ctx, req, func(ctx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*testdata.RootMessage2)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *testdata.RootMessage2", req))
					}
					res, err := c.MutationMethod(ctx.Params.Context, r)
					return res, err
				})
				if err != nil {
					return nil, err
				}
				rc, ok := res.(*testdata.RootMessage_NestedMessage)
				if !ok {
					return nil, errors.New(fmt.Sprintf("Call Interceptor returns bad value type(%T). Should return *testdata.RootMessage_NestedMessage", res))
				}
				return rc, err
			},
		},
		"EmptyMsgs": &graphql.Field{
			Name: "EmptyMsgs",
			Type: scalars.NoDataScalar,
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				span := tr.CreateChildSpanFromContext(p.Context, "MutationsServiceExample.EmptyMsgs Resolver")
				defer span.Finish()
				defer func() {
					if rerr != nil {
						span.SetTag("error", "true").SetTag("error_message", rerr.Error())
					}
				}()
				if ih == nil {
					req, err := ResolveEmpty(tr, tr.ContextWithSpan(p.Context, span), p.Args)
					if err != nil {
						return nil, err
					}
					return c.EmptyMsgs(p.Context, req)
				}
				ctx := &interceptors.Context{
					Service: "MutationsServiceExample",
					Method:  "EmptyMsgs",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ctx, func(ctx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveEmpty(tr, tr.ContextWithSpan(p.Context, span), p.Args)
				})
				if err != nil {
					return nil, err
				}
				res, err := ih.Call(ctx, req, func(ctx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*testdata.Empty)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *testdata.Empty", req))
					}
					res, err := c.EmptyMsgs(ctx.Params.Context, r)
					return res, err
				})
				if err != nil {
					return nil, err
				}
				rc, ok := res.(*testdata.Empty)
				if !ok {
					return nil, errors.New(fmt.Sprintf("Call Interceptor returns bad value type(%T). Should return *testdata.Empty", res))
				}
				return rc, err
			},
		},
		"MsgsWithEpmty": &graphql.Field{
			Name: "MsgsWithEpmty",
			Type: ExmplMessageWithEmpty,
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				span := tr.CreateChildSpanFromContext(p.Context, "MutationsServiceExample.MsgsWithEpmty Resolver")
				defer span.Finish()
				defer func() {
					if rerr != nil {
						span.SetTag("error", "true").SetTag("error_message", rerr.Error())
					}
				}()
				if ih == nil {
					req, err := ResolveMessageWithEmpty(tr, tr.ContextWithSpan(p.Context, span), p.Args)
					if err != nil {
						return nil, err
					}
					return c.MsgsWithEpmty(p.Context, req)
				}
				ctx := &interceptors.Context{
					Service: "MutationsServiceExample",
					Method:  "MsgsWithEpmty",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ctx, func(ctx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveMessageWithEmpty(tr, tr.ContextWithSpan(p.Context, span), p.Args)
				})
				if err != nil {
					return nil, err
				}
				res, err := ih.Call(ctx, req, func(ctx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker) (result interface{}, err error) {
					r, ok := req.(*testdata.MessageWithEmpty)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *testdata.MessageWithEmpty", req))
					}
					res, err := c.MsgsWithEpmty(ctx.Params.Context, r)
					return res, err
				})
				if err != nil {
					return nil, err
				}
				rc, ok := res.(*testdata.MessageWithEmpty)
				if !ok {
					return nil, errors.New(fmt.Sprintf("Call Interceptor returns bad value type(%T). Should return *testdata.MessageWithEmpty", res))
				}
				return rc, err
			},
		},
	}
}
