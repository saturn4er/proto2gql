// This file was generated by github.com/saturn4er/proto2gql. DO NOT EDIT IT

package test

import (
	context "context"
	errors "errors"
	fmt "fmt"
	debug "runtime/debug"
	strconv "strconv"

	graphql "github.com/graphql-go/graphql"
	opentracing_go "github.com/opentracing/opentracing-go"
	interceptors "github.com/saturn4er/proto2gql/api/interceptors"
	scalars "github.com/saturn4er/proto2gql/api/scalars"
	testdata "github.com/saturn4er/proto2gql/testdata"
	"google.golang.org/grpc"
)

var (
	_ = errors.New
	_ = graphql.NewObject
	_ = context.Background
	_ = strconv.FormatBool
	_ = fmt.Print
	_ = opentracing_go.GlobalTracer
	_ = debug.FreeOSMemory
)

type (
	_ = interceptors.CallInterceptor
)

// Enums
var ExmplRootEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplRootEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"RootEnumVal0": &graphql.EnumValueConfig{
			Value:       0,
			Description: "",
		},
		"RootEnumVal1": &graphql.EnumValueConfig{
			Value:       1,
			Description: "",
		},
	},
})

// Messages
var ExmplC = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplC",
	Fields: graphql.Fields{},
})

// [C] Input resolver
func ResolveC(ctx context.Context, i interface{}) (_ *testdata.C, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(testdata.C)
	// Non-repeated scalar
	if args["a"] != nil {
		result.A = args["a"].(int32)
	}
	// Non-repeated scalar
	if args["b"] != nil {
		result.B = args["b"].(int32)
	}

	return result, nil
}

// Maps
// Maps of C
func init() {
	// Adding fields to output messages
	ExmplC.AddFieldConfig("a", &graphql.Field{
		Name: "a",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*testdata.C)
			if src == nil {
				return nil, nil
			}
			return src.A, nil
		},
	})
	ExmplC.AddFieldConfig("b", &graphql.Field{
		Name: "b",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*testdata.C)
			if src == nil {
				return nil, nil
			}
			return src.B, nil
		},
	})
}

func GetServiceAGraphQLQueriesFields(c testdata.ServiceAClient, ih *interceptors.InterceptorHandler) graphql.Fields {
	return nil

}

func GetServiceAGraphQLMutationsFields(c testdata.ServiceAClient, ih *interceptors.InterceptorHandler) graphql.Fields {

	return graphql.Fields{

		"methodB": &graphql.Field{
			Name: "methodB",
			Type: ExmplC,
			Args: graphql.FieldConfigArgument{
				"a": &graphql.ArgumentConfig{
					Type: scalars.GraphQLInt32Scalar,
				},
				"b": &graphql.ArgumentConfig{
					Type: scalars.GraphQLInt32Scalar,
				},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				if ih == nil {
					req, err := ResolveC(p.Context, p.Args)
					if err != nil {
						return nil, err
					}
					return c.MethodB(p.Context, req)
				}
				ctx := &interceptors.Context{
					Service: "ServiceA",
					Method:  "methodB",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ctx, func(ctx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveC(p.Context, p.Args)
				})
				if err != nil {
					return nil, err
				}
				res, err := ih.Call(ctx, req, func(ctx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker, opts ...grpc.CallOption) (result interface{}, err error) {
					r, ok := req.(*testdata.C)
					if !ok {
						return nil, errors.New(fmt.Sprintf("Resolve args interceptor returns bad request type(%T). Should be: *testdata.C", req))
					}
					res, err := c.MethodB(ctx.Params.Context, r, opts...)
					return res, err
				})
				if err != nil {
					return nil, err
				}
				rc, ok := res.(*testdata.C)
				if !ok {
					return nil, errors.New(fmt.Sprintf("Call Interceptor returns bad value type(%T). Should return *testdata.C", res))
				}
				return rc, err
			},
		},
	}

}
