// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

/*
Package testdata is a generated protocol buffer package.

It is generated from these files:
	test.proto

It has these top-level messages:
	C
*/
package testdata

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/saturn4er/proto2gql/testdata/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RootEnum int32

const (
	RootEnum_RootEnumVal0 RootEnum = 0
	RootEnum_RootEnumVal1 RootEnum = 1
)

var RootEnum_name = map[int32]string{
	0: "RootEnumVal0",
	1: "RootEnumVal1",
}
var RootEnum_value = map[string]int32{
	"RootEnumVal0": 0,
	"RootEnumVal1": 1,
}

func (x RootEnum) String() string {
	return proto.EnumName(RootEnum_name, int32(x))
}
func (RootEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type C struct {
	A int32 `protobuf:"varint,1,opt,name=a" json:"a,omitempty"`
	B int32 `protobuf:"varint,2,opt,name=b" json:"b,omitempty"`
}

func (m *C) Reset()                    { *m = C{} }
func (m *C) String() string            { return proto.CompactTextString(m) }
func (*C) ProtoMessage()               {}
func (*C) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *C) GetA() int32 {
	if m != nil {
		return m.A
	}
	return 0
}

func (m *C) GetB() int32 {
	if m != nil {
		return m.B
	}
	return 0
}

func init() {
	proto.RegisterType((*C)(nil), "example.C")
	proto.RegisterEnum("example.RootEnum", RootEnum_name, RootEnum_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ServiceA service

type ServiceAClient interface {
	MethodB(ctx context.Context, in *C, opts ...grpc.CallOption) (*C, error)
}

type serviceAClient struct {
	cc *grpc.ClientConn
}

func NewServiceAClient(cc *grpc.ClientConn) ServiceAClient {
	return &serviceAClient{cc}
}

func (c *serviceAClient) MethodB(ctx context.Context, in *C, opts ...grpc.CallOption) (*C, error) {
	out := new(C)
	err := grpc.Invoke(ctx, "/example.ServiceA/methodB", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ServiceA service

type ServiceAServer interface {
	MethodB(context.Context, *C) (*C, error)
}

func RegisterServiceAServer(s *grpc.Server, srv ServiceAServer) {
	s.RegisterService(&_ServiceA_serviceDesc, srv)
}

func _ServiceA_MethodB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(C)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceAServer).MethodB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.ServiceA/MethodB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceAServer).MethodB(ctx, req.(*C))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServiceA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.ServiceA",
	HandlerType: (*ServiceAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "methodB",
			Handler:    _ServiceA_MethodB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}

func init() { proto.RegisterFile("test.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x49, 0x2d, 0x2e,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x4f, 0xad, 0x48, 0xcc, 0x2d, 0xc8, 0x49, 0x95,
	0x12, 0x4e, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0xd3, 0x87, 0x50, 0x10, 0x59, 0x25, 0x79, 0x2e, 0x46,
	0x67, 0x21, 0x1e, 0x2e, 0xc6, 0x44, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0xc6, 0x44, 0x10,
	0x2f, 0x49, 0x82, 0x09, 0xc2, 0x4b, 0xd2, 0xd2, 0xe3, 0xe2, 0x08, 0xca, 0xcf, 0x2f, 0x71, 0xcd,
	0x2b, 0xcd, 0x15, 0x12, 0xe0, 0xe2, 0x81, 0xb1, 0xc3, 0x12, 0x73, 0x0c, 0x04, 0x18, 0xd0, 0x44,
	0x0c, 0x05, 0x18, 0x8d, 0x74, 0xb9, 0x38, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x1d, 0x85,
	0x14, 0xb9, 0xd8, 0x73, 0x53, 0x4b, 0x32, 0xf2, 0x53, 0x9c, 0x84, 0xb8, 0xf4, 0xa0, 0xce, 0xd0,
	0x73, 0x96, 0x42, 0x62, 0x3b, 0x69, 0x46, 0xa9, 0xa7, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25,
	0xe7, 0xe7, 0xea, 0x17, 0x27, 0x96, 0x94, 0x16, 0xe5, 0x99, 0xa4, 0x16, 0xe9, 0x83, 0x5d, 0x67,
	0x94, 0x5e, 0x98, 0xa3, 0x0f, 0xf2, 0x4a, 0x4a, 0x62, 0x49, 0x62, 0x12, 0x1b, 0x58, 0xcc, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0x68, 0xa4, 0x98, 0x4b, 0xdd, 0x00, 0x00, 0x00,
}
