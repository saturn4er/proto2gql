package common_generator

const headTemplate = `
// This file was generated by github.com/saturn4er/proto2gql. DO NOT EDIT IT
package {{$.package}}

import (
{{range $import := $.imports}}
	{{$import.Alias}} "{{$import.Path}}"
{{end}}
)
`

const bodyTemplate = `
// Enums
{{range $enum := .File.Enums -}}
	var {{$enum.VariableName}} = {{gqlPkg}}.NewEnum({{gqlPkg}}.EnumConfig{
		Name:        "{{$enum.GraphQLName}}",
		Description: {{$enum.Comment}},
		Values: {{gqlPkg}}.EnumValueConfigMap{
            {{range $value := $enum.Values -}}
				"{{$value.Name}}": &{{gqlPkg}}.EnumValueConfig{
					Value: {{$value.Value}},
					Description: {{$value.Comment}},
				},
			{{end -}}
		},
	})
{{end -}}


// Input object
{{ range $object := .File.InputObjects -}}
	var {{$object.VariableName}} = {{gqlPkg}}.NewInputObject({{gqlPkg}}.InputObjectConfig{
        Name: "{{$object.GraphQLName}}",
        Fields: {{gqlPkg}}.InputObjectConfigFieldMapThunk(func() {{gqlPkg}}.InputObjectConfigFieldMap {
            return {{gqlPkg}}.InputObjectConfigFieldMap{
                {{range $field := $object.Fields -}}
                    "{{$field.Name}}": &{{gqlPkg}}.InputObjectFieldConfig{
						Type: {{call $field.Type $}},
                    },
                {{end -}}
            }
        }),
    })	
{{ end -}}

// Input objects resolvers
{{ range $resolver := .File.InputObjectResolvers -}}
func {{$resolver.FunctionName}}({{ if $.TracerEnabled }} tr {{tracerPkg}}.Tracer, {{end}}ctx {{ctxPkg}}.Context, i interface{}) (_ *{{$resolver.OutputGoType}}, rerr error){
	{{ if $.TracerEnabled -}}
		span := tr.CreateChildSpanFromContext(ctx, "{{$resolver.FunctionName}}")
		defer span.Finish()
		defer func(){
			if perr := recover(); perr != nil {
				span.SetTag("error", "true")
				span.SetTag("error_message", perr)
				span.SetTag("error_stack", string({{debugPkg}}.Stack()))
			}
			if rerr != nil {
				span.SetTag("error", "true")
				span.SetTag("error_message", rerr.Error())
			}
		}()
	{{end -}}
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new({{$resolver.OutputGoType}})
	{{ range $field := $resolver.Fields -}}
		{{ if $field.IsArray -}}
			 
		{{ end -}}
	{{ end -}}

	return result, nil
}
{{ end -}}


`
