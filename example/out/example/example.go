// This file was generated by github.com/saturn4er/proto2gql. DO NOT EDIT IT

package example

import (
	context "context"
	errors "errors"
	fmt "fmt"
	debug "runtime/debug"
	strconv "strconv"

	timestamp_1 "github.com/golang/protobuf/ptypes/timestamp"
	graphql "github.com/graphql-go/graphql"
	opentracing_go "github.com/opentracing/opentracing-go"
	interceptors "github.com/saturn4er/proto2gql/api/interceptors"
	scalars "github.com/saturn4er/proto2gql/api/scalars"
	timestamp "github.com/saturn4er/proto2gql/example/out/imports/github.com/golang/protobuf/ptypes/timestamp"
	proto "github.com/saturn4er/proto2gql/example/proto"
	"google.golang.org/grpc"
)

var (
	_ = errors.New
	_ = graphql.NewObject
	_ = context.Background
	_ = strconv.FormatBool
	_ = fmt.Print
	_ = opentracing_go.GlobalTracer
	_ = debug.FreeOSMemory
)

type (
	_ = interceptors.CallInterceptor
)

// Enums
var ExmplSomeEnum = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplSomeEnum",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"Val1": &graphql.EnumValueConfig{
			Value:       0,
			Description: "",
		},
		"Val2": &graphql.EnumValueConfig{
			Value:       1,
			Description: "",
		},
	},
})
var ExmplAsomeEnum3 = graphql.NewEnum(graphql.EnumConfig{
	Name:        "ExmplAsomeEnum3",
	Description: "",
	Values: graphql.EnumValueConfigMap{
		"Val5": &graphql.EnumValueConfig{
			Value:       0,
			Description: "",
		},
		"Val6": &graphql.EnumValueConfig{
			Value:       1,
			Description: "",
		},
	},
})

// Messages
var ExmplA = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplA",
	Fields: graphql.Fields{},
})
var ExmplAInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplAInput",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"r_msg": &graphql.InputObjectFieldConfig{
				Type: graphql.NewList(graphql.NewNonNull(timestamp.TimestampInput)),
			},
			"r_scalar": &graphql.InputObjectFieldConfig{
				Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar)),
			},
			"r_enum": &graphql.InputObjectFieldConfig{
				Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum)),
			},
			"n_r_enum": &graphql.InputObjectFieldConfig{
				Type: ExmplAsomeEnum3,
			},
			"n_r_scalar": &graphql.InputObjectFieldConfig{
				Type: scalars.GraphQLInt32Scalar,
			},
			"n_r_msg": &graphql.InputObjectFieldConfig{
				Type: timestamp.TimestampInput,
			},
			"scalar_from_context": &graphql.InputObjectFieldConfig{
				Type: scalars.GraphQLInt32Scalar,
			},
			"enum_from_context": &graphql.InputObjectFieldConfig{
				Type: ExmplSomeEnum,
			},
			"message_from_context": &graphql.InputObjectFieldConfig{
				Type: timestamp.TimestampInput,
			},
			"message_with_oneoffs": &graphql.InputObjectFieldConfig{
				Type: ExmplAOneOffsInput,
			},
			"map_enum": &graphql.InputObjectFieldConfig{
				Type: ExmplAMapEnumMapInput,
			},
			"map_scalar": &graphql.InputObjectFieldConfig{
				Type: ExmplAMapScalarMapInput,
			},
			"map_msg": &graphql.InputObjectFieldConfig{
				Type: ExmplAMapMsgMapInput,
			},
		}
	}),
})

// Output msg resolver
func ResolveA(ctx context.Context, i interface{}) (_ *proto.A, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.A)
	// Repeated Message
	if args["r_msg"] != nil {
		var r_msg_list = args["r_msg"].([]interface{})
		var r_msg_ = make([]*timestamp_1.Timestamp, len(r_msg_list))
		for i, r_msg_item := range r_msg_list {

			r_msg_r, err := timestamp.ResolveTimestamp(ctx, r_msg_item)

			if err != nil {
				return nil, errors.New("failed to parse r_msg[" + strconv.Itoa(i) + "]: " + err.Error())
			}
			r_msg_[i] = r_msg_r
		}
		result.RMsg = r_msg_
	}
	// Repeated Scalar type
	if args["r_scalar"] != nil {
		var r_scalar_list = args["r_scalar"].([]interface{})
		var r_scalar_ = make([]int32, len(r_scalar_list))
		for i, r_scalar_item := range r_scalar_list {
			r_scalar_r, ok := r_scalar_item.(int32)
			if !ok {
				return nil, errors.New("failed to parse r_scalar[" + strconv.Itoa(i) + "]")
			}
			r_scalar_[i] = r_scalar_r
		}
		result.RScalar = r_scalar_
	}
	// Repeated Enum
	if args["r_enum"] != nil {
		var r_enum_list = args["r_enum"].([]interface{})
		var r_enum_ = make([]proto.SomeEnum, len(r_enum_list))
		for i, r_enum_item := range r_enum_list {
			r_enum_r, ok := r_enum_item.(int)
			if !ok {
				return nil, errors.New("failed to parse r_enum[" + strconv.Itoa(i) + "]")
			}
			r_enum_[i] = proto.SomeEnum(r_enum_r)
		}
		result.REnum = r_enum_
	}
	// Non-repeated enum
	if args["n_r_enum"] != nil {
		result.NREnum = proto.ASomeEnum3(args["n_r_enum"].(int))
	}
	// Non-repeated scalar
	if args["n_r_scalar"] != nil {
		result.NRScalar = args["n_r_scalar"].(int32)
	}
	// Non-repeated message
	n_r_msg_r, err := timestamp.ResolveTimestamp(ctx, args["n_r_msg"])
	if err != nil {
		return nil, errors.New("failed to parse n_r_msg: " + err.Error())
	}
	result.NRMsg = n_r_msg_r
	// Non-repeated scalar
	if args["scalar_from_context"] != nil {
		result.ScalarFromContext = args["scalar_from_context"].(int32)
	}
	// Non-repeated enum
	if args["enum_from_context"] != nil {
		result.EnumFromContext = proto.SomeEnum(args["enum_from_context"].(int))
	}
	// Non-repeated message
	message_from_context_r, err := timestamp.ResolveTimestamp(ctx, args["message_from_context"])
	if err != nil {
		return nil, errors.New("failed to parse message_from_context: " + err.Error())
	}
	result.MessageFromContext = message_from_context_r
	// Non-repeated message
	message_with_oneoffs_r, err := ResolveAOneOffs(ctx, args["message_with_oneoffs"])
	if err != nil {
		return nil, errors.New("failed to parse message_with_oneoffs: " + err.Error())
	}
	result.MessageWithOneoffs = message_with_oneoffs_r
	// Map
	map_enum_, err := ResolveAMapEnumMap(ctx, args["map_enum"])
	if err != nil {
		return nil, errors.New("failed to parse map_enum: " + err.Error())
	}
	if map_enum_ != nil {
		result.MapEnum = map_enum_
	}
	// Map
	map_scalar_, err := ResolveAMapScalarMap(ctx, args["map_scalar"])
	if err != nil {
		return nil, errors.New("failed to parse map_scalar: " + err.Error())
	}
	if map_scalar_ != nil {
		result.MapScalar = map_scalar_
	}
	// Map
	map_msg_, err := ResolveAMapMsgMap(ctx, args["map_msg"])
	if err != nil {
		return nil, errors.New("failed to parse map_msg: " + err.Error())
	}
	if map_msg_ != nil {
		result.MapMsg = map_msg_
	}

	return result, nil
}

var ExmplAOneOffs = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplAOneOffs",
	Fields: graphql.Fields{},
})
var ExmplAOneOffsInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplAOneOffsInput",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"e_n_r_enum": &graphql.InputObjectFieldConfig{
				Type: ExmplSomeEnum,
			},
			"e_n_r_scalar": &graphql.InputObjectFieldConfig{
				Type: scalars.GraphQLInt32Scalar,
			},
			"e_n_r_msg": &graphql.InputObjectFieldConfig{
				Type: timestamp.TimestampInput,
			},
			"s_n_r_scalar": &graphql.InputObjectFieldConfig{
				Type: scalars.GraphQLInt32Scalar,
			},
			"s_n_r_enum": &graphql.InputObjectFieldConfig{
				Type: ExmplSomeEnum,
			},
			"s_n_r_msg": &graphql.InputObjectFieldConfig{
				Type: timestamp.TimestampInput,
			},
			"m_n_r_msg": &graphql.InputObjectFieldConfig{
				Type: timestamp.TimestampInput,
			},
			"m_n_r_scalar": &graphql.InputObjectFieldConfig{
				Type: scalars.GraphQLInt32Scalar,
			},
			"m_n_r_enum": &graphql.InputObjectFieldConfig{
				Type: ExmplSomeEnum,
			},
		}
	}),
})

// Output msg resolver
func ResolveAOneOffs(ctx context.Context, i interface{}) (_ *proto.AOneOffs, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.AOneOffs)
	//Generated oneoff
	if e_n_r_enum_, ok := args["e_n_r_enum"]; ok && e_n_r_enum_ != nil { // Non-repeated enum
		result.FirstEnum = &proto.AOneOffs_ENREnum{proto.SomeEnum(e_n_r_enum_.(int))}
	} else if e_n_r_scalar_, ok := args["e_n_r_scalar"]; ok && e_n_r_scalar_ != nil {
		// Non-repeated scalar
		result.FirstEnum = &proto.AOneOffs_ENRScalar{e_n_r_scalar_.(int32)}
	} else if e_n_r_msg_, ok := args["e_n_r_msg"]; ok && e_n_r_msg_ != nil {
		// Non-repeated message

		e_n_r_msg_r, err := timestamp.ResolveTimestamp(ctx, e_n_r_msg_)

		if err != nil {
			return nil, errors.New("failed to parse e_n_r_msg: " + err.Error())
		}
		result.FirstEnum = &proto.AOneOffs_ENRMsg{e_n_r_msg_r}
	} //Generated oneoff
	if s_n_r_scalar_, ok := args["s_n_r_scalar"]; ok && s_n_r_scalar_ != nil { // Non-repeated scalar
		result.FirstScalar = &proto.AOneOffs_SNRScalar{s_n_r_scalar_.(int32)}
	} else if s_n_r_enum_, ok := args["s_n_r_enum"]; ok && s_n_r_enum_ != nil {
		// Non-repeated enum
		result.FirstScalar = &proto.AOneOffs_SNREnum{proto.SomeEnum(s_n_r_enum_.(int))}
	} else if s_n_r_msg_, ok := args["s_n_r_msg"]; ok && s_n_r_msg_ != nil {
		// Non-repeated message

		s_n_r_msg_r, err := timestamp.ResolveTimestamp(ctx, s_n_r_msg_)

		if err != nil {
			return nil, errors.New("failed to parse s_n_r_msg: " + err.Error())
		}
		result.FirstScalar = &proto.AOneOffs_SNRMsg{s_n_r_msg_r}
	} //Generated oneoff
	if m_n_r_msg_, ok := args["m_n_r_msg"]; ok && m_n_r_msg_ != nil { // Non-repeated message

		m_n_r_msg_r, err := timestamp.ResolveTimestamp(ctx, m_n_r_msg_)

		if err != nil {
			return nil, errors.New("failed to parse m_n_r_msg: " + err.Error())
		}
		result.FirstMessage = &proto.AOneOffs_MNRMsg{m_n_r_msg_r}
	} else if m_n_r_scalar_, ok := args["m_n_r_scalar"]; ok && m_n_r_scalar_ != nil {
		// Non-repeated scalar
		result.FirstMessage = &proto.AOneOffs_MNRScalar{m_n_r_scalar_.(int32)}
	} else if m_n_r_enum_, ok := args["m_n_r_enum"]; ok && m_n_r_enum_ != nil {
		// Non-repeated enum
		result.FirstMessage = &proto.AOneOffs_MNREnum{proto.SomeEnum(m_n_r_enum_.(int))}
	}
	return result, nil
}

var ExmplMsgWithEmpty = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplMsgWithEmpty",
	Fields: graphql.Fields{},
})
var ExmplMsgWithEmptyInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplMsgWithEmptyInput",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"empty_field": &graphql.InputObjectFieldConfig{
				Type: scalars.NoDataScalar,
			},
		}
	}),
})

// Output msg resolver
func ResolveMsgWithEmpty(ctx context.Context, i interface{}) (_ *proto.MsgWithEmpty, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.MsgWithEmpty)
	// Non-repeated message
	result.EmptyField = new(proto.Empty)

	return result, nil
}

var ExmplB = graphql.NewObject(graphql.ObjectConfig{
	Name:   "ExmplB",
	Fields: graphql.Fields{},
})
var ExmplBInput = graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplBInput",
	Fields: graphql.InputObjectConfigFieldMapThunk(func() graphql.InputObjectConfigFieldMap {
		return graphql.InputObjectConfigFieldMap{
			"r_msg": &graphql.InputObjectFieldConfig{
				Type: graphql.NewList(graphql.NewNonNull(timestamp.TimestampInput)),
			},
			"r_scalar": &graphql.InputObjectFieldConfig{
				Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar)),
			},
			"r_enum": &graphql.InputObjectFieldConfig{
				Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum)),
			},
			"n_r_enum": &graphql.InputObjectFieldConfig{
				Type: ExmplSomeEnum,
			},
			"n_r_scalar": &graphql.InputObjectFieldConfig{
				Type: scalars.GraphQLInt32Scalar,
			},
			"n_r_msg": &graphql.InputObjectFieldConfig{
				Type: timestamp.TimestampInput,
			},
			"map_enum": &graphql.InputObjectFieldConfig{
				Type: ExmplBMapEnumMapInput,
			},
			"map_scalar": &graphql.InputObjectFieldConfig{
				Type: ExmplBMapScalarMapInput,
			},
			"map_msg": &graphql.InputObjectFieldConfig{
				Type: ExmplBMapMsgMapInput,
			},
		}
	}),
})

// Output msg resolver
func ResolveB(ctx context.Context, i interface{}) (_ *proto.B, rerr error) {
	if i == nil {
		return nil, nil
	}
	args := i.(map[string]interface{})
	_ = args
	var result = new(proto.B)
	// Repeated Message
	if args["r_msg"] != nil {
		var r_msg_list = args["r_msg"].([]interface{})
		var r_msg_ = make([]*timestamp_1.Timestamp, len(r_msg_list))
		for i, r_msg_item := range r_msg_list {

			r_msg_r, err := timestamp.ResolveTimestamp(ctx, r_msg_item)

			if err != nil {
				return nil, errors.New("failed to parse r_msg[" + strconv.Itoa(i) + "]: " + err.Error())
			}
			r_msg_[i] = r_msg_r
		}
		result.RMsg = r_msg_
	}
	// Repeated Scalar type
	if args["r_scalar"] != nil {
		var r_scalar_list = args["r_scalar"].([]interface{})
		var r_scalar_ = make([]int32, len(r_scalar_list))
		for i, r_scalar_item := range r_scalar_list {
			r_scalar_r, ok := r_scalar_item.(int32)
			if !ok {
				return nil, errors.New("failed to parse r_scalar[" + strconv.Itoa(i) + "]")
			}
			r_scalar_[i] = r_scalar_r
		}
		result.RScalar = r_scalar_
	}
	// Repeated Enum
	if args["r_enum"] != nil {
		var r_enum_list = args["r_enum"].([]interface{})
		var r_enum_ = make([]proto.SomeEnum, len(r_enum_list))
		for i, r_enum_item := range r_enum_list {
			r_enum_r, ok := r_enum_item.(int)
			if !ok {
				return nil, errors.New("failed to parse r_enum[" + strconv.Itoa(i) + "]")
			}
			r_enum_[i] = proto.SomeEnum(r_enum_r)
		}
		result.REnum = r_enum_
	}
	// Non-repeated enum
	if args["n_r_enum"] != nil {
		result.NREnum = proto.SomeEnum(args["n_r_enum"].(int))
	}
	// Non-repeated scalar
	if args["n_r_scalar"] != nil {
		result.NRScalar = args["n_r_scalar"].(int32)
	}
	// Non-repeated message
	n_r_msg_r, err := timestamp.ResolveTimestamp(ctx, args["n_r_msg"])
	if err != nil {
		return nil, errors.New("failed to parse n_r_msg: " + err.Error())
	}
	result.NRMsg = n_r_msg_r
	// Map
	map_enum_, err := ResolveBMapEnumMap(ctx, args["map_enum"])
	if err != nil {
		return nil, errors.New("failed to parse map_enum: " + err.Error())
	}
	if map_enum_ != nil {
		result.MapEnum = map_enum_
	}
	// Map
	map_scalar_, err := ResolveBMapScalarMap(ctx, args["map_scalar"])
	if err != nil {
		return nil, errors.New("failed to parse map_scalar: " + err.Error())
	}
	if map_scalar_ != nil {
		result.MapScalar = map_scalar_
	}
	// Map
	map_msg_, err := ResolveBMapMsgMap(ctx, args["map_msg"])
	if err != nil {
		return nil, errors.New("failed to parse map_msg: " + err.Error())
	}
	if map_msg_ != nil {
		result.MapMsg = map_msg_
	}

	return result, nil
}

// Maps
// <no value>

var ExmplAMapEnumMap = graphql.NewList(graphql.NewNonNull(graphql.NewObject(graphql.ObjectConfig{
	Name: "ExmplAMapEnumMap",
	Fields: graphql.Fields{
		"key": &graphql.Field{
			Name: "key",
			Type: scalars.GraphQLInt32Scalar,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["key"].(int32), nil
			},
		},
		"value": &graphql.Field{
			Name: "value",
			Type: ExmplSomeEnum,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["value"].(proto.SomeEnum), nil
			},
		},
	},
})))

// MAP A
var ExmplAMapEnumMapInput = graphql.NewList(graphql.NewNonNull(graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplAMapEnumMapInput",
	Fields: graphql.InputObjectConfigFieldMap{
		"key": &graphql.InputObjectFieldConfig{
			Type: scalars.GraphQLInt32Scalar,
		},
		"value": &graphql.InputObjectFieldConfig{
			Type: ExmplSomeEnum,
		},
	},
})))

func ResolveAMapEnumMap(ctx context.Context, i interface{}) (_ map[int32]proto.SomeEnum, rerr error) {
	if i == nil {
		return nil, nil
	}
	result := make(map[int32]proto.SomeEnum)
	vals := i.([]interface{})
	for _, v := range vals {
		args := v.(map[string]interface{})
		result[args["key"].(int32)] = proto.SomeEnum(args["value"].(int))
	}
	return result, nil
}

var ExmplAMapScalarMap = graphql.NewList(graphql.NewNonNull(graphql.NewObject(graphql.ObjectConfig{
	Name: "ExmplAMapScalarMap",
	Fields: graphql.Fields{
		"key": &graphql.Field{
			Name: "key",
			Type: scalars.GraphQLInt32Scalar,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["key"].(int32), nil
			},
		},
		"value": &graphql.Field{
			Name: "value",
			Type: scalars.GraphQLInt32Scalar,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["value"].(int32), nil
			},
		},
	},
})))

// MAP A
var ExmplAMapScalarMapInput = graphql.NewList(graphql.NewNonNull(graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplAMapScalarMapInput",
	Fields: graphql.InputObjectConfigFieldMap{
		"key": &graphql.InputObjectFieldConfig{
			Type: scalars.GraphQLInt32Scalar,
		},
		"value": &graphql.InputObjectFieldConfig{
			Type: scalars.GraphQLInt32Scalar,
		},
	},
})))

func ResolveAMapScalarMap(ctx context.Context, i interface{}) (_ map[int32]int32, rerr error) {
	if i == nil {
		return nil, nil
	}
	result := make(map[int32]int32)
	vals := i.([]interface{})
	for _, v := range vals {
		args := v.(map[string]interface{})
		result[args["key"].(int32)] = args["value"].(int32)
	}
	return result, nil
}

var ExmplAMapMsgMap = graphql.NewList(graphql.NewNonNull(graphql.NewObject(graphql.ObjectConfig{
	Name: "ExmplAMapMsgMap",
	Fields: graphql.Fields{
		"key": &graphql.Field{
			Name: "key",
			Type: scalars.GraphQLInt32Scalar,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["key"].(int32), nil
			},
		},
		"value": &graphql.Field{
			Name: "value",
			Type: timestamp.Timestamp,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["value"].(timestamp_1.Timestamp), nil
			},
		},
	},
})))

// MAP A
var ExmplAMapMsgMapInput = graphql.NewList(graphql.NewNonNull(graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplAMapMsgMapInput",
	Fields: graphql.InputObjectConfigFieldMap{
		"key": &graphql.InputObjectFieldConfig{
			Type: scalars.GraphQLInt32Scalar,
		},
		"value": &graphql.InputObjectFieldConfig{
			Type: timestamp.TimestampInput,
		},
	},
})))

func ResolveAMapMsgMap(ctx context.Context, i interface{}) (_ map[int32]*timestamp_1.Timestamp, rerr error) {
	if i == nil {
		return nil, nil
	}
	result := make(map[int32]*timestamp_1.Timestamp)
	vals := i.([]interface{})
	for iv, v := range vals {
		args := v.(map[string]interface{})

		vv, err := timestamp.ResolveTimestamp(ctx, args["value"])

		if err != nil {
			return nil, errors.New("failed to parse ExmplAMapMsgMap[" + strconv.Itoa(iv) + "]: " + err.Error())
		}
		result[args["key"].(int32)] = vv
	}
	return result, nil
}

var ExmplBMapEnumMap = graphql.NewList(graphql.NewNonNull(graphql.NewObject(graphql.ObjectConfig{
	Name: "ExmplBMapEnumMap",
	Fields: graphql.Fields{
		"key": &graphql.Field{
			Name: "key",
			Type: scalars.GraphQLInt32Scalar,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["key"].(int32), nil
			},
		},
		"value": &graphql.Field{
			Name: "value",
			Type: ExmplSomeEnum,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["value"].(proto.SomeEnum), nil
			},
		},
	},
})))

// MAP B
var ExmplBMapEnumMapInput = graphql.NewList(graphql.NewNonNull(graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplBMapEnumMapInput",
	Fields: graphql.InputObjectConfigFieldMap{
		"key": &graphql.InputObjectFieldConfig{
			Type: scalars.GraphQLInt32Scalar,
		},
		"value": &graphql.InputObjectFieldConfig{
			Type: ExmplSomeEnum,
		},
	},
})))

func ResolveBMapEnumMap(ctx context.Context, i interface{}) (_ map[int32]proto.SomeEnum, rerr error) {
	if i == nil {
		return nil, nil
	}
	result := make(map[int32]proto.SomeEnum)
	vals := i.([]interface{})
	for _, v := range vals {
		args := v.(map[string]interface{})
		result[args["key"].(int32)] = proto.SomeEnum(args["value"].(int))
	}
	return result, nil
}

var ExmplBMapScalarMap = graphql.NewList(graphql.NewNonNull(graphql.NewObject(graphql.ObjectConfig{
	Name: "ExmplBMapScalarMap",
	Fields: graphql.Fields{
		"key": &graphql.Field{
			Name: "key",
			Type: scalars.GraphQLInt32Scalar,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["key"].(int32), nil
			},
		},
		"value": &graphql.Field{
			Name: "value",
			Type: scalars.GraphQLInt32Scalar,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["value"].(int32), nil
			},
		},
	},
})))

// MAP B
var ExmplBMapScalarMapInput = graphql.NewList(graphql.NewNonNull(graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplBMapScalarMapInput",
	Fields: graphql.InputObjectConfigFieldMap{
		"key": &graphql.InputObjectFieldConfig{
			Type: scalars.GraphQLInt32Scalar,
		},
		"value": &graphql.InputObjectFieldConfig{
			Type: scalars.GraphQLInt32Scalar,
		},
	},
})))

func ResolveBMapScalarMap(ctx context.Context, i interface{}) (_ map[int32]int32, rerr error) {
	if i == nil {
		return nil, nil
	}
	result := make(map[int32]int32)
	vals := i.([]interface{})
	for _, v := range vals {
		args := v.(map[string]interface{})
		result[args["key"].(int32)] = args["value"].(int32)
	}
	return result, nil
}

var ExmplBMapMsgMap = graphql.NewList(graphql.NewNonNull(graphql.NewObject(graphql.ObjectConfig{
	Name: "ExmplBMapMsgMap",
	Fields: graphql.Fields{
		"key": &graphql.Field{
			Name: "key",
			Type: scalars.GraphQLInt32Scalar,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["key"].(int32), nil
			},
		},
		"value": &graphql.Field{
			Name: "value",
			Type: timestamp.Timestamp,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				src := p.Source.(map[string]interface{})
				if src == nil {
					return nil, nil
				}
				return src["value"].(timestamp_1.Timestamp), nil
			},
		},
	},
})))

// MAP B
var ExmplBMapMsgMapInput = graphql.NewList(graphql.NewNonNull(graphql.NewInputObject(graphql.InputObjectConfig{
	Name: "ExmplBMapMsgMapInput",
	Fields: graphql.InputObjectConfigFieldMap{
		"key": &graphql.InputObjectFieldConfig{
			Type: scalars.GraphQLInt32Scalar,
		},
		"value": &graphql.InputObjectFieldConfig{
			Type: timestamp.TimestampInput,
		},
	},
})))

func ResolveBMapMsgMap(ctx context.Context, i interface{}) (_ map[int32]*timestamp_1.Timestamp, rerr error) {
	if i == nil {
		return nil, nil
	}
	result := make(map[int32]*timestamp_1.Timestamp)
	vals := i.([]interface{})
	for iv, v := range vals {
		args := v.(map[string]interface{})

		vv, err := timestamp.ResolveTimestamp(ctx, args["value"])

		if err != nil {
			return nil, errors.New("failed to parse ExmplBMapMsgMap[" + strconv.Itoa(iv) + "]: " + err.Error())
		}
		result[args["key"].(int32)] = vv
	}
	return result, nil
}
func init() {
	// Adding fields to output messages
	// A message fields
	ExmplA.AddFieldConfig("r_msg", &graphql.Field{
		Name: "r_msg",
		Type: graphql.NewList(graphql.NewNonNull(timestamp.Timestamp)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			return src.RMsg, nil
		},
	})
	ExmplA.AddFieldConfig("r_scalar", &graphql.Field{
		Name: "r_scalar",
		Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			return src.RScalar, nil
		},
	})
	ExmplA.AddFieldConfig("r_enum", &graphql.Field{
		Name: "r_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			source := src.REnum
			var result = make([]int, len(source))
			for i, val := range source {
				result[i] = int(val)
			}
			return result, nil
		},
	})
	ExmplA.AddFieldConfig("n_r_enum", &graphql.Field{
		Name: "n_r_enum",
		Type: ExmplAsomeEnum3,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			return int(src.NREnum), nil
		},
	})
	ExmplA.AddFieldConfig("n_r_scalar", &graphql.Field{
		Name: "n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			return src.NRScalar, nil
		},
	})
	ExmplA.AddFieldConfig("n_r_msg", &graphql.Field{
		Name: "n_r_msg",
		Type: timestamp.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			return src.NRMsg, nil
		},
	})
	ExmplA.AddFieldConfig("scalar_from_context", &graphql.Field{
		Name: "scalar_from_context",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			return src.ScalarFromContext, nil
		},
	})
	ExmplA.AddFieldConfig("enum_from_context", &graphql.Field{
		Name: "enum_from_context",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			return int(src.EnumFromContext), nil
		},
	})
	ExmplA.AddFieldConfig("message_from_context", &graphql.Field{
		Name: "message_from_context",
		Type: timestamp.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			return src.MessageFromContext, nil
		},
	})
	ExmplA.AddFieldConfig("message_with_oneoffs", &graphql.Field{
		Name: "message_with_oneoffs",
		Type: ExmplAOneOffs,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			return src.MessageWithOneoffs, nil
		},
	})
	// Map field
	ExmplA.AddFieldConfig("map_enum", &graphql.Field{
		Name: "map_enum",
		Type: ExmplAMapEnumMap,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			var res []map[string]interface{}
			for k, v := range src.MapEnum {
				res = append(res, map[string]interface{}{
					"key":   k,
					"value": v,
				})
			}
			return res, nil
		},
	})
	// Map field
	ExmplA.AddFieldConfig("map_scalar", &graphql.Field{
		Name: "map_scalar",
		Type: ExmplAMapScalarMap,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			var res []map[string]interface{}
			for k, v := range src.MapScalar {
				res = append(res, map[string]interface{}{
					"key":   k,
					"value": v,
				})
			}
			return res, nil
		},
	})
	// Map field
	ExmplA.AddFieldConfig("map_msg", &graphql.Field{
		Name: "map_msg",
		Type: ExmplAMapMsgMap,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.A)
			if src == nil {
				return nil, nil
			}
			var res []map[string]interface{}
			for k, v := range src.MapMsg {
				res = append(res, map[string]interface{}{
					"key":   k,
					"value": v,
				})
			}
			return res, nil
		},
	})
	// AOneOffs message fields
	// One OFF output
	ExmplAOneOffs.AddFieldConfig("e_n_r_enum", &graphql.Field{
		Name: "e_n_r_enum",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.AOneOffs)
			if src == nil {
				return nil, nil
			}
			return int(src.GetENREnum()), nil
		},
	})
	// One OFF output
	ExmplAOneOffs.AddFieldConfig("e_n_r_scalar", &graphql.Field{
		Name: "e_n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.AOneOffs)
			if src == nil {
				return nil, nil
			}
			return src.GetENRScalar(), nil
		},
	})
	// One OFF output
	ExmplAOneOffs.AddFieldConfig("e_n_r_msg", &graphql.Field{
		Name: "e_n_r_msg",
		Type: timestamp.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.AOneOffs)
			if src == nil {
				return nil, nil
			}
			return src.GetENRMsg(), nil
		},
	})
	// One OFF output
	ExmplAOneOffs.AddFieldConfig("s_n_r_scalar", &graphql.Field{
		Name: "s_n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.AOneOffs)
			if src == nil {
				return nil, nil
			}
			return src.GetSNRScalar(), nil
		},
	})
	// One OFF output
	ExmplAOneOffs.AddFieldConfig("s_n_r_enum", &graphql.Field{
		Name: "s_n_r_enum",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.AOneOffs)
			if src == nil {
				return nil, nil
			}
			return int(src.GetSNREnum()), nil
		},
	})
	// One OFF output
	ExmplAOneOffs.AddFieldConfig("s_n_r_msg", &graphql.Field{
		Name: "s_n_r_msg",
		Type: timestamp.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.AOneOffs)
			if src == nil {
				return nil, nil
			}
			return src.GetSNRMsg(), nil
		},
	})
	// One OFF output
	ExmplAOneOffs.AddFieldConfig("m_n_r_msg", &graphql.Field{
		Name: "m_n_r_msg",
		Type: timestamp.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.AOneOffs)
			if src == nil {
				return nil, nil
			}
			return src.GetMNRMsg(), nil
		},
	})
	// One OFF output
	ExmplAOneOffs.AddFieldConfig("m_n_r_scalar", &graphql.Field{
		Name: "m_n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.AOneOffs)
			if src == nil {
				return nil, nil
			}
			return src.GetMNRScalar(), nil
		},
	})
	// One OFF output
	ExmplAOneOffs.AddFieldConfig("m_n_r_enum", &graphql.Field{
		Name: "m_n_r_enum",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.AOneOffs)
			if src == nil {
				return nil, nil
			}
			return int(src.GetMNREnum()), nil
		},
	})
	// MsgWithEmpty message fields
	ExmplMsgWithEmpty.AddFieldConfig("empty_field", &graphql.Field{
		Name: "empty_field",
		Type: scalars.NoDataScalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.MsgWithEmpty)
			if src == nil {
				return nil, nil
			}
			return src.EmptyField, nil
		},
	})
	// Empty message fields
	// B message fields
	ExmplB.AddFieldConfig("r_msg", &graphql.Field{
		Name: "r_msg",
		Type: graphql.NewList(graphql.NewNonNull(timestamp.Timestamp)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.B)
			if src == nil {
				return nil, nil
			}
			return src.RMsg, nil
		},
	})
	ExmplB.AddFieldConfig("r_scalar", &graphql.Field{
		Name: "r_scalar",
		Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.B)
			if src == nil {
				return nil, nil
			}
			return src.RScalar, nil
		},
	})
	ExmplB.AddFieldConfig("r_enum", &graphql.Field{
		Name: "r_enum",
		Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum)),
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.B)
			if src == nil {
				return nil, nil
			}
			source := src.REnum
			var result = make([]int, len(source))
			for i, val := range source {
				result[i] = int(val)
			}
			return result, nil
		},
	})
	ExmplB.AddFieldConfig("n_r_enum", &graphql.Field{
		Name: "n_r_enum",
		Type: ExmplSomeEnum,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.B)
			if src == nil {
				return nil, nil
			}
			return int(src.NREnum), nil
		},
	})
	ExmplB.AddFieldConfig("n_r_scalar", &graphql.Field{
		Name: "n_r_scalar",
		Type: scalars.GraphQLInt32Scalar,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.B)
			if src == nil {
				return nil, nil
			}
			return src.NRScalar, nil
		},
	})
	ExmplB.AddFieldConfig("n_r_msg", &graphql.Field{
		Name: "n_r_msg",
		Type: timestamp.Timestamp,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.B)
			if src == nil {
				return nil, nil
			}
			return src.NRMsg, nil
		},
	})
	// Map field
	ExmplB.AddFieldConfig("map_enum", &graphql.Field{
		Name: "map_enum",
		Type: ExmplBMapEnumMap,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.B)
			if src == nil {
				return nil, nil
			}
			var res []map[string]interface{}
			for k, v := range src.MapEnum {
				res = append(res, map[string]interface{}{
					"key":   k,
					"value": v,
				})
			}
			return res, nil
		},
	})
	// Map field
	ExmplB.AddFieldConfig("map_scalar", &graphql.Field{
		Name: "map_scalar",
		Type: ExmplBMapScalarMap,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.B)
			if src == nil {
				return nil, nil
			}
			var res []map[string]interface{}
			for k, v := range src.MapScalar {
				res = append(res, map[string]interface{}{
					"key":   k,
					"value": v,
				})
			}
			return res, nil
		},
	})
	// Map field
	ExmplB.AddFieldConfig("map_msg", &graphql.Field{
		Name: "map_msg",
		Type: ExmplBMapMsgMap,
		Resolve: func(p graphql.ResolveParams) (interface{}, error) {
			src := p.Source.(*proto.B)
			if src == nil {
				return nil, nil
			}
			var res []map[string]interface{}
			for k, v := range src.MapMsg {
				res = append(res, map[string]interface{}{
					"key":   k,
					"value": v,
				})
			}
			return res, nil
		},
	})
}

func GetServiceExampleGraphQLQueriesFields(c proto.ServiceExampleClient, ih *interceptors.InterceptorHandler) graphql.Fields {

	return graphql.Fields{

		"getQueryMethod": &graphql.Field{
			Name: "getQueryMethod",
			Type: ExmplB,
			Args: graphql.FieldConfigArgument{
				"e_n_r_enum": &graphql.ArgumentConfig{
					Type: ExmplSomeEnum,
				},
				"e_n_r_scalar": &graphql.ArgumentConfig{
					Type: scalars.GraphQLInt32Scalar,
				},
				"e_n_r_msg": &graphql.ArgumentConfig{
					Type: timestamp.TimestampInput,
				},
				"s_n_r_scalar": &graphql.ArgumentConfig{
					Type: scalars.GraphQLInt32Scalar,
				},
				"s_n_r_enum": &graphql.ArgumentConfig{
					Type: ExmplSomeEnum,
				},
				"s_n_r_msg": &graphql.ArgumentConfig{
					Type: timestamp.TimestampInput,
				},
				"m_n_r_msg": &graphql.ArgumentConfig{
					Type: timestamp.TimestampInput,
				},
				"m_n_r_scalar": &graphql.ArgumentConfig{
					Type: scalars.GraphQLInt32Scalar,
				},
				"m_n_r_enum": &graphql.ArgumentConfig{
					Type: ExmplSomeEnum,
				},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				if ih == nil {
					req, err := ResolveAOneOffs(p.Context, p.Args)
					if err != nil {
						return nil, err
					}
					return c.GetQueryMethod(p.Context, req)
				}
				ctx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "getQueryMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ctx, func(ctx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveAOneOffs(p.Context, p.Args)
				})
				if err != nil {
					return nil, err
				}
				res, err := ih.Call(ctx, req, func(ctx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker, opts ...grpc.CallOption) (result interface{}, err error) {
					r, ok := req.(*proto.AOneOffs)
					if !ok {
						return nil, errors.New(fmt.Sprintf("resolve args interceptor returns bad request type(%T). Should be: *proto.AOneOffs", req))
					}
					res, err := c.GetQueryMethod(ctx.Params.Context, r, opts...)
					return res, err
				})
				rc, ok := res.(*proto.B)
				if !ok {
					return nil, errors.New(fmt.Sprintf("Resolve Interceptor returns bad value type(%T). Should return *proto.B", res))
				}
				return rc, err
			},
		},

		"getMutatuionMethod": &graphql.Field{
			Name: "getMutatuionMethod",
			Type: ExmplMsgWithEmpty,
			Args: graphql.FieldConfigArgument{
				"empty_field": &graphql.ArgumentConfig{
					Type: scalars.NoDataScalar,
				},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				if ih == nil {
					req, err := ResolveMsgWithEmpty(p.Context, p.Args)
					if err != nil {
						return nil, err
					}
					return c.GetMutatuionMethod(p.Context, req)
				}
				ctx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "getMutatuionMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ctx, func(ctx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveMsgWithEmpty(p.Context, p.Args)
				})
				if err != nil {
					return nil, err
				}
				res, err := ih.Call(ctx, req, func(ctx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker, opts ...grpc.CallOption) (result interface{}, err error) {
					r, ok := req.(*proto.MsgWithEmpty)
					if !ok {
						return nil, errors.New(fmt.Sprintf("resolve args interceptor returns bad request type(%T). Should be: *proto.MsgWithEmpty", req))
					}
					res, err := c.GetMutatuionMethod(ctx.Params.Context, r, opts...)
					return res, err
				})
				rc, ok := res.(*proto.MsgWithEmpty)
				if !ok {
					return nil, errors.New(fmt.Sprintf("Resolve Interceptor returns bad value type(%T). Should return *proto.MsgWithEmpty", res))
				}
				return rc, err
			},
		},

		"getEmptiesMsg": &graphql.Field{
			Name: "getEmptiesMsg",
			Type: scalars.NoDataScalar,
			Args: graphql.FieldConfigArgument{},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				if ih == nil {
					return c.GetEmptiesMsg(p.Context, new(proto.Empty))
				}
				ctx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "getEmptiesMsg",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ctx, func(ctx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return new(proto.Empty), nil
				})
				if err != nil {
					return nil, err
				}
				res, err := ih.Call(ctx, req, func(ctx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker, opts ...grpc.CallOption) (result interface{}, err error) {
					r, ok := req.(*proto.Empty)
					if !ok {
						return nil, errors.New(fmt.Sprintf("resolve args interceptor returns bad request type(%T). Should be: *proto.Empty", req))
					}
					res, err := c.GetEmptiesMsg(ctx.Params.Context, r, opts...)
					return res, err
				})
				rc, ok := res.(*proto.Empty)
				if !ok {
					return nil, errors.New(fmt.Sprintf("Resolve Interceptor returns bad value type(%T). Should return *proto.Empty", res))
				}
				return rc, err
			},
		},
	}

}

func GetServiceExampleGraphQLMutationsFields(c proto.ServiceExampleClient, ih *interceptors.InterceptorHandler) graphql.Fields {

	return graphql.Fields{

		"mutationMethod": &graphql.Field{
			Name: "mutationMethod",
			Type: ExmplA,
			Args: graphql.FieldConfigArgument{
				"r_msg": &graphql.ArgumentConfig{
					Type: graphql.NewList(graphql.NewNonNull(timestamp.TimestampInput)),
				},
				"r_scalar": &graphql.ArgumentConfig{
					Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar)),
				},
				"r_enum": &graphql.ArgumentConfig{
					Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum)),
				},
				"n_r_enum": &graphql.ArgumentConfig{
					Type: ExmplSomeEnum,
				},
				"n_r_scalar": &graphql.ArgumentConfig{
					Type: scalars.GraphQLInt32Scalar,
				},
				"n_r_msg": &graphql.ArgumentConfig{
					Type: timestamp.TimestampInput,
				},
				"map_enum": &graphql.ArgumentConfig{
					Type: ExmplBMapEnumMapInput,
				},
				"map_scalar": &graphql.ArgumentConfig{
					Type: ExmplBMapScalarMapInput,
				},
				"map_msg": &graphql.ArgumentConfig{
					Type: ExmplBMapMsgMapInput,
				},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				if ih == nil {
					req, err := ResolveB(p.Context, p.Args)
					if err != nil {
						return nil, err
					}
					return c.MutationMethod(p.Context, req)
				}
				ctx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "mutationMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ctx, func(ctx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveB(p.Context, p.Args)
				})
				if err != nil {
					return nil, err
				}
				res, err := ih.Call(ctx, req, func(ctx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker, opts ...grpc.CallOption) (result interface{}, err error) {
					r, ok := req.(*proto.B)
					if !ok {
						return nil, errors.New(fmt.Sprintf("resolve args interceptor returns bad request type(%T). Should be: *proto.B", req))
					}
					res, err := c.MutationMethod(ctx.Params.Context, r, opts...)
					return res, err
				})
				rc, ok := res.(*proto.A)
				if !ok {
					return nil, errors.New(fmt.Sprintf("Resolve Interceptor returns bad value type(%T). Should return *proto.A", res))
				}
				return rc, err
			},
		},

		"queryMethod": &graphql.Field{
			Name: "queryMethod",
			Type: ExmplB,
			Args: graphql.FieldConfigArgument{
				"r_msg": &graphql.ArgumentConfig{
					Type: graphql.NewList(graphql.NewNonNull(timestamp.TimestampInput)),
				},
				"r_scalar": &graphql.ArgumentConfig{
					Type: graphql.NewList(graphql.NewNonNull(scalars.GraphQLInt32Scalar)),
				},
				"r_enum": &graphql.ArgumentConfig{
					Type: graphql.NewList(graphql.NewNonNull(ExmplSomeEnum)),
				},
				"n_r_enum": &graphql.ArgumentConfig{
					Type: ExmplAsomeEnum3,
				},
				"n_r_scalar": &graphql.ArgumentConfig{
					Type: scalars.GraphQLInt32Scalar,
				},
				"n_r_msg": &graphql.ArgumentConfig{
					Type: timestamp.TimestampInput,
				},
				"scalar_from_context": &graphql.ArgumentConfig{
					Type: scalars.GraphQLInt32Scalar,
				},
				"enum_from_context": &graphql.ArgumentConfig{
					Type: ExmplSomeEnum,
				},
				"message_from_context": &graphql.ArgumentConfig{
					Type: timestamp.TimestampInput,
				},
				"message_with_oneoffs": &graphql.ArgumentConfig{
					Description: "repeated bytes r_bytes = 13; // TODO\n    bytes n_r_bytes = 14; // TODO", Type: ExmplAOneOffsInput,
				},
				"map_enum": &graphql.ArgumentConfig{
					Type: ExmplAMapEnumMapInput,
				},
				"map_scalar": &graphql.ArgumentConfig{
					Type: ExmplAMapScalarMapInput,
				},
				"map_msg": &graphql.ArgumentConfig{
					Type: ExmplAMapMsgMapInput,
				},
			},
			Resolve: func(p graphql.ResolveParams) (_ interface{}, rerr error) {
				if ih == nil {
					req, err := ResolveA(p.Context, p.Args)
					if err != nil {
						return nil, err
					}
					return c.QueryMethod(p.Context, req)
				}
				ctx := &interceptors.Context{
					Service: "ServiceExample",
					Method:  "queryMethod",
					Params:  p,
				}
				req, err := ih.ResolveArgs(ctx, func(ctx *interceptors.Context, next interceptors.ResolveArgsInvoker) (result interface{}, err error) {
					return ResolveA(p.Context, p.Args)
				})
				if err != nil {
					return nil, err
				}
				res, err := ih.Call(ctx, req, func(ctx *interceptors.Context, req interface{}, next interceptors.CallMethodInvoker, opts ...grpc.CallOption) (result interface{}, err error) {
					r, ok := req.(*proto.A)
					if !ok {
						return nil, errors.New(fmt.Sprintf("resolve args interceptor returns bad request type(%T). Should be: *proto.A", req))
					}
					res, err := c.QueryMethod(ctx.Params.Context, r, opts...)
					return res, err
				})
				rc, ok := res.(*proto.B)
				if !ok {
					return nil, errors.New(fmt.Sprintf("Resolve Interceptor returns bad value type(%T). Should return *proto.B", res))
				}
				return rc, err
			},
		},
	}

}
