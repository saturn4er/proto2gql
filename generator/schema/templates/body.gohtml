type {{$.schemaName}}SchemaClients struct {
	{{ range $service := $.services -}}
		{{$service.Name}}Client {{goType $service.ClientGoType}}
	{{ end -}}
}
func Get{{$.schemaName}}Schema(cls {{$.schemaName}}SchemaClients, ih *{{interceptorsPkg}}.InterceptorHandler, tr {{tracerPkg}}.Tracer) ({{gqlPkg}}.Schema, error) {
	{{ range $service := $.services -}}
		var {{$service.Name}}Fields = {{serviceConstructor $service}}(cls.{{$service.Name}}Client, ih{{- if $service.TracerEnabled -}}, tr{{- end -}})
		var _ = {{$service.Name}}Fields
	{{ end -}}
	{{ range $object := $.objects -}}
		var {{$object.Name}} = {{gqlPkg}}.NewObject({{gqlPkg}}.ObjectConfig{
			Name: "{{$object.Name}}",
			{{ if ne $object.QuotedComment "" -}}
				Comment: {{$object.QuotedComment}},
			{{ end -}}
			Fields: {{gqlPkg}}.Fields{
				{{ if len $object.Fields -}}
					{{ range $fld := $object.Fields -}}
						{{ if $fld.Service -}}
                            "{{$fld.Name}}": {{$fld.Service.Name}}Fields["{{$fld.Name}}"],
						{{ else -}}
							"{{$fld.Name}}": &{{gqlPkg}}.Field{
								Name: "{{$fld.Name}}",
								Type: {{$fld.Object.Name}},
								Resolve: func(p {{gqlPkg}}.ResolveParams) (interface{}, error) {
									return struct{}{}, nil
								},
							},
						{{ end -}}
					{{ end -}}
				{{ else -}}
					"noFields": &{{gqlPkg}}.Field{
						Name: "noFields",
						Type: {{gqlPkg}}.String,
					},
				{{ end -}}
			},
		})
	{{ end -}}
	return {{gqlPkg}}.NewSchema({{gqlPkg}}.SchemaConfig{
		Query: {{$.queryObject}},
		{{ if $.mutationObject -}}
			Mutation: {{$.mutationObject}},
		{{ end -}}
	})
}