// Code generated by go-bindata.
// sources:
// templates/body.gohtml
// templates/head.gohtml
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\x4b\x6e\xdb\x30\x10\x5d\xd3\xa7\x18\x18\x41\x61\x17\x8a\x0e\x60\x20\x2b\xa3\x4d\xbb\x68\x3e\x4d\x76\x45\x51\x30\xf2\x58\x51\x4b\x91\x09\x49\xa5\x08\x06\xbc\x7b\xc1\x8f\x28\xca\x4e\x8c\x6a\x45\xcd\xf7\xbd\x37\x1c\xda\xd7\x27\x04\xa2\xb3\xda\x34\x8f\xd8\xf3\x2b\xde\xa3\x73\x77\xe1\xbc\x15\x1d\x4a\x6b\xc0\x58\x3d\x34\x16\x68\xc1\x88\x40\x73\xd9\x22\x9c\x19\xd4\x2f\x5d\x83\xb0\xb9\x80\xb3\x3a\xfd\x18\x38\x77\x6e\xc1\x18\xd1\xe8\xae\x63\xb9\x58\x08\x88\x5a\x75\xef\xdb\x65\x77\x74\x5c\x06\xab\x4f\x25\x02\x94\xbb\x50\xc6\x2d\xf6\x83\x6c\xe0\x12\xed\xdb\xe0\x56\x8d\x30\xa7\x71\x57\xd0\x3d\xc2\x47\xa2\x4e\x5a\xd4\x0d\x3e\x59\xa5\xcd\xcd\x9f\xd6\xb9\xfa\xeb\x64\xf9\xc2\xe5\x4e\xa0\xae\xc0\x6a\x20\xb2\x9a\x37\xa8\x63\xd0\x7d\x38\xaf\x61\x45\xd4\x3e\x8b\x68\x8b\xf5\x2b\x40\xad\x95\x5e\xff\xbf\x22\x2f\xdc\x57\x3f\x50\xe5\x73\x87\x62\x67\xe0\x02\x88\x92\x63\xab\x64\xd4\x5a\xe9\x5c\xcf\x39\xcf\xb4\x7e\x47\x53\xcf\x91\xe8\x1c\xba\xfd\x24\x6a\x04\xfe\x49\xf2\x07\x81\x41\x4b\x4f\xce\x07\x25\x69\xd7\x09\xd0\xaf\xd0\xfa\x4d\x50\xb3\x49\x14\x1c\xd5\xc3\x6f\x6c\x6c\xa4\x18\xcf\x07\x0c\xa3\x31\xd5\x0a\xf5\xb3\x76\x57\xf8\xf7\x3a\x78\x4b\x41\xa3\x65\xab\xe4\xbe\x6b\x69\xc1\x18\xf3\x99\x1b\x58\x1e\x96\x5a\x56\xde\x49\xe4\x89\xca\x0c\xa4\xbe\x1d\x94\xc5\xdd\x56\xf5\xbd\xbf\x5f\xcb\x65\x02\xc3\x58\x32\x6d\x0a\x4c\xb3\x58\xe7\xc6\x82\x99\x25\x63\x91\xfb\xa6\x04\x1d\x4d\x01\x59\xea\x2e\x50\xe6\xf6\x69\x82\x63\xd3\x42\xa8\xbd\xd8\x05\x95\xde\x09\x4c\xb5\x7c\x58\x7d\x97\xee\x8d\x77\xc2\x89\xcf\x6b\xe2\xe3\x93\x20\x81\x5a\x91\x3f\x9b\xdf\x8f\x83\xe0\x9f\xd5\xd4\x17\x85\xc1\x02\x09\x3b\xaa\xfb\xe1\x90\x3f\x8d\xa1\xc5\x74\x8a\x8c\x2a\xbb\xfd\x1a\x67\x5c\xd7\xe5\xfc\xa6\x98\xef\x68\x94\x78\xc1\x0d\xf8\xf5\x5e\x3d\x95\x62\x27\xd7\x0d\xd7\xbc\x37\x6b\x58\x85\xc5\xdd\xf3\x06\xc9\x95\x2b\x37\x7e\x1a\xed\xa0\x65\x7a\x9d\xc8\xf9\x20\xd9\x89\xec\x9f\x7a\xba\x92\xfd\x34\xee\xa3\xff\x23\x71\x96\x52\x45\x3d\x4f\xa9\x92\x34\xc9\xa1\x63\xb3\x51\x8c\xe9\xf1\xb0\xba\x93\x6d\x72\x27\x4c\x73\x04\xc1\xe8\xf7\xb3\x34\x27\x9a\xf3\x4d\x4a\x6f\xe0\xd1\xd3\x34\x6d\xd2\xed\x80\xfa\x35\x0c\xa3\x7e\xf6\xc7\x38\x8e\x38\x89\x74\xfb\xea\x7e\xb0\xdc\x76\x4a\x46\xdf\x88\xe2\x5b\xb2\xc6\xe4\x79\x4c\xce\xcf\xf0\xdc\x7a\xe1\xfe\x05\x00\x00\xff\xff\xb6\xcf\x3e\xae\x44\x06\x00\x00")

func templatesBodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyGohtml,
		"templates/body.gohtml",
	)
}

func templatesBodyGohtml() (*asset, error) {
	bytes, err := templatesBodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body.gohtml", size: 1604, mode: os.FileMode(420), modTime: time.Unix(1530099506, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\x3b\xf3\x1b\x00\x00\xff\xff\x76\x6d\x2f\x2d\xc0\x00\x00\x00")

func templatesHeadGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadGohtml,
		"templates/head.gohtml",
	)
}

func templatesHeadGohtml() (*asset, error) {
	bytes, err := templatesHeadGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head.gohtml", size: 192, mode: os.FileMode(420), modTime: time.Unix(1530027515, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/body.gohtml": templatesBodyGohtml,
	"templates/head.gohtml": templatesHeadGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"body.gohtml": &bintree{templatesBodyGohtml, map[string]*bintree{}},
		"head.gohtml": &bintree{templatesHeadGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

