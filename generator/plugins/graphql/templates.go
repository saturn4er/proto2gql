// Code generated by go-bindata.
// sources:
// templates/schemas_body.gohtml
// templates/schemas_head.gohtml
// templates/types_body.gohtml
// templates/types_head.gohtml
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesSchemas_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xcb\x6e\xdb\x3a\x10\x5d\xd3\x5f\x31\x30\x8c\x0b\xfb\x42\xd1\x07\x18\xc8\xca\x68\xd3\x2e\x9a\x47\x93\x5d\x51\x14\x8c\x3c\x56\xd4\xd2\xa4\x4b\x51\x2e\x82\x01\xff\xbd\xe0\x53\x94\x9d\x18\xd5\x8a\x9a\xe7\x39\x67\x38\x34\xaf\x07\x04\xa2\x45\xfd\xd8\xbc\xe0\x9e\xdf\xf2\x3d\x5a\x1b\xce\x1b\xd1\xa1\x34\x3d\xf4\x46\x0f\x8d\x01\x9a\x31\x22\xd0\x5c\xb6\x08\x8b\x1e\xf5\xb1\x6b\x10\xd6\xd7\xb0\xa8\x1f\xc3\x4f\x0f\x57\xd6\xce\x18\x23\x4a\xee\x3a\x94\x0b\x85\x80\xa8\x55\x4f\xae\x5d\x76\x07\xc7\x8d\xb7\xba\x54\x22\x40\xb9\xf5\x65\xec\x6c\x37\xc8\x06\x6e\xd0\xbc\x0d\x6e\xd9\x88\xfe\x32\xee\x0a\xba\x17\xf8\x9f\xa8\x93\x06\x75\x83\x07\xa3\x74\x7f\xff\xab\xb5\xb6\xfe\x3c\x5a\x3e\x71\xb9\x15\xa8\x2b\x30\x1a\x88\x8c\xe6\x0d\xea\x10\xf4\xe4\xcf\x2b\x58\x12\xb5\xbf\x45\xb0\x85\xfa\x15\xa0\xd6\x4a\xaf\xfe\x5d\x91\x23\x77\xd5\x4f\x54\xf9\xd8\xa1\xd8\xf6\x70\x0d\x44\xd1\xb1\x51\x32\x68\xad\xf4\x58\x6f\x61\xad\xe3\x5a\xbf\xa3\xaa\x63\x49\x74\x05\xdd\x0e\x16\x11\xf3\x07\xc9\x9f\x05\x7a\x19\x1d\x2f\xe7\x8d\xaa\xae\x22\x96\x1f\xbe\xeb\x9b\x78\x26\x43\x28\xe8\xa9\xe7\x9f\xd8\x98\xc0\xee\xce\x9f\x4f\xc8\x85\x80\x58\xcb\xd7\xcf\xb2\xdd\xe2\x9f\x90\x52\x6a\x19\x2c\x1b\x25\x77\x5d\x4b\x33\xc6\x98\xcb\x5c\xc3\xfc\xb4\xd4\xbc\x72\x4e\x22\xc7\x50\x66\x20\xf5\xc3\xa0\x0c\x6e\x37\x6a\xbf\x77\x57\x6b\x3e\x8f\x60\x18\x8b\xa6\x75\x81\x69\x12\x6b\x6d\x2a\x98\x59\x32\x16\xb8\xaf\x4b\xd0\xc1\xe4\x91\xc5\xee\x02\x65\x6e\x1f\x87\x97\x9a\x16\x42\xed\xc4\xd6\xab\xf4\x4e\x60\xac\xe5\xc2\xd2\x2d\xf1\x4e\xb8\xf0\x39\x4d\x5c\x7c\x14\xc4\x53\x2b\xf2\x27\xf3\xfb\x76\x12\xfc\xbd\x1a\xfb\xa2\xe8\xb1\x40\xc2\xce\xea\xfe\x77\xca\x9f\x52\x68\x31\x9d\x22\xa3\xca\x6e\xb7\xc1\x19\xd7\x5d\x39\xbf\x31\xe6\x2b\xf6\x4a\x1c\x71\x0d\x6e\xb3\x97\x87\x52\xec\xe8\xba\xe7\x9a\xef\xfb\x15\x2c\xfd\xce\xee\x78\x83\x64\xcb\x6d\x4b\x9f\x46\x33\x68\x19\x1f\x26\xb2\x2e\x48\x76\x22\xfb\xc7\x9e\xb6\x64\x3f\x8e\xfb\xec\xff\x4c\x9c\xb9\x54\x41\xcf\x4b\xaa\x44\x4d\x72\x68\x6a\x96\xc4\x18\xdf\x0d\xa3\x3b\xd9\x46\x77\xc4\x34\x45\xe0\x8d\x6e\x3f\x4b\x73\xa4\x39\xdd\xa4\xf8\xfc\x9d\xbd\x4a\xe3\x26\x3d\x0c\xa8\x5f\xfd\x30\x6a\x7f\x0c\xe3\x08\x93\x88\xb7\xaf\xfe\x32\x18\x6e\x3a\x25\x83\x2f\xa1\x48\xd6\x90\x3c\x8d\xc9\xf9\x19\x9e\x5d\xcd\xec\xdf\x00\x00\x00\xff\xff\x5a\xb6\x42\x9c\x3f\x06\x00\x00")

func templatesSchemas_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemas_bodyGohtml,
		"templates/schemas_body.gohtml",
	)
}

func templatesSchemas_bodyGohtml() (*asset, error) {
	bytes, err := templatesSchemas_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas_body.gohtml", size: 1599, mode: os.FileMode(420), modTime: time.Unix(1531402025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSchemas_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\x3b\xf3\x1b\x00\x00\xff\xff\x76\x6d\x2f\x2d\xc0\x00\x00\x00")

func templatesSchemas_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesSchemas_headGohtml,
		"templates/schemas_head.gohtml",
	)
}

func templatesSchemas_headGohtml() (*asset, error) {
	bytes, err := templatesSchemas_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/schemas_head.gohtml", size: 192, mode: os.FileMode(420), modTime: time.Unix(1531402025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_bodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x73\xdb\x36\xf2\x7f\xa6\xfe\x8a\x2d\xbf\x69\x86\xec\xb0\xf4\xf7\x59\x1d\x3d\x78\x7c\x71\x2e\xd3\x73\x92\x8b\x3d\xed\x83\xeb\x71\x11\x0a\x92\x70\xa2\x40\x1a\xa4\x64\x7b\x38\xfc\xdf\x6f\xf0\x8b\x04\x48\x50\xa2\x7c\x4a\x2f\x37\x63\x3d\xb4\x31\xb8\x58\x2c\x16\x9f\x5d\xec\x0f\x9c\x9d\xc1\x3b\xba\xdd\x14\x93\xaa\x62\x88\x2e\x31\xbc\xc1\x74\xbb\x81\xe9\x0c\xe2\x4b\x92\xe2\x58\x7c\x84\x9f\xeb\x7a\xe2\xed\x10\x83\xaa\x12\xdf\xe3\xdf\x10\x23\xe8\x6b\x8a\x3f\xa2\x0d\xae\x6b\x98\x41\x55\x2d\x1f\xd2\xcf\xeb\x65\x5d\xc7\x1f\xf1\x23\x9f\x15\x18\x43\xfc\xef\x8b\x8c\x2e\xc8\xb2\x9a\x78\x1e\x9f\x34\x05\xf5\xf3\x35\xcb\xf7\x0c\xe5\xab\x7f\xfe\x43\x72\xf4\xa3\x89\xe7\x55\x15\x90\x85\x14\x28\xbe\xc8\x36\x1b\x4c\x4b\x29\x89\xe7\xfd\x0d\x17\x09\x23\x79\x49\x32\x3a\x6d\x84\x52\x34\x75\xad\x26\x63\x3a\x57\xf4\xbf\xa1\x74\x8b\x8b\x29\x74\x44\x12\xc3\x52\xae\x2b\x94\x57\x13\x30\x7e\x8d\x3e\x76\x9c\x88\x2b\x44\xef\x9c\xb3\xd2\x72\x78\x5c\x7c\x41\x11\x2b\xc1\xa7\xf0\x76\x78\x95\x4a\xcc\x91\xe2\x08\xb9\xe5\x54\xf1\xb7\x14\xdb\xd3\xdb\xa6\x7a\xe9\x66\xeb\x7f\xfa\xfe\x9f\xcd\xba\x7d\x15\x58\xc4\x26\xb3\x56\x0d\x9e\x27\x87\xab\xaa\x1d\xe3\x23\x75\x38\x69\x87\x26\x93\xb3\x33\xf8\x40\xf3\x6d\x09\xd9\xd7\x7f\xe1\xa4\x9c\x54\x15\x28\x5d\xc8\x81\x16\x1d\x82\xec\x93\x18\xb4\x41\x22\x09\x0f\xc1\xc4\x98\x6e\xa2\xc5\x18\xd6\x6a\xd3\xa7\x22\xa1\xe3\xb7\x2b\x74\x51\xa3\x09\x2f\x09\x4e\xe7\xf6\x89\xf7\xd8\x0a\x9a\x2b\x94\xdf\xac\xb6\x74\x1d\x2c\xb6\x34\x09\xc2\x51\x13\xc0\x86\x0a\xc3\xe5\x96\xd1\x51\x33\xed\x89\x16\xce\x16\x9c\x44\xe0\x4c\x6d\x4d\x6e\x41\xa8\xb5\x3b\x49\x1b\x8e\x98\xe3\x46\x9e\x21\x82\x60\xa4\x34\x79\xf3\x9c\x0b\xe4\x25\x28\x4d\xd5\x9a\x31\x1f\x83\x37\x35\xc7\x4c\x5f\x3a\x0d\x0b\x73\xb4\xfd\xab\x0e\xe5\x1c\x81\xa0\x06\x69\x5d\x04\x15\xc0\x70\x91\xa5\x3b\xcc\x0a\x03\x4c\x7a\xcc\x09\xa7\x2f\x7a\x82\x60\xc8\xcf\x86\xc3\x4a\x4f\x89\x2f\xb7\x34\xe1\xc8\x97\x5b\x0f\x94\xa7\x88\x6f\x18\x4a\x30\x7b\x47\x39\xe6\xe6\x50\xd7\x50\x72\x34\x96\x62\x54\xaa\x45\x52\x44\x72\x63\x75\x9d\x94\x4f\x5c\x19\xe5\x93\xfc\x7a\x91\xd1\x12\x3f\x95\x11\x10\x20\xb4\xc4\x6c\x81\x12\x5c\xd5\x21\x04\xf7\xfc\x74\x33\xa9\xa8\x46\x88\x4f\xdb\x32\xdf\x96\xef\xc5\x70\x5d\x47\xc0\x30\x63\x80\x19\xcb\x58\x58\x4d\x3c\xb7\x4c\xd2\xe8\x8a\x1c\x51\xbe\xed\x92\xc5\x17\x0c\xa3\x12\x5f\xac\x48\x3a\xbf\xce\x11\xbd\x64\xd9\x46\x49\x11\x24\xe5\x53\x24\x8e\x79\x60\xdb\x7e\x38\xf1\xbc\x39\x5e\x60\x06\x9c\x61\x7c\x49\x28\x29\x56\x41\x3b\x2a\x21\x2d\x9c\x0e\x59\x40\xce\xc5\x9b\xce\x80\xe1\x24\xdb\x61\x16\x84\xbf\xc8\xa1\x1f\x66\x40\x49\x0a\xd2\x37\x09\x46\xd7\xb8\xbc\x41\xcb\xc0\x17\x7b\xf1\x23\xf0\x4b\xb6\xc5\x7e\x68\x8f\xdf\x6f\x70\x51\xa0\x25\xf6\x23\xc1\xa6\xfb\xb5\x28\x51\xb2\xf6\x23\x28\x4a\x46\xe8\x32\xa8\xaa\x39\xfe\xba\x5d\x4a\x35\x5f\xf3\x6f\x41\x18\x72\x49\xbd\x5a\x89\xc7\x4e\x23\x0b\x67\x13\xbf\xe3\x83\x41\xcb\xbf\xe6\x4a\x31\xbc\x1e\x59\x00\x81\x59\xbb\x96\xb2\x60\x4a\xd2\x88\xff\x67\xc2\x27\x21\xb6\x2c\xb8\xba\x48\x1c\x6c\x50\x7e\x2b\xf7\x71\x67\xc2\x62\xe2\xdd\xc3\x0c\x38\x9d\xf4\x7b\x0c\x17\xdb\xb4\x84\x19\x50\xfc\x18\x68\xbc\x5c\x66\xec\x23\x7e\x1c\x44\x8d\x90\x0b\x7a\x2e\xa0\x3d\xf1\xd6\x09\x08\x2d\xf1\xd5\x6e\x5b\xd3\x57\xee\x4f\x18\x8e\x20\x55\xc8\xb8\xb3\x34\x29\xa1\x48\x8a\x73\xc6\xd0\xb3\xb6\x7a\x29\x41\x73\x33\x10\x01\xc8\xb1\xec\xe3\xe0\xb6\xa3\x0a\x8f\x6b\x91\xef\x3f\x6e\x66\xcb\x9d\x1a\xf3\x60\x06\x1b\xb4\xc6\x41\x6b\x4b\xa6\x28\xdc\x84\x52\x4c\x03\x42\xe5\xc1\x79\x8b\x8c\x01\x89\x60\x87\x52\x01\x5b\xa1\x23\x42\x15\x38\xb4\x7d\x49\x0e\xda\x5d\xfc\x4e\xca\x95\x38\x7c\x68\xee\xc9\x5d\x04\x0a\xf8\xb6\xd7\x13\x97\xae\x9e\x07\xfe\x0e\xa5\x3e\x77\x82\x6a\x16\x59\x40\x0f\x8f\x9e\x0d\x94\xaa\x12\xd8\x2b\x24\xa6\x7f\x67\x28\x0f\x30\x63\x11\xf8\x0b\x44\xb8\xa9\x97\x99\x76\x7b\x40\x0c\x67\x08\x62\x79\x3f\x54\x2c\xf5\x82\x07\x95\x77\x4b\xee\x60\x06\xbb\xf6\x5a\x4f\x0b\x6c\x84\x03\x23\xe7\x1f\xa1\x83\x6e\xe8\x30\x71\xac\x7b\xe0\x10\x1a\xf1\xc6\x1d\x42\x90\x64\x34\x41\x25\xf8\x02\x86\x7f\xf8\x3e\xec\xc3\x21\xf8\x7f\xf8\x77\x7e\xd8\x0a\xec\x3e\xb3\x93\x1f\x99\x5a\x6d\x0c\xda\x77\x13\xe7\x61\x8d\x99\xfa\xed\xf4\x64\x9f\xab\xf5\x57\x3d\xb1\xfe\x6e\x62\x93\x8c\xe2\x6c\x61\x3b\xa6\x4f\x14\x7f\x5a\x58\xde\xa9\xa1\x26\x74\x8e\x9f\x22\x2b\xa2\xe1\xf3\x6d\x5f\xe6\x55\x15\x3f\xaf\x07\x45\x0e\xff\xaf\xc7\xc9\x02\x0e\xf9\x9f\xfb\x08\xb2\xf5\x31\xee\xea\x17\x4e\xff\xf6\xed\x61\xc6\x2d\x78\xfa\x91\xd0\x41\xa4\xbb\xa2\xb4\xe3\x80\xbf\xff\x18\xef\xd5\x21\xba\xd6\xe9\x62\xdf\x45\x63\xc4\xaa\xc7\x5a\x43\xc6\x4f\xdb\xb2\x86\x83\xba\xf4\x43\xa7\x10\x7d\xf1\x4d\xf3\x70\xaa\xf0\xdb\x6a\xcf\x1d\xe2\xf6\x8e\xfc\xbc\x28\xc8\x92\x12\xba\xe4\x7a\xca\xf1\xf0\x89\xb7\xc6\x2d\x51\x7f\xd8\xb8\x7b\xac\xfd\x9d\x3f\x20\xea\x7e\x4d\x8d\x59\x7a\xe7\xe4\xda\xfa\x83\xba\xaa\xf4\x1a\x72\xb1\x57\x7b\x7c\xb5\x47\x5b\x85\xaf\xf6\x38\x52\x53\xa7\xb2\x47\x9d\x56\xab\xca\x8d\xbc\x9a\xe5\x3f\x26\x3a\xbe\x91\x6b\xc9\xf4\xa5\x36\x93\xf1\xb3\x33\x90\xeb\xea\x64\xdc\x59\xcf\x79\x23\x33\x70\x49\xf9\xf2\x8a\x4e\xbf\x98\x63\xd7\x71\x74\xf1\x6f\x4f\x05\xc7\xf3\x1c\xb5\x1b\x39\x54\xa9\x62\x95\x27\xea\x01\x84\x92\x52\x66\xb7\xae\x0c\xaa\x5f\x44\x11\x31\x87\x7b\x1f\xf1\xf9\x7c\x6e\x54\x49\x82\x5e\x6d\x25\xb2\x6a\x2b\x82\x54\xc6\x97\xed\x76\x6c\x7a\xf1\x71\x5f\xb1\x45\x52\x28\x9b\x99\xca\x54\x3d\x37\xb7\xac\x3e\x7d\x46\x0c\x6d\x8a\x10\x02\x23\xdd\x8a\x54\x95\xc1\xf0\x2b\x9e\xf8\x4f\xf1\x48\xca\x64\x05\x05\x4b\xb8\x0e\xf2\xf8\x3a\xdb\xb2\x04\xc7\x41\xf9\x9c\xe3\x50\x07\xc4\x09\x2a\x30\xfc\xd4\xe6\x60\xfa\x1c\x54\x12\x36\xd5\xb9\x0e\x59\x08\x46\xb3\x4e\x0a\xd4\x4f\x96\xed\x44\xc6\x13\x59\xf3\x4f\x05\x4b\xf4\x80\x88\xf4\xb4\x7e\x30\x9e\x5f\xa0\xa2\x34\x32\x97\x86\x63\xa3\x44\x4e\x70\x93\x89\xba\x4e\xcf\xcb\x80\x5f\x08\x63\x0c\xad\xc5\xdb\x4b\xab\xcf\x74\x90\x45\x87\x83\x95\xed\x28\x35\x1d\xd6\xd2\xa9\x37\xc7\x92\x13\x6c\x4f\x31\xe9\xf2\x30\xf7\xd7\xa4\x22\x43\xf7\xcf\x47\xfc\x18\xf8\x85\x00\x10\x64\x0b\xd8\xd2\x35\xcd\x1e\x29\x70\x28\xa9\x4c\x48\x62\x58\x24\xff\x96\xf6\xf6\x98\xe3\x15\xca\x5f\x2d\xf2\xaf\xb3\x48\xd7\xa5\xa4\x7f\x3d\x33\x55\x25\x2c\xb8\xbd\x73\xd7\xbb\x34\xdd\x22\x63\xb0\xc6\xcf\xa2\x30\x23\x3b\x23\xf2\xb4\xf7\x58\x9a\x25\x6b\x01\x33\xe0\xf7\x2a\x9d\x07\x0c\x17\x11\xb8\x57\x6b\x67\x78\xfe\x1a\x3f\xfb\x53\x00\xb1\xaa\x31\x2c\xd6\xf7\xa7\x52\x8e\xf6\x43\x1d\xf6\x5c\x52\x7b\x47\x9a\x0a\x1a\x69\xe1\xdf\x46\x2f\xca\x44\xbf\x4b\xcd\x7c\x3b\xdf\xd0\x8d\x4c\xae\x50\x5e\x58\xa5\x16\x77\x74\x22\x83\x93\x2b\x94\xbf\x36\x9c\xe0\xd8\x86\x93\x81\x93\xa3\xfb\x43\x6a\xcf\xbf\xe2\x67\x49\xd9\xe9\x14\x79\x5a\xa0\x06\x70\x2f\x5d\x41\x58\x85\x73\x0d\xfd\x3b\xd4\x73\x72\x82\x69\x64\xdf\xc9\x06\x96\xdd\x7a\xf2\xbe\x83\xde\x13\xf7\x03\x8e\xfe\xd3\xaf\xf8\x59\x3b\xab\x3b\xc7\x67\xa1\xd3\xa1\xee\xd4\xde\xf6\xd4\x29\xfb\x53\x03\x0d\xaa\x7e\x87\x6a\x74\x8b\xea\xbf\xd0\xa3\x52\x1e\xd1\xd9\xa5\x3a\x51\x9b\x4a\x2e\x21\x1a\x55\x56\xa8\xd6\x6d\x55\x39\x2e\x7b\x41\x46\x55\xaf\xaa\xd7\x97\x51\x5d\xa9\xa9\xea\xbd\x9c\x00\x4b\x9c\xab\xea\xcd\x10\x67\x73\xe6\x1e\x66\x40\x26\xe2\xea\x14\x5f\x39\xd5\x9e\x2e\x9a\xe7\xad\x23\x59\x55\xd8\xa1\xf4\x56\xf8\xaa\xbb\x48\xfe\x5b\xfa\x95\x3b\xc1\x34\x02\xce\x77\x1d\xed\x9a\xea\xb1\x25\xfe\x70\xf7\x61\xbd\xee\x15\x7d\x5c\x13\xc1\x5f\xb7\xdd\x0f\x67\x2f\x61\x7f\xb1\x66\x31\x58\xad\xf9\xbf\x1f\xe7\xdc\x86\x01\xa7\x58\xbc\xe4\xe0\x3b\x8c\x80\x84\x66\x5f\xc5\x0a\xf0\xd7\xeb\x63\x84\xb5\x22\xfb\x8e\x62\xac\xca\x4c\x5f\x35\xbb\x7e\x3d\xcc\x3d\xb5\xa9\x81\x7c\x73\xe5\xc8\x23\xdf\xab\x9e\xdd\xee\x38\x81\x2d\x05\x49\x7b\xb8\x5d\xaf\xef\x66\xbb\x9d\xb2\x1e\x47\x0d\xc5\x0e\x55\x9a\xeb\x25\x3b\x5c\x4a\x69\xee\x94\xef\xa0\x98\xa2\x73\x91\xe1\x92\x4a\xfb\x04\xa8\x5f\x55\x19\x99\x9a\x49\x38\xbb\xd3\x31\x25\xa1\x20\x99\xf4\x12\xb0\xa1\xf8\x42\x90\xfe\xc7\x99\x98\x70\xce\xdd\xc4\x6b\x8f\x17\x72\xe7\x57\xae\xe4\xaa\x9e\x18\x5f\x0a\x96\x34\x4e\x4b\x11\x88\x0d\xa8\xe0\x77\xa4\x12\x35\xec\xf7\xaa\x51\x11\x0d\x2a\xd2\x11\x46\xfd\xef\xa9\x52\xf9\xfc\xbe\x32\x6b\xf3\x95\xda\xd9\x19\x5c\x63\xb6\x23\x09\x36\xad\xb0\x90\x43\xad\x19\x6a\x1a\x23\x96\x7b\x8f\xcb\xaa\xd2\x94\xaa\x3c\xa0\xc8\xae\x70\xb9\xca\xe6\x45\x90\x18\x69\xa1\x26\xbc\x40\x69\xfa\x41\x6f\x93\x07\x54\x64\xc5\x73\x76\xb1\xf3\x04\xe7\x65\xe3\xee\x3e\xb4\x23\x7f\x47\x74\x9e\x62\x06\x83\x31\x62\x34\x10\x24\xea\x18\x31\xec\x5b\x2c\x18\xd1\x9b\x96\x4d\xc9\xdd\xba\xb8\x6e\x7e\xd0\x1a\xbb\xd1\xa7\xdd\x88\x59\xa2\x3c\x33\xc0\x48\xbe\x6f\x94\x74\xee\x67\x66\x46\xe1\xc5\x74\x47\xf6\x14\x9d\x81\xda\x98\x55\x34\xca\x65\x49\x67\x69\xd7\x62\x9a\x7d\x2a\xd2\x73\xb6\xdc\xf2\x3b\xa2\x30\x2b\x61\xe7\x6c\xe9\x70\x6c\xd2\xac\xf4\x04\x2e\x60\xb7\xfe\x61\xd6\xa9\x10\x5b\x0a\x35\xec\x5b\x47\xea\x02\xb1\xa5\x5b\x11\x7a\x8e\x33\xcb\xe1\xb3\x8c\xbc\x46\x33\xec\xd5\x1c\x3d\x73\xe3\xf6\xa7\x23\x4c\xf8\x1e\x2c\x23\x36\x02\xff\x3d\x8d\x28\xfe\xe3\x19\x89\xb0\x70\x15\xe1\xef\x25\xe6\xc1\x58\x52\x3e\x19\xf5\xd3\xe1\x7c\xa2\x89\x93\x0f\x27\x15\x79\x9b\x08\xf9\x3d\x33\x8d\xbb\xd0\x02\x7d\xdd\x37\xef\x69\x06\x13\x0e\xe3\x9b\x99\x75\x78\xc3\x81\xfd\x29\xa3\x7b\xbb\xea\xa2\xe2\x7c\xa5\xb8\x0e\x06\x78\xc4\xbf\xea\x17\xf9\x6c\x53\xf8\x82\x1f\xb6\xb8\x68\x72\xd5\xc1\x16\x94\x85\x78\x86\x1f\x7a\xe1\xde\x00\x3f\x3f\xe7\x88\x96\xd5\xbb\xaa\xfa\x59\xbc\x48\xce\xca\x21\x72\x15\x58\x72\x29\xd4\xa5\x11\x50\x92\x86\xba\x49\x75\x48\x30\x38\xa2\x61\xda\xd9\x50\x7b\xa1\x60\xc6\x46\x4d\x1a\x27\x8e\xe2\x9c\xc4\x1d\x3d\x5d\xa4\x04\xd3\x52\xba\x49\x7e\x23\x70\x55\x31\xfc\x60\x3e\x1d\x73\xbd\xce\x12\x4e\xf9\x81\xeb\xdd\xf5\x36\xd0\x56\xaa\x4e\xb2\xc6\xee\xfe\xe5\x32\x76\x7c\x4f\x03\x40\xe5\x07\xde\xba\x6e\x37\x65\x9d\x2d\x2e\xd5\xd5\x39\x75\x98\xab\xdf\xba\x3a\x29\xcd\xbe\xcb\xc1\xf3\xa4\x03\x9b\x42\x1e\x39\xca\x94\x2d\x72\xc9\x4a\x7b\x3c\x8e\xd0\x80\x88\x32\x84\x30\x69\x21\xb8\xf3\x4e\x6e\x7c\x0a\xc5\x4f\x25\xb8\x28\x0c\x96\x1f\xe8\x2e\x5b\x63\x16\x42\xa0\x72\xe7\x6e\x4c\x64\xc7\x45\x27\x33\x4e\xab\xa1\xf3\x57\xd8\xe5\x01\xbc\x4a\xdb\x1a\x8b\x57\xab\xf5\xe0\x82\x57\x68\x38\x38\xa7\xb3\x7d\xe1\x5b\x08\xc4\xf5\x31\x58\xd9\x26\x2b\x11\xb9\x29\x98\x08\x1c\x8d\xc5\x0a\xb7\x58\xeb\xe8\x07\xc1\xc3\x57\x90\x08\x7f\x01\x76\x98\x7e\x3d\xc3\xf0\x43\x6c\xbc\x8d\x75\x7b\x05\xaf\x55\xe2\x0f\xd9\xda\xbc\xaa\xf6\x97\xeb\xab\x6a\xb1\x29\x55\x69\x2b\x67\x84\x96\x8b\xc0\xff\x62\x68\x10\x8c\x5d\x29\xef\x57\xc0\x57\x34\xe7\x52\xf1\xf5\x45\x71\x3f\xf8\xf1\x26\x8c\xe1\x7a\x95\x6d\xd3\x39\x7c\x15\x01\xce\x3e\x69\xc5\x4d\xf8\x60\xdc\x80\x26\xe4\x0c\x7b\xf9\x8c\x9e\xd3\x0c\xcd\xc5\x85\x79\xb1\xc2\xc9\x7a\xa4\xcd\x48\x47\x5d\x34\x9e\x61\x9c\x27\x74\xbf\xe5\x70\xfd\x5e\x72\x27\x41\xe7\x51\xcf\xe9\xae\x25\xf9\x32\xd2\xda\x9f\x4b\x71\x3e\xc3\x85\x2f\x1a\x4b\x63\xc5\xb5\x9d\x97\xc9\xf3\x3c\x49\x70\x51\xec\x79\x4e\x35\xf4\xe3\xd6\x65\x71\x82\x5e\xc4\xe1\x5c\x47\x09\x7f\x8c\xe8\x7b\x5f\xe0\x1c\x23\x1f\xc3\xc5\x51\xeb\xda\xee\xcd\x04\xb7\xd5\x55\x1b\x03\x00\xa3\xbe\x35\x66\xf5\xa3\x2e\xfe\xee\xb5\x3f\xe4\x96\x75\xea\xa1\xfe\xdf\x79\x85\x34\xe9\x16\xe1\x5a\x8c\xdb\x05\x6b\xab\x6c\xf6\xef\x00\x00\x00\xff\xff\xba\xe5\xd2\xd8\x5e\x38\x00\x00")

func templatesTypes_bodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_bodyGohtml,
		"templates/types_body.gohtml",
	)
}

func templatesTypes_bodyGohtml() (*asset, error) {
	bytes, err := templatesTypes_bodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_body.gohtml", size: 14430, mode: os.FileMode(420), modTime: time.Unix(1531405251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTypes_headGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\x3b\xf3\x1b\x00\x00\xff\xff\x76\x6d\x2f\x2d\xc0\x00\x00\x00")

func templatesTypes_headGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesTypes_headGohtml,
		"templates/types_head.gohtml",
	)
}

func templatesTypes_headGohtml() (*asset, error) {
	bytes, err := templatesTypes_headGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/types_head.gohtml", size: 192, mode: os.FileMode(420), modTime: time.Unix(1531402025, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/schemas_body.gohtml": templatesSchemas_bodyGohtml,
	"templates/schemas_head.gohtml": templatesSchemas_headGohtml,
	"templates/types_body.gohtml": templatesTypes_bodyGohtml,
	"templates/types_head.gohtml": templatesTypes_headGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"schemas_body.gohtml": &bintree{templatesSchemas_bodyGohtml, map[string]*bintree{}},
		"schemas_head.gohtml": &bintree{templatesSchemas_headGohtml, map[string]*bintree{}},
		"types_body.gohtml": &bintree{templatesTypes_bodyGohtml, map[string]*bintree{}},
		"types_head.gohtml": &bintree{templatesTypes_headGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

