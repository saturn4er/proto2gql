// Code generated by go-bindata.
// sources:
// templates/body.gohtml
// templates/head.gohtml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdf\x6f\xdc\x36\xf2\x7f\x96\xfe\x8a\xa9\xbe\x69\x20\x7d\xa1\x93\xef\x79\x8b\x7d\x08\x7c\x71\x2e\xe8\x25\xe9\xd5\x46\xfb\xe0\x1a\x06\xa3\xa5\x76\x79\xab\xa5\x64\x4a\x2b\xdb\x10\xf4\xbf\x1f\xf8\x4b\x22\x25\x4a\x5e\x27\x0e\xae\x05\xe2\x87\x74\x97\x1a\x92\xc3\x99\xcf\x0c\x67\x3e\xda\x9e\x9d\xc1\x5b\x7a\x3c\x54\x7e\xdb\x32\x44\xb7\x18\x5e\x61\x7a\x3c\xc0\x6a\x0d\xc9\x05\xc9\x71\x22\x1e\xc2\xdf\xba\xce\xf7\x1a\xc4\xa0\x6d\xc5\xf3\xe4\x37\xc4\x08\xfa\x9c\xe3\x8f\xe8\x80\xbb\x0e\xd6\xd0\xb6\xdb\xbb\xfc\x97\xfd\xb6\xeb\x92\x8f\xf8\x9e\xcf\x0a\x8d\x21\xfe\xfd\xbc\xa0\x19\xd9\xb6\xbe\xe7\xf1\x49\x2b\x50\x7f\x81\x5e\xf2\x1d\x43\xe5\xee\xdf\xff\x92\x2b\x06\xb1\xef\x79\x6d\x0b\x24\x93\x0a\x25\xe7\xc5\xe1\x80\x69\x2d\x35\xf1\xbc\x7f\xe0\x2a\x65\xa4\xac\x49\x41\x57\xbd\x52\x4a\xa6\xeb\xd4\x64\x4c\x37\x4a\xfe\x37\x94\x1f\x71\xb5\x82\x91\x4a\x62\x58\xea\xf5\x01\x95\xad\x0f\xc6\x5f\x6f\x8f\x86\x0b\x71\x83\xe8\x93\xf3\xa5\xb4\x1e\x1e\x57\x5f\x48\x24\x4a\xf1\x15\xbc\x9e\xdf\xa5\x15\x73\xa4\x3a\x42\x6f\x39\x55\x7c\x97\x6a\x7b\xfa\xd8\x54\x6f\xdd\x1f\x3d\xf8\x23\xf8\x23\x08\xfa\x9d\xa7\x46\xb0\xc4\xcd\xe5\x06\x43\x78\x9e\x1c\x6e\xdb\x61\x8c\x8f\x74\x91\x3f\x0c\xf9\xfe\xd9\x19\xbc\xa7\xe5\xb1\x86\xe2\xf3\x7f\x70\x5a\xfb\x6d\x0b\xca\x1a\x72\x60\xc0\x87\x10\xfb\x24\x06\x6d\x98\x48\xc1\xa7\x80\x62\x4c\x37\xf1\x62\x0c\x6b\xc3\x69\xbf\x48\xf0\x04\xc3\x0e\x63\xdc\x68\xc1\x0b\x82\xf3\x8d\xed\xf3\xc9\xb2\x42\xe6\x03\x2a\xaf\x76\x47\xba\x0f\xb3\x23\x4d\xc3\xe8\xa4\x09\x60\x83\x85\xe1\xfa\xc8\xe8\x49\x33\xed\x89\x16\xd2\x32\x2e\x22\x90\xa6\x8e\x26\x8f\x20\xcc\x3a\x9e\xa4\x43\x47\xcc\x71\x63\xcf\x50\x41\x2c\xa4\x2c\x79\xf5\x58\x0a\xec\xa5\x28\xcf\xd5\x9e\x09\x1f\x83\x57\x1d\xc7\xcc\x54\x3b\x0d\x0b\x73\x74\xf8\xd6\x45\x72\x8e\x40\x50\x8f\xb4\x31\x82\x2a\x60\xb8\x2a\xf2\x06\xb3\xca\x00\x93\x1e\x73\xc2\xe9\x57\x3d\x41\x2c\xc8\x7d\xc3\x61\xa5\xa7\x24\x17\x47\x9a\x72\xe4\xcb\xa3\x87\x2a\x57\x24\x57\x0c\xa5\x98\xbd\xa5\x1c\x73\x1b\xe8\x3a\xa8\x39\x1a\x6b\x31\x2a\xcd\x22\x25\x62\x79\xb0\xae\x4b\xeb\x07\x6e\x8c\xfa\x41\x3e\x3d\x2f\x68\x8d\x1f\xea\x18\x08\x10\x5a\x63\x96\xa1\x14\xb7\x5d\x04\xe1\x2d\xf7\x6e\x21\x0d\xd5\x2b\xf1\xe9\x58\x97\xc7\xfa\x9d\x18\xee\xba\x18\x18\x66\x0c\x30\x63\x05\x8b\x5a\xdf\x73\xeb\x24\x83\xae\x2a\x11\xe5\xc7\xae\x59\x72\xce\x30\xaa\xf1\xf9\x8e\xe4\x9b\xcb\x12\xd1\x0b\x56\x1c\x94\x16\x61\x5a\x3f\xc4\xc2\xcd\x33\xc7\x0e\x22\xdf\xf3\x36\x38\xc3\x0c\xf8\x82\xc9\x05\xa1\xa4\xda\x85\xc3\xa8\x84\xb4\x48\x3b\x24\x83\x92\xab\xb7\x5a\x03\xc3\x69\xd1\x60\x16\x46\x3f\xc9\xa1\x1f\xd6\x40\x49\x0e\x32\x3b\x89\x85\x2e\x71\x7d\x85\xb6\x61\x20\xce\x12\xc4\x10\xd4\xec\x88\x83\xc8\x1e\xbf\x3d\xe0\xaa\x42\x5b\x1c\xc4\x62\x99\xf1\xd3\xaa\x46\xe9\x3e\x88\xa1\xaa\x19\xa1\xdb\xb0\x6d\x37\xf8\xf3\x71\x2b\xcd\x7c\xc9\x9f\x85\x51\xc4\x35\xf5\x3a\xa5\x1e\x7b\x19\x5d\xf8\x32\xc9\x5b\x3e\x18\x0e\xeb\x77\xdc\x28\x46\xd6\x23\x19\x10\x58\x0f\x7b\xa9\x08\xa6\x24\x8f\xf9\x3f\x3e\x9f\x84\xd8\xb6\xe2\xe6\x22\x49\x78\x40\xe5\xb5\x3c\xc7\x8d\x09\x0b\xdf\xbb\x85\x35\x70\x39\x99\xf7\x18\xae\x8e\x79\x0d\x6b\xa0\xf8\x3e\xd4\x78\xb9\x28\xd8\x47\x7c\x3f\x8b\x1a\xa1\x17\x4c\x52\xc0\xe0\xf1\x21\x09\x08\x2b\xf1\xdd\xae\x87\xd0\x57\xe9\x4f\x04\x8e\x10\x55\xc8\xb8\xb1\x2c\x29\xa1\x48\xaa\x37\x8c\xa1\x47\x1d\xf5\x52\x83\xfe\x66\x20\x02\x90\xa7\x2e\x9f\x84\xd7\x23\x53\x78\xdc\x8a\xfc\xfc\x49\x3f\x5b\x9e\xd4\x98\x07\x6b\x38\xa0\x3d\x0e\x87\x58\x32\x55\xe1\x21\x94\x63\x1a\x12\x2a\x1d\xe7\x65\x05\x03\x12\x43\x83\x72\x01\x5b\x61\x23\x42\x15\x38\x74\x7c\xc9\x15\x74\xba\xf8\x9d\xd4\x3b\xe1\x7c\xe8\xef\xc9\x26\x06\x05\x7c\x3b\xeb\x89\x6b\x57\xcf\x83\xa0\x41\x79\xc0\x93\xa0\x9a\x45\x32\x98\xe0\xd1\xb3\x81\xd2\xb6\x02\x7b\x95\xc4\xf4\xef\x0c\x95\x21\x66\x2c\x86\x20\x43\x84\x87\x7a\x5d\xe8\xb4\x07\xc4\x48\x86\x20\xb6\x0f\x22\xb5\xa4\xde\xf0\x49\xe3\x5d\x93\x1b\x58\x43\x33\x5c\xeb\x79\x85\x8d\x72\xe0\xc4\xf9\xcf\xb0\xc1\xb8\x74\xf0\x1d\xfb\x9e\xe8\x84\xd3\x7c\x10\xa6\x05\x4d\x51\x0d\x81\x40\x21\xaf\x76\x96\x60\xc8\x2b\xa2\x9b\x20\x1a\xf4\x75\xbb\xec\xc5\x3d\xa6\x76\x3b\x05\xec\x8d\xef\xf4\xd5\x29\x53\xbf\x9d\x9d\x6c\xb7\x5a\xdf\x3a\xdf\xfa\xde\x97\x26\x05\xc5\x45\x66\xe7\xa5\x4f\x14\x7f\xca\xac\xe4\xd4\x4b\x13\xba\xc1\x0f\xb1\x55\xd0\xf0\xf9\x76\x2a\xf3\xda\x96\xfb\xeb\x4e\x89\xc3\xdf\xf5\x38\xc9\xe0\xa9\xf4\x73\x1b\x43\xb1\x7f\x4e\xb6\xfa\x89\xcb\xbf\x7e\xfd\xf4\xc2\x03\x78\xa6\x85\xd0\x22\xd0\xe7\x8a\xb4\xe7\x01\x7f\xd9\x8d\xb7\xca\x89\xae\x7d\xc6\xd8\x77\xc9\x18\xa5\xea\x73\xa3\xa1\xe0\xde\xb6\xa2\xe1\x49\x5b\x06\x91\x53\x89\xa9\xfa\x66\x78\x38\x4d\xf8\x6d\xad\xe7\xae\x70\x27\x2e\x7f\x53\x55\x64\x4b\x09\xdd\x72\x3b\x95\x78\xde\xe3\x43\x70\x4b\xd4\x3f\x1d\xdc\x93\xa5\x83\x26\x98\x51\x75\xd9\x52\xa7\x6c\xdd\x38\x57\x1d\xf2\x41\xd7\xb6\x7a\x0f\xb9\xd9\xf7\x78\xfc\x1e\x8f\xb6\x09\xbf\xc7\xe3\x89\x96\x7a\xa9\x78\xd4\x5d\xb5\x22\x6e\xe4\xd5\x2c\x3f\xf8\xba\xbe\x91\x7b\xc9\xee\xa5\x33\x7b\xf1\xb3\x33\x90\xfb\xea\x5e\xdc\x49\xe7\xbc\x92\x0d\xb8\x94\xfc\x72\x42\x67\xca\xe5\xd8\x34\x8e\x66\xff\x16\x08\x1c\xcf\x73\x50\x37\x72\xa8\x55\x5c\x95\x27\xe8\x00\x42\x49\x2d\x9b\x5b\x57\x03\x35\xe5\x50\x44\xcd\xe1\x3e\x47\xf2\x66\xb3\x31\x48\x92\x30\x98\x2f\xcd\x82\xd8\x62\x59\xc4\x13\x59\x6a\x0e\x27\xb3\x58\x19\xc9\xc3\x2d\xd1\x2e\x52\x42\x85\xcf\x4a\x36\xed\xa5\x79\x7a\xf5\xe8\x17\xc4\xd0\xa1\x8a\x20\x34\x1a\xaf\x58\xf1\x0d\x46\x8a\xf1\xc4\x3f\xd5\x3d\xa9\xd3\x1d\x54\x2c\xe5\xe6\x28\x93\xcb\xe2\xc8\x52\x9c\x84\xf5\x63\x89\x23\x5d\x1b\xa7\xa8\xc2\xf0\xff\xd3\x6e\x4c\x3a\x4d\xf6\x64\x2b\xdd\xfa\x90\x4c\xac\xb6\x1e\x75\x44\xd3\xde\xd9\xee\x6b\x64\xa1\xa7\x6d\x82\xf1\xe6\x1c\x55\xb5\xd1\xb7\xf4\x0b\xf4\x86\xe3\x02\x57\x45\xd7\x85\x15\x4b\x87\x22\x59\x6b\x25\x2c\xde\x75\x91\xb5\xd9\x70\x69\x8d\x57\x5d\x5a\x63\xb4\x84\xd5\xed\x28\xe3\x9c\x68\x9b\xbf\xcc\x19\xad\x23\xf6\xed\xc8\xdc\x1d\xf4\x11\xdf\x87\x41\x25\x90\x03\x45\x06\x47\xba\xa7\xc5\x3d\x05\x8e\x21\xd5\x0d\x49\xf0\x8a\xfe\xdf\x34\xe0\x38\x03\x7d\x40\x65\x65\xb5\x54\xee\x2c\x24\x93\xd0\x07\x54\x7e\xe7\x95\xe1\xb9\xbc\x32\xf7\x46\xb0\xc7\x8f\x5f\x42\x03\xab\x33\xff\x8c\x1f\x07\x74\x1b\x84\xb0\xa7\x15\x0a\xc4\x3b\x86\xaf\xd8\x41\x14\x0a\xce\x3d\xf4\xdf\x53\xd4\xb2\x13\x4c\x27\xd2\xcb\x36\xb0\x6c\x86\xd9\xfb\x13\x50\xcc\x07\x54\x5e\x3b\x68\xe6\x9f\xf1\xa3\x26\xc8\x6e\x1c\x8f\x85\x4d\xe7\x48\xe8\x45\x16\xfa\x25\x69\xe8\x19\x1e\x7a\x4a\x44\x9f\xcc\x44\xff\x0f\xa8\x68\x95\x11\x9d\x64\xf4\x0b\xb1\xd1\x72\x0b\xc1\x47\x5b\xe9\x78\xcc\x48\x3b\xae\x55\x21\x46\x15\x25\x3d\xa1\x5f\x15\xf9\xbc\x52\x14\xeb\x0b\x60\x89\xaf\xaa\x28\x58\xe2\xe4\x60\x6f\x61\x0d\x84\x7f\x50\x4f\xb9\xd4\x02\x59\xee\x79\xfb\x58\x76\x0f\x0d\xca\xaf\x45\xae\xba\x89\xe5\x67\x99\x57\x6e\xc4\xa2\x31\xf0\x75\xf7\x71\xd3\xb3\x44\x96\xfa\xee\x5e\x8f\x5b\x76\xbf\x9f\x34\x77\xae\x89\x10\xec\x07\x92\xd3\xc9\x19\x2e\x37\x65\xd9\x6c\x57\xf6\x7f\x3f\x6e\x78\x0c\x03\xce\xb1\x78\x65\xcb\x4f\x18\x03\x89\x4c\xfa\xd4\xba\xc3\xf7\xfb\xe7\x28\x6b\xdd\xde\x23\xc3\x58\x1d\xd8\xd4\x34\xcd\xb4\xef\x75\x4f\xed\x7b\x9d\x6f\x6e\x1c\xe9\xf2\x45\xf3\x34\xcd\xf3\x14\xb6\x0c\x24\xe3\xe1\x7a\xbf\xbf\x59\x37\x8d\x8a\x1e\x47\xaf\x64\x97\x2a\xfd\xf5\x52\x3c\xdd\x32\xf5\x77\xca\x9f\xa0\x69\xd2\xa5\xff\x7c\xeb\x34\xbc\xe9\x9f\x76\x4f\x27\x36\x45\x12\xce\xee\xee\x47\x69\x28\x44\xfc\x49\xbf\x33\x57\x5f\x08\xd1\xaf\x6e\x7c\x44\x72\x1e\xf7\x39\x0b\x59\xc8\xdd\xc9\xb8\xda\x98\xce\xb7\xab\xec\x3e\x69\x29\x01\x71\x00\x55\xfc\x9e\x68\x44\x0d\xfb\x45\x33\x2a\xa1\x59\x43\x3a\xca\xa8\xbf\x9e\x29\x55\xce\x9f\x1a\xb3\x33\x7f\x8c\x72\x76\x06\x97\x98\x35\x24\xc5\x66\x14\x56\x72\x68\x08\x43\x2d\x63\xd4\x72\xef\x70\xdd\xb6\x5a\x52\x75\xe3\x4a\xec\x03\xae\x77\xc5\xa6\x0a\x53\xa3\xbf\xd3\x82\xe7\x28\xcf\xdf\xeb\x63\xf2\x82\x8a\xec\x78\x8b\x2c\x4e\x9e\xe2\xb2\xee\xd3\xdd\xfb\x61\xe4\x9f\x88\x6e\x72\xcc\x60\xb6\x46\x8c\x67\x8a\x44\x5d\x23\x46\xd3\x88\x05\xa3\x7a\xd3\xba\x29\xbd\x87\x14\x37\xee\x0f\x86\x60\x37\xde\xc7\x1c\xc4\x2c\xc1\x8a\xcc\x2c\x24\x7f\xc8\x24\xe5\xdc\xbf\x26\x31\x78\x0e\x33\x1d\xd9\x53\xd4\x4f\x8e\x46\x98\x55\x32\x2a\x65\xc9\x64\x69\x53\x1f\xfd\x39\x95\xe8\x1b\xb6\x3d\xf2\x3b\xa2\x32\x9b\xdd\x37\x6c\xeb\x48\x6c\x32\xac\xf4\x04\xae\xe0\x98\x4e\x33\xe9\x21\xc4\xb6\xc2\x0c\x4b\xfb\x48\x5b\x20\xb6\x75\x1b\x42\xcf\x71\x76\x39\x7c\x96\xd1\xd7\x78\x73\xd4\x82\x67\x1e\xdc\x7e\xf4\x8c\x10\xbe\x05\x2b\x88\x8d\xc2\x7f\x60\x67\x16\xcb\xff\xbe\xac\x7d\xba\x07\x28\x87\xbe\x25\x98\x44\x55\x32\x46\x02\xe8\xdb\xb9\x7f\xcb\x3d\xdb\x1f\x18\xcf\xcc\x26\xc1\x9b\xaf\xc3\x5f\xb2\x18\x37\x69\x90\xbe\x2c\x77\x51\x25\xb2\x40\xdf\x4d\xd9\x2f\x1b\xb9\xbf\xe2\xbb\x23\xae\xfa\xd6\xd2\xec\x93\x6c\x8c\x3d\xed\x17\x1e\xde\x77\x46\xd5\x76\xc2\x16\x5d\x17\xd6\x2c\x16\x9e\x94\xce\xe2\x85\x20\xf7\xa4\xe9\x3e\x6e\xb9\x28\x86\x92\x23\xb9\x8a\x2c\x8d\x26\xfc\xd2\x97\xe9\x60\x6c\xe6\xdc\x85\x8e\x0e\x3a\xf3\x53\x8b\xd1\x45\x82\x19\x73\xb9\x4c\xcb\xa4\x06\x08\x79\x0a\x97\x19\xce\xd6\x86\xe1\xbb\xc8\x77\x9d\x17\xbe\x64\x35\xd7\x8f\x7c\x6c\xfb\xa8\x36\x2a\x5a\x4a\x04\xfa\x43\x5a\x3f\x70\x1b\xbf\x76\xdd\x34\x6a\xcb\xc1\x32\xea\x1a\x5b\x39\x62\x31\x18\xd2\x8e\x54\x7a\x29\x51\x7b\x9e\x4c\x26\x2b\x28\xe3\x89\x46\xa6\xeb\xc9\x4e\x67\x1f\xee\x4f\xc9\x08\x88\x70\xe5\x6a\x3b\x6f\x47\xc3\x4c\x0f\x35\xb8\x24\x8c\x05\xdf\xd3\xa6\xd8\x63\x16\x41\xa8\xba\xd8\x71\x75\x32\xc9\x6b\xdf\xe3\xee\xab\xe3\xce\xb9\xb1\x8e\xb8\x53\xb1\x6d\xd1\xcb\x2e\x7c\x47\xbe\x3b\xca\x61\x14\xdb\x60\xe0\xae\x32\x71\xc7\xc3\x4f\x02\x4e\xd8\xe4\x44\xd4\x31\x7c\x67\x83\x68\x16\x86\x43\x78\x7f\x01\x0a\x99\x7e\xf3\xcd\xf0\x5d\x62\xfc\xac\xcd\x69\xab\x7e\x16\xc9\xe0\x87\x62\x6f\x66\xba\x65\x0a\xbe\x6d\xb3\x43\xad\xe8\xaa\x92\x11\x5a\x67\x61\xa0\x30\x20\x5e\xb9\x83\x71\x2a\x65\xd7\x0a\x3e\xa3\x0d\xd7\x8a\xef\x2f\x08\xfb\xf0\xc7\xab\x28\x81\xcb\x5d\x71\xcc\x37\xf0\x59\x14\x2d\x4b\xda\x06\x32\x5d\x0e\x4a\x9b\x6f\x1d\x06\x07\xcd\x26\xca\xb4\x7e\x48\x64\x72\x31\x9c\x12\x8d\xdf\x5c\xe8\xa5\xbe\x06\x2e\xa9\xf2\x01\xc3\x95\xd3\x05\x55\x59\xd0\x0a\x8f\x7c\x30\x71\xc1\xf3\x3d\xc0\x8f\x0b\xef\x67\x2c\x2f\xff\xb7\x81\x89\xdd\x87\x8a\x7d\x49\x4b\x61\xfb\x6a\xb0\xbd\x11\x1a\xd2\x6a\xa9\x69\x34\x5d\x4b\xaa\xff\x8e\x5e\x1f\xfb\x63\x56\x65\x38\xa8\xcd\x40\x5a\x3c\xc8\x7f\x03\x00\x00\xff\xff\xa0\xc9\x7c\x41\x18\x32\x00\x00")

func templatesBodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyGohtml,
		"templates/body.gohtml",
	)
}

func templatesBodyGohtml() (*asset, error) {
	bytes, err := templatesBodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body.gohtml", size: 12824, mode: os.FileMode(420), modTime: time.Unix(1529679104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\xbb\xdf\x00\x00\x00\xff\xff\xd3\x8b\xe8\x22\xbf\x00\x00\x00")

func templatesHeadGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadGohtml,
		"templates/head.gohtml",
	)
}

func templatesHeadGohtml() (*asset, error) {
	bytes, err := templatesHeadGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head.gohtml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1529672981, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/body.gohtml": templatesBodyGohtml,
	"templates/head.gohtml": templatesHeadGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"body.gohtml": &bintree{templatesBodyGohtml, map[string]*bintree{}},
		"head.gohtml": &bintree{templatesHeadGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

