// Code generated by go-bindata.
// sources:
// templates/body.gohtml
// templates/head.gohtml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\xe3\xb6\x11\x7f\xa6\x3e\xc5\x86\x4d\x6e\xc8\x0e\x43\xf7\x59\x19\x3d\x78\xdc\xf3\xf5\x26\xf5\xdd\xf5\xec\x49\x1e\x1c\x8f\x07\x47\x41\x12\x2a\x0a\xa4\x41\x4a\xb6\x87\xc3\xef\xde\xc1\x3f\x12\x20\x41\x8a\xba\xfa\xd2\x64\x6a\x3d\x24\x67\x70\xb1\x58\x2c\x7e\xbb\xd8\x3f\x38\x3b\x83\xb7\x74\xbf\x2b\x66\x55\xc5\x10\x5d\x63\xf8\x1e\xd3\xfd\x0e\xe6\x0b\x88\x2f\x49\x8a\x63\xf1\x11\x7e\xac\xeb\x99\x77\x40\x0c\xaa\x4a\x7c\x8f\x7f\x41\x8c\xa0\x2f\x29\xfe\x80\x76\xb8\xae\x61\x01\x55\xb5\x7e\x48\x3f\x6d\xd7\x75\x1d\x7f\xc0\x8f\x7c\x56\x60\x0c\xf1\xbf\x2f\x32\xba\x22\xeb\x6a\xe6\x79\x7c\xd2\x1c\xd4\xcf\xd7\x2c\xdf\x31\x94\x6f\xfe\xf5\x4f\xc9\xd1\x8f\x66\x9e\x57\x55\x40\x56\x52\xa0\xf8\x22\xdb\xed\x30\x2d\xa5\x24\x9e\xf7\x77\x5c\x24\x8c\xe4\x25\xc9\xe8\xbc\x11\x4a\xd1\xd4\xb5\x9a\x8c\xe9\x52\xd1\xff\x82\xd2\x3d\x2e\xe6\xd0\x11\x49\x0c\x4b\xb9\xae\x50\x5e\xcd\xc0\xf8\x35\xfa\x38\x70\x22\xae\x10\xbd\x73\xce\x4a\xcb\xe1\x71\xf1\x05\x45\xac\x04\x9f\xc3\x9b\xe1\x55\x2a\x31\x47\x8a\x23\xe4\x96\x53\xc5\xdf\x52\x6c\x4f\x6f\x9b\xea\xa5\x9b\xad\xfb\xbf\xf9\xbf\xf9\x7e\xb3\x72\x5f\x09\x16\xb9\xc9\xae\x55\x84\xe7\xc9\xe1\xaa\x6a\xc7\xf8\x48\x1d\xce\xda\xa1\xd9\xec\xec\x0c\xde\xd3\x7c\x5f\x42\xf6\xe5\xdf\x38\x29\x67\x55\x05\x4a\x1b\x72\xa0\xc5\x87\x20\xfb\x28\x06\x6d\x98\x48\xc2\x63\x40\x31\xa6\x9b\x78\x31\x86\xb5\xe2\xf4\xb9\x48\xf0\xf8\xed\x0a\x5d\xdc\x68\xc2\x4b\x82\xd3\xa5\x7d\xe6\x3d\xb6\x82\xe6\x0a\xe5\x37\x9b\x3d\xdd\x06\xab\x3d\x4d\x82\x70\xd2\x04\xb0\xc1\xc2\x70\xb9\x67\x74\xd2\x4c\x7b\xa2\x85\xb4\x15\x27\x11\x48\x53\x5b\x93\x5b\x10\x6a\xed\x4e\xd2\xa6\x23\xe6\xb8\xb1\x67\x88\x20\x18\x29\x4d\xde\x3c\xe7\x02\x7b\x09\x4a\x53\xb5\x66\xcc\xc7\xe0\xfb\x9a\x63\xa6\x2f\x9d\x86\x85\x39\xda\xfe\x55\x87\x72\x8e\x40\x50\x83\xb4\x2e\x82\x0a\x60\xb8\xc8\xd2\x03\x66\x85\x01\x26\x3d\xe6\x84\xd3\x67\x3d\x41\x30\xe4\x67\xc3\x61\xa5\xa7\xc4\x97\x7b\x9a\x70\xe4\xcb\xad\x07\xca\x57\xc4\x37\x0c\x25\x98\xbd\xa5\x1c\x73\x4b\xa8\x6b\x28\x39\x1a\x4b\x31\x2a\xd5\x22\x29\x22\xb9\xb1\xba\x4e\xca\x27\xae\x8c\xf2\x49\x7e\xbd\xc8\x68\x89\x9f\xca\x08\x08\x10\x5a\x62\xb6\x42\x09\xae\xea\x10\x82\x7b\x7e\xba\x99\x54\x54\x23\xc4\xc7\x7d\x99\xef\xcb\x77\x62\xb8\xae\x23\x60\x98\x31\xc0\x8c\x65\x2c\xac\x66\x9e\x5b\x26\x69\x74\x45\x8e\x28\xdf\x76\xc9\xe2\x0b\x86\x51\x89\x2f\x36\x24\x5d\x5e\xe7\x88\x5e\xb2\x6c\xa7\xa4\x08\x92\xf2\x29\x12\xc7\x3c\xb0\x6d\x3f\x9c\x79\xde\x12\xaf\x30\x03\xce\x30\xbe\x24\x94\x14\x9b\xa0\x1d\x95\x90\x16\x6e\x87\xac\x20\xe7\xe2\xcd\x17\xc0\x70\x92\x1d\x30\x0b\xc2\x9f\xe4\xd0\x77\x0b\xa0\x24\x05\xe9\x9d\x04\xa3\x6b\x5c\xde\xa0\x75\xe0\x8b\xbd\xf8\x11\xf8\x25\xdb\x63\x3f\xb4\xc7\xef\x77\xb8\x28\xd0\x1a\xfb\x91\x60\xd3\xfd\x5a\x94\x28\xd9\xfa\x11\x14\x25\x23\x74\x1d\x54\xd5\x12\x7f\xd9\xaf\xa5\x9a\xaf\xf9\xb7\x20\x0c\xb9\xa4\x5e\xad\xc4\x63\x2f\x23\x0b\x67\x13\xbf\xe5\x83\x41\xcb\xbf\xe6\x4a\x31\xbc\x1e\x59\x01\x81\x45\xbb\x96\xb2\x60\x4a\xd2\x88\xff\x67\xc6\x27\x21\xb6\x2e\xb8\xba\x48\x1c\xec\x50\x7e\x2b\xf7\x71\x67\xc2\x62\xe6\xdd\xc3\x02\x38\x9d\xf4\x7b\x0c\x17\xfb\xb4\x84\x05\x50\xfc\x18\x68\xbc\x5c\x66\xec\x03\x7e\x1c\x44\x8d\x90\x0b\x7a\x2e\xa0\x3d\xf1\xd6\x09\x08\x2d\xf1\xd5\x6e\x5b\xd3\x57\xee\x4f\x18\x8e\x20\x55\xc8\xb8\xb3\x34\x29\xa1\x48\x8a\x73\xc6\xd0\xb3\xb6\x7a\x29\x41\x73\x33\x10\x01\xc8\xa9\xec\xe3\xe0\xb6\xa3\x0a\x8f\x6b\x91\xef\x3f\x6e\x66\xcb\x9d\x1a\xf3\x60\x01\x3b\xb4\xc5\x41\x6b\x4b\xa6\x28\xdc\x84\x52\x4c\x03\x42\xe5\xc1\x79\xab\x8c\x01\x89\xe0\x80\x52\x01\x5b\xa1\x23\x42\x15\x38\xb4\x7d\x49\x0e\xda\x5d\xfc\x4a\xca\x8d\x38\x7c\x68\xee\xc9\x43\x04\x0a\xf8\xb6\xd7\x13\xd7\xae\x9e\x07\xfe\x01\xa5\x3e\x77\x82\x6a\x16\x59\x41\x0f\x8f\x9e\x0d\x94\xaa\x12\xd8\x2b\x24\xa6\x7f\x65\x28\x0f\x30\x63\x11\xf8\x2b\x44\xb8\xa9\x97\x99\x76\x7b\x40\x0c\x67\x08\x62\x79\x3f\x54\x2c\xf5\x82\x47\x95\x77\x4b\xee\x60\x01\x87\xf6\x5a\x4f\x0b\x6c\x84\x03\x13\xe7\x9f\xa0\x83\x6e\xe8\x30\x73\xac\x7b\xe4\x10\x1a\xf1\xa6\x1d\x42\x90\x64\x34\x41\x25\xf8\x02\x86\x3c\xdc\x19\xc3\x21\x0f\x89\xee\xfc\xb0\x15\xd8\x7d\x66\x2f\x7e\x64\x6a\xb5\x29\x68\x3f\xcc\x9c\x87\x35\x65\xea\xb7\xd3\x93\x7d\xae\xd6\x5f\xf5\xcc\xfa\xbb\x89\x4d\x32\x8a\xb3\x95\xed\x98\x3e\x52\xfc\x71\x65\x79\xa7\x86\x9a\xd0\x25\x7e\x8a\xac\x88\x86\xcf\xb7\x7d\x99\x57\x55\xfc\xbc\x1e\x14\x39\xfc\x4d\x8f\x93\x15\x1c\xf3\x3f\xf7\x11\x64\xdb\x53\xdc\xd5\x4f\x9c\xfe\xcd\x9b\xe3\x8c\x5b\xf0\xf4\x23\xa1\xa3\x48\x77\x45\x69\xa7\x01\x7f\xfc\x18\xef\xd5\x21\xba\xd6\xe9\x62\xdf\x45\x63\xc4\xaa\xa7\x5a\x43\xc6\x4f\xdb\xb2\x86\xa3\xba\xf4\x43\xa7\x10\x7d\xf1\x4d\xf3\x70\xaa\xf0\xdb\x6a\xcf\x1d\xe2\xf6\x8e\xfc\xbc\x28\xc8\x9a\x12\xba\xe6\x7a\xca\xf1\xf0\x89\xb7\xc6\x2d\x51\x7f\xdc\xb8\x7b\xac\xfd\x83\x3f\x20\xea\xb8\xa6\xa6\x2c\x7d\x70\x72\x6d\xfd\x41\x5d\x55\x7a\x0d\xb9\xd8\xab\x3d\xbe\xda\xa3\xad\xc2\x57\x7b\x9c\xa8\xa9\x97\xb2\x47\x9d\x56\xab\xca\x8d\xbc\x9a\xe5\x3f\x66\x3a\xbe\x91\x6b\xc9\xf4\xa5\x36\x93\xf1\xb3\x33\x90\xeb\xea\x64\xdc\x59\xcf\xf9\x5e\x66\xe0\x92\xf2\xeb\x2b\x3a\xfd\x62\x8e\x5d\xc7\xd1\xe5\xbf\x91\x0a\x8e\xe7\x39\x6a\x37\x72\xa8\x52\xc5\x2a\x4f\xd4\x03\x08\x25\xa5\xcc\x6e\x5d\x19\x54\xbf\x88\x22\x62\x0e\xf7\x3e\xe2\xf3\xe5\xd2\xa8\x92\x04\xbd\xda\x4a\x64\xd5\x56\x04\xa9\x8c\x2f\xdb\xed\xd8\xf4\xe2\xe3\x58\xb1\x45\x52\x28\x9b\x99\xcb\x54\x3d\x37\xb7\xac\x3e\x7d\x42\x0c\xed\x8a\x10\x02\x23\xdd\x8a\x54\x95\xc1\xf0\x2b\x9e\xf8\x4f\xf1\x48\xca\x64\x03\x05\x4b\xb8\x0e\xf2\xf8\x3a\xdb\xb3\x04\xc7\x41\xf9\x9c\xe3\x50\x07\xc4\x09\x2a\x30\xfc\xb5\xcd\xc1\xf4\x39\xa8\x24\x6c\xae\x73\x1d\xb2\x12\x8c\x16\x9d\x14\xa8\x9f\x2c\xdb\x89\x8c\x0c\xec\xb4\x3a\x30\x5e\x5e\xa0\xa2\x34\x12\x95\x86\x41\xa3\x33\x4e\x70\x93\xd5\x75\x50\xb0\xa4\x0d\x8a\xdf\x65\x12\x3a\xef\x70\x59\x62\x56\xd7\xa1\xb5\x5a\x7b\x4b\x75\xd9\x8e\x32\xe9\xf0\xb0\x12\x1c\xa5\x99\xe3\x8a\xf9\x13\x6d\xd0\xda\x5f\x93\x7d\x0c\x5d\x39\x1f\xf0\x63\xe0\x17\x02\x33\x90\xad\x60\x4f\xb7\x34\x7b\xa4\xc0\xd1\xa3\x92\x1f\x09\x5b\x91\xef\x5b\xda\x1b\xb1\xc0\x2b\x94\xbf\x1a\xe1\xef\x6e\x84\xaa\x1e\x05\xb7\x77\xee\xe2\x95\xa6\x5b\x65\x0c\xb6\xf8\x59\x54\x59\x64\xa3\x43\x9e\xe3\x28\xc8\x2c\x39\x0a\x58\x00\xbf\x26\xe9\x32\x60\xb8\x88\xc0\xbd\x5e\x3b\xc3\xf3\xb7\xf8\xd9\x9f\x03\x88\x75\x8d\x61\x21\x81\x3f\x97\x92\xb4\x1f\xea\xb0\xb7\xb9\xf6\xca\x33\x37\x3f\xd1\x7a\xff\xff\x34\xf3\xed\xec\xbe\x1b\x68\x5c\xa1\xbc\xb0\x2a\x27\xee\x60\x43\xc6\x1a\x57\x28\x7f\xed\x1f\xc1\xa9\xfd\x23\x03\x27\x27\xb7\x7b\xd4\x9e\x7f\xc6\xcf\x92\xb2\xd3\xf8\xf1\xb4\x40\x0d\xe0\xbe\x76\x05\x91\x0f\x38\xd7\xd0\xbf\x63\x2d\x24\x27\x98\x26\xb6\x91\x6c\x60\xd9\x9d\x24\xef\x0f\xd0\x4a\xe2\x7e\xc0\xd1\x4e\xfa\x19\x3f\x6b\x67\x75\xe7\xf8\x2c\x74\x3a\xd4\x6c\x1a\xed\x36\xbd\x64\xbb\x69\xa0\xdf\xd4\x6f\x38\x4d\xee\x38\xfd\x0f\x5a\x4e\xca\x23\x3a\x9b\x4e\x2f\xd4\x75\x92\x4b\x88\xbe\x93\x15\x86\x75\x3b\x4f\x8e\x8b\x5c\x90\x51\xd5\x7a\xea\xb5\x59\x54\x93\x69\xae\x5a\x29\x2f\x80\x25\xce\x55\xb5\x5a\x88\xb3\xd7\x72\x0f\x0b\x20\x33\x71\x75\x8a\xaf\x9c\x6a\xa4\x29\xe6\x79\xdb\x48\x16\x09\x0e\x28\xbd\x15\xbe\xea\x2e\x92\xff\x96\x7e\xe5\x4e\x30\x8d\x80\xf3\xdd\x46\x87\xa6\x18\x6c\x89\x3f\xdc\x4c\xd8\x6e\x7b\x35\x1c\xd7\x44\xf0\xb7\x6d\x33\xc3\xd9\x1a\x18\xaf\xbd\xac\x06\x8b\x2f\x7f\xf9\x61\xc9\x6d\x18\x70\x8a\xc5\xd3\x0c\xbe\xc3\x08\x48\x68\xb6\x49\xac\xe0\x7d\xbb\x3d\x45\x58\x2b\x6a\xef\x28\xc6\x2a\xb4\xf4\x55\x73\xe8\x97\xb7\xdc\x53\x9b\x92\xc6\x37\x57\x8e\x3c\xf2\x51\xf5\x1c\x0e\xa7\x09\x6c\x29\x48\xda\xc3\xed\x76\x7b\xb7\x38\x1c\x94\xf5\x38\x4a\x22\x76\xa8\xd2\x5c\x2f\xd9\xf1\xca\x48\x73\xa7\xfc\x01\x6a\x23\x3a\xcf\x18\xae\x90\xb4\x2f\x7a\xfa\x45\x92\x89\x69\x97\x84\xb3\x3b\xd5\x52\x12\x0a\x92\x59\x2f\xb9\x1a\x8a\x2f\x04\xe9\x7f\x9d\x65\x09\xe7\xdc\x4d\xaa\x46\xbc\x90\x3b\x77\x72\x25\x4e\xf5\xcc\xb3\xd2\xeb\xc6\x69\x29\x02\xb1\x01\x15\xfc\x4e\x54\xa2\x86\xfd\xa8\x1a\x15\xd1\xa0\x22\x1d\x61\xd4\x9f\x4f\x95\xca\xe7\xf7\x95\x59\x9b\x8f\xce\xce\xce\xe0\x1a\xb3\x03\x49\xb0\x69\x85\x85\x1c\x6a\xcd\x50\xd3\x18\xb1\xdc\x3b\x5c\x56\x95\xa6\x54\xa9\xbf\x22\xbb\xc2\xe5\x26\x5b\x16\x41\x62\xa4\x85\x9a\xf0\x02\xa5\xe9\x7b\xbd\x4d\x1e\x50\x91\x0d\xcf\xc7\xc5\xce\x13\x9c\x97\x8d\xbb\x7b\xdf\x8e\xfc\x03\xd1\x65\x8a\x19\x0c\xc6\x88\xd1\x40\x90\xa8\x63\xc4\xb0\x6f\xb1\x60\x44\x6f\x5a\x36\x25\x77\xeb\xe2\xba\xf9\x41\x6b\xec\x46\xdb\x75\x27\x66\x89\xd2\xcb\x00\x23\xf9\x60\x51\xd2\xb9\x5f\x8d\x19\x45\x15\xd3\x1d\xd9\x53\x74\x06\x6a\x63\x56\xd1\x28\x97\x25\x9d\xa5\x5d\x67\x69\xf6\xa9\x48\xcf\xd9\x7a\xcf\xef\x88\xc2\xac\x72\x9d\xb3\xb5\xc3\xb1\x49\xb3\xd2\x13\xb8\x80\xdd\xaa\xb9\x59\x83\x42\x6c\x2d\xd4\x30\xb6\x8e\xd4\x05\x62\x6b\xb7\x22\xf4\x1c\x67\x96\xc3\x67\x19\x79\x8d\x66\xd8\xab\x27\x7a\xe6\xc6\xed\x4f\x27\x98\xf0\x3d\x58\x46\x6c\x04\xfe\x23\x7d\x25\xfe\xe3\x19\x89\xb0\x70\x15\xe1\x8f\x12\xf3\x60\x2c\x29\x9f\x8c\xda\xe8\x70\x3e\xd1\xc4\xc9\xc7\x93\x8a\xbc\x4d\x84\xfc\x9e\x99\xc6\x5d\x68\x81\xbe\xee\x9b\xe7\x31\x83\x09\x87\xf1\xcd\xcc\x3a\xbc\xe1\xc0\xfe\x25\xa3\x7b\xbb\xea\xa2\xe2\x7c\xa5\xb8\x0e\x06\x78\xc4\xbf\xe9\x17\xf0\x6c\x53\xf8\x8c\x1f\xf6\xb8\x68\x72\xd5\xc1\x8e\x92\x85\x78\x86\x1f\x7a\xe1\xde\x00\x3f\x3f\xe7\x88\x2e\x44\x08\x55\x55\x3f\x8a\x27\xc6\x59\x39\x44\xae\x02\x4b\x2e\x85\xba\x34\x02\x4a\xd2\x50\xf7\x9c\x8e\x09\x06\x27\xf4\x3f\x3b\x1b\x6a\x2f\x14\xcc\xd8\xa4\x49\xd3\xc4\x51\x9c\x13\x03\x71\xfc\x02\x90\xfe\xb1\xae\x4d\x98\x32\xfc\x10\x5a\x26\x3d\xd6\xe1\x73\x89\x3f\x65\x11\xd7\x0b\x41\xfb\x2c\x54\x6e\x16\x8e\x79\x97\x06\x62\xca\xd2\xdf\xb8\xee\x2f\xb5\x66\x8b\x3c\x75\x39\xce\x1d\x06\xe9\xb7\xce\x4c\x4a\x3d\xe6\xfe\x3d\x4f\xba\xa8\x39\xe4\x91\xa3\x10\xd9\x62\x93\x6c\xb4\x4f\xe3\x18\x0c\x88\x28\x34\x08\xa3\x15\x82\x3b\x6f\x5d\x43\x53\x4f\x25\xb8\x28\x0c\x96\xef\xe9\x21\xdb\x62\x16\x42\xa0\xb2\xe3\x6e\xd4\x63\x47\x3e\x2f\x66\x7e\xea\x5a\xfe\xfd\x2c\xcf\x05\xcb\xc6\x1d\x69\xeb\x99\x0a\x2d\xab\x71\xe0\x82\x57\x68\xb8\x30\xa7\x3b\xfd\xca\xc7\x0b\x88\xeb\x63\xb0\x76\x4d\x36\xc2\x6a\x14\x4c\x04\x8e\xa6\x62\x85\xe1\x07\xfb\xe8\x07\xc1\xd3\xda\xe5\x57\x60\x87\xe9\xe7\x2e\x0c\x3f\xc4\xc6\x63\x56\xa7\x96\x67\xc6\xa5\xf4\x5d\xb6\x35\x2f\xa3\xf1\x82\x7c\x55\xad\x76\xa5\x2a\x5e\xe5\x8c\xd0\x72\x15\xf8\x9f\x0d\x0d\x82\xb1\x2b\xe5\xdf\x0a\xf8\x82\x96\x5c\x2a\xbe\xbe\x28\xdf\x07\x3f\xdc\x84\x31\x5c\x6f\xb2\x7d\xba\x84\x2f\x22\x84\x19\x93\xd6\x97\xee\xaf\x15\xda\x84\x9c\x61\x2f\x9f\xd0\x73\x9a\xa1\xa5\xb8\x12\x2f\x36\x38\xd9\x4e\xb4\x19\xe9\x8a\x8b\xc6\x33\x0c\xba\x4a\x7e\xd8\xb1\x74\x2f\xc6\xf1\xba\x5f\xb0\x74\x7f\x5f\x73\xf5\x40\xe7\x29\xce\xcb\xdd\x3e\xf2\x3d\xa3\xe5\x22\x5c\xda\xf3\x19\x2e\x7c\xd1\x3f\x9a\x2a\xae\xed\xc1\x4c\x9e\xe7\x49\x82\x8b\x62\xe4\x11\xd4\xd0\x4f\x69\xbd\xe5\x04\xbd\xc0\xc2\xb9\x8e\x12\xfe\x14\xd1\x27\xdf\xaa\xc7\xe4\x63\xb8\x38\x69\x5d\xdb\xc7\x99\x08\xb7\x9a\x67\x53\x00\x60\x94\xb1\xa6\xac\x7e\x2c\x3c\x18\xc2\x7c\x6b\x81\x43\x0e\x5a\xa7\x19\xea\xff\x9d\x07\x44\xb3\x6e\xc1\xad\x05\xba\x5d\x9c\xb6\x4a\x64\xff\x09\x00\x00\xff\xff\x72\x2d\x20\x4d\x1b\x38\x00\x00")

func templatesBodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyGohtml,
		"templates/body.gohtml",
	)
}

func templatesBodyGohtml() (*asset, error) {
	bytes, err := templatesBodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body.gohtml", size: 14363, mode: os.FileMode(420), modTime: time.Unix(1530106192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\x3b\xf3\x1b\x00\x00\xff\xff\x76\x6d\x2f\x2d\xc0\x00\x00\x00")

func templatesHeadGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadGohtml,
		"templates/head.gohtml",
	)
}

func templatesHeadGohtml() (*asset, error) {
	bytes, err := templatesHeadGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head.gohtml", size: 192, mode: os.FileMode(420), modTime: time.Unix(1530027515, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/body.gohtml": templatesBodyGohtml,
	"templates/head.gohtml": templatesHeadGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"body.gohtml": &bintree{templatesBodyGohtml, map[string]*bintree{}},
		"head.gohtml": &bintree{templatesHeadGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

