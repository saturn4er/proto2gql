// Code generated by go-bindata.
// sources:
// templates/body.gohtml
// templates/head.gohtml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\xe3\x36\x16\x7e\x96\x7f\xc5\xa9\x76\x5a\x48\x85\x56\x79\xf7\xc2\x0f\x83\xec\xcc\xec\xa0\x9b\x69\x77\x12\xb4\x0f\x69\x30\x60\x64\xda\xe6\x5a\x96\x14\x8a\xf6\x24\x10\xf4\xdf\x17\x87\x17\x89\x94\x28\xdb\x49\x06\x8b\xee\xa2\xf3\x90\x26\xf4\x21\x79\x2e\xdf\xb9\x7c\x74\x2f\x2e\xe0\x5d\xb1\xdf\xd5\xb3\xa6\xe1\xa4\x58\x53\x78\x43\x8b\xfd\x0e\xe6\x0b\x48\xdf\xb3\x9c\xa6\xf2\x43\xf8\x6b\xdb\xce\x82\x03\xe1\xd0\x34\xf2\xf3\xf4\x57\xc2\x19\xb9\xcf\xe9\x27\xb2\xa3\x6d\x0b\x0b\x68\x9a\xf5\x43\xfe\xcb\x76\xdd\xb6\xe9\x27\xfa\x15\x77\x45\xd6\x12\xfe\x7d\x59\x16\x2b\xb6\x6e\x66\x41\x80\x9b\xe6\xa0\xff\x85\xe6\xc8\x0f\x9c\x54\x9b\x7f\xfd\x53\x9d\x18\x26\xb3\x20\x68\x1a\x60\x2b\xa5\x50\x7a\x59\xee\x76\xb4\x10\x4a\x93\x20\xf8\x3b\xad\x33\xce\x2a\xc1\xca\x62\xde\x29\xa5\x65\xda\x56\x6f\xa6\xc5\x52\xcb\xff\x4a\xf2\x3d\xad\xe7\x30\x50\x49\x2e\x2b\xbd\xae\x48\xd5\xcc\xc0\xfa\xd7\xf9\xe3\x80\x42\xe8\x10\x63\x39\x1e\x65\xf4\x08\x50\x7d\x29\x91\x6a\xc5\xe7\xf0\xc3\xf4\x2d\x8d\xdc\xa3\xd4\x91\x7a\xab\xad\xf2\x6f\xa5\x76\x60\xcc\x2e\xcc\xd5\x9d\xe9\xe1\xef\xe1\xef\x61\xd8\xdd\x3c\x76\x82\x23\x6e\x1f\xd7\x3b\x22\x08\xd4\x72\xd3\xf4\x6b\xb8\xd2\xc6\xb3\x7e\x69\x36\xbb\xb8\x80\x8f\x45\xb5\x17\x50\xde\xff\x9b\x66\x62\xd6\x34\xa0\xbd\xa1\x16\x7a\x7c\x48\xb1\x9f\xe5\xa2\x0b\x13\x25\x78\x0a\x28\xd6\x76\x1b\x2f\xd6\xb2\x71\x9c\x89\x8b\x02\x4f\xd8\xdf\x30\xc4\x8d\x11\x7c\xcf\x68\xbe\x74\x63\x3e\x3a\x56\xca\x5c\x91\xea\x66\xb3\x2f\xb6\xd1\x6a\x5f\x64\x51\x7c\xd6\x06\x70\xc1\xc2\xa9\xd8\xf3\xe2\xac\x9d\xee\x46\x07\x69\x2b\x14\x91\x48\xd3\xa6\x29\x13\xa4\x5b\x87\x9b\x4c\xea\xc8\x3d\x7e\xec\x59\x2a\xc8\x83\xb4\x27\x6f\x9e\x2a\x89\xbd\x8c\xe4\xb9\xbe\x33\xc5\x35\x78\xd3\x22\x66\xc6\xda\x19\x58\xd8\xab\xfd\x5f\x6d\xac\xf6\x48\x04\x75\x48\x1b\x22\xa8\x06\x4e\xeb\x32\x3f\x50\x5e\x5b\x60\x32\x6b\x5e\x38\x7d\x36\x1b\xe4\x81\x18\x1b\x84\x95\xd9\x92\xbe\xdf\x17\x19\x22\x5f\x99\x1e\xe9\x5a\x91\xde\x70\x92\x51\xfe\xae\x40\xcc\x2d\xa1\x6d\x41\x20\x1a\x85\x5c\x55\x6e\x51\x12\x89\x32\xac\x6d\x33\xf1\x88\xce\x10\x8f\xea\xd3\xcb\xb2\x10\xf4\x51\x24\xc0\x80\x15\x82\xf2\x15\xc9\x68\xd3\xc6\x10\x7d\x81\x1f\xed\xeb\x7f\xde\x8b\x6a\x2f\x3e\x94\xe8\xb9\xb6\x4d\x80\x53\xce\x81\x72\x5e\xf2\xb8\x99\x05\x7e\x6d\x54\xba\xd5\x15\x29\xd0\x60\xc1\xd3\x4b\x4e\x89\xa0\x97\x1b\x96\x2f\xaf\x2b\x52\xbc\xe7\xe5\x4e\xdf\x1f\x65\xe2\x31\x91\x01\x9e\x30\x38\x8c\x67\x41\xb0\xa4\x2b\xca\x01\x0f\x4c\xdf\xb3\x82\xd5\x9b\xa8\x5f\x55\x60\x96\x05\x87\xad\xa0\x42\xf5\xe6\x0b\xe0\x34\x2b\x0f\x94\x47\xf1\xdf\xd4\xd2\x77\x0b\x28\x58\x0e\xaa\x2e\xc9\x83\xae\xa9\xb8\x21\xeb\x28\x94\xb6\x84\x09\x84\x82\xef\xa9\xbc\xcd\x27\xf0\x65\x47\xeb\x9a\xac\x69\x98\xc8\xf3\x26\xc5\x6a\x41\xb2\x6d\x98\x40\x2d\x38\x2b\xd6\x51\xd3\x2c\xe9\xfd\x7e\xad\x5c\x7e\x8d\x9f\x45\x71\x2c\x37\xb7\x5a\x61\xfe\x8d\xb5\xc3\xf3\xd2\x77\xb8\x18\xf5\x17\xb5\xe8\x2f\xab\x14\xb2\x15\x30\x58\xf4\x97\xea\xb4\x2e\x58\x9e\xe0\x8f\x19\x6e\x22\x7c\x5d\xa3\x27\x59\x1a\xed\x48\x75\xab\x0c\xba\xb3\xb1\x32\x0b\xbe\xc0\x02\x50\x4e\x15\x43\x4e\xeb\x7d\x2e\x60\x01\x05\xfd\x1a\x4d\x63\x48\xaa\x02\xa3\x52\xd0\xc7\xbf\x2f\x06\xd2\x43\x78\xc1\x6d\x5f\x02\x64\x19\x7c\xc8\x65\x02\x49\xd1\xb6\x0d\xef\x1c\x0f\x2a\x50\xb2\xfa\x2d\xe7\xe4\xc9\x64\xbe\xba\xdd\xc9\xef\x80\x49\x7c\x9e\x73\x7e\x1a\xdd\x0e\x4c\x47\xa7\xa1\xb9\xe9\xa0\x36\xc1\x02\x76\x64\x4b\xb1\xc8\xab\x1b\x9d\xfb\x31\x83\x72\x5a\x44\xac\x50\xc1\x59\x95\x1c\x58\x02\x07\x92\x4b\xd0\x4a\x9f\xb0\x42\x03\x41\x27\x97\xda\x6f\xaa\xc4\x6f\x4c\x6c\x64\x78\xc1\xb4\xc7\x43\x02\x1a\xf4\x6e\xad\x93\xcd\xd6\x6c\x83\xf0\x40\xf2\x10\x4b\x9f\xda\xc4\x56\x30\x02\x5e\x87\x03\x89\xa9\x3a\xfd\x8d\x93\x2a\x0a\x35\xe8\x02\xbd\xd1\x6f\xf5\x2d\xbb\x83\x05\x1c\x8c\xda\x34\xaf\x69\xdf\xbf\x8f\x6d\x39\x5f\x65\xbb\xe8\x1a\x75\x86\x57\x4d\x86\xe4\xd8\x35\x51\x56\x16\x19\x11\x10\x4a\x20\xe0\xe4\x31\x85\x04\x9c\x4c\xee\xc2\xd8\xa8\xe4\x0c\x1c\xed\xcc\xd5\x50\xbb\x52\x69\xa4\xb2\xaa\xb5\x1b\xc7\xc5\x05\xa8\xb4\x30\x8d\xc3\x3b\x7b\xbc\x51\xdd\x42\x49\xbe\x7c\xfa\x18\x0f\x1e\xee\xcc\x61\x46\xd5\x23\xd3\x46\x10\x78\xe6\x0c\xb5\xd4\xe8\xc1\x2a\x90\xbd\x8b\x15\x4c\xa8\x7a\xec\xcb\xf2\x71\xc3\x97\x8e\xf4\xdb\x91\xbe\x5d\x2e\xad\x8e\x1e\x8d\xe6\x80\xc4\x99\x03\xa4\xa8\x82\x72\x67\x4e\x6a\x19\x10\x04\xc7\x46\x02\x25\xa1\x51\x31\x57\x6d\xa5\xb2\x8d\xd5\x1f\xfd\x42\x38\xd9\xd5\x31\x44\x56\x3d\x48\x74\x47\xb4\xa6\xa5\x40\xfe\xa8\xbf\x32\x91\x6d\xa0\xe6\x19\x5a\x5f\xa5\xd7\xe5\x9e\x67\x34\x8d\xc4\x53\x45\x63\x93\x75\x19\xa9\x29\x36\xdd\x61\xc1\x50\x31\x52\x65\x63\xae\x65\x31\x71\xf1\xb4\x85\x9b\xb8\x9e\x12\x1e\xd8\x59\x8b\x3e\xee\x6b\xc9\x27\x4a\x97\x97\xa4\x16\xd6\x88\xdd\x1d\xd0\xb9\x18\x05\x6e\xca\xb6\x8d\x6a\x9e\xf5\x19\x65\xb4\xd2\x95\x31\x76\x2e\x6b\x1a\x37\xf1\xfb\x53\x8f\x9d\x31\x38\xc2\x19\xe2\xb5\x73\xce\xf4\xcd\xff\x8c\x8d\x8e\x89\x5d\x95\xec\x03\xd8\x34\xaa\x04\x77\x09\x1c\x85\xb5\x44\x0e\x94\x2b\xd8\x17\xdb\xa2\xfc\x5a\x00\x62\x48\x17\x67\x05\x5e\xd9\x96\x6c\x07\x0e\x0b\xce\x15\xa9\x6a\x60\xc5\xa9\xa2\xa3\x6a\xce\x15\xa9\xfe\xe4\x3c\xcf\xe6\x3c\x92\x2a\x6f\xe9\xd3\x4b\x28\x8a\xb6\xf9\x27\xfa\xd4\xa3\xdb\x22\x2b\x41\x47\x87\x24\xff\x7d\xc5\x0d\xb2\xff\x79\xef\x38\x97\xf6\x78\xc1\x74\x26\xf5\x71\x81\xe5\xb2\x9f\xe0\x0f\x40\x7f\x70\xda\xed\x0b\x4e\xa7\xc8\x4f\xf4\xc9\xcc\x70\x77\x9e\x8f\xa5\x4f\xa7\x68\xd2\x51\x9e\xf4\x2d\x89\xd2\x04\x53\x1a\x53\xa5\xb3\xb9\xd2\x69\x3a\x72\x2e\x5b\x7a\x15\x5d\xd2\x55\xd2\x4b\x98\x5e\xab\xe2\x88\x32\xa9\xcb\x24\x69\x72\x8a\xf5\x90\x36\x79\x9a\xae\x14\x2b\x34\x6f\x1a\x71\x06\xcd\x90\xe6\x9a\x23\x7c\x03\xa4\xe1\xa9\x9a\x44\x30\x2f\x8b\x40\x8a\xc6\xf0\x17\xfd\x29\x4a\x1d\x61\x74\x41\xb0\x4d\xe0\x80\x82\x07\x92\xdf\xca\x4a\x76\x97\xa8\xdf\x55\xd5\xb9\x93\x87\x26\x80\xe7\x6e\x93\xc3\xac\x6b\xbb\xb6\xfa\x63\xb2\x62\xba\xdd\x76\x3b\x62\x2b\xbe\x8d\x10\x6e\xfb\xc9\xdf\xcb\x55\xa6\xdb\x25\xd2\x96\x55\x44\x39\x4f\x20\x5c\x11\x86\x89\x26\x4a\x53\x9b\xe0\x2f\xdf\x2f\x31\xc3\x81\xe6\x54\x3e\x36\xa2\x85\x09\x30\x2b\xee\x83\x0e\xbf\xdd\x3e\x47\x59\xa7\xb7\x0f\x1c\xe3\xd0\x8e\xb1\x6b\x0e\x63\x22\xe7\xdf\x0a\xe1\xe1\xbf\xe4\x1c\x15\xf2\xa3\xee\x39\x1c\x9e\xa7\xb0\xe3\x20\x95\x0f\xb7\xdb\xed\xdd\xe2\x70\xd0\xd9\xe3\x21\x4e\xee\x20\xd3\x35\x9f\xf2\x34\x7f\xea\x3a\xce\x1f\x80\x41\x19\x62\x30\xcd\xa3\xfa\x37\xea\x31\x95\x3a\x93\x21\x29\x38\xfb\x59\x91\xd6\x50\x8a\xcc\x46\x6c\x68\x6a\xfa\x90\xa2\xaf\xa6\x45\xb2\x08\x0f\x59\xd0\x91\x2a\xe4\xe7\x39\x3e\x92\x63\x98\xbf\x99\xc1\x75\xd1\x4a\xad\x17\x98\xde\xb4\xae\x6c\x76\xfb\xa5\x7d\x7a\x72\x3e\xd3\xc7\x26\x2b\x8e\x7a\x59\x0b\xfd\x3f\xfb\x59\x37\x04\x8f\xa7\xdd\x16\x35\xf6\x75\x6b\x7f\x09\x73\x71\x01\xd7\x94\x1f\x58\x46\xed\x1c\xae\xd5\x52\x9f\xc4\x46\xc6\x9a\x13\x3f\x50\xd1\x34\x46\x52\x33\x7d\x2d\x76\x45\xc5\xa6\x5c\xd6\x51\x66\x71\x47\x23\x78\x49\xf2\xfc\xa3\xf1\x03\x0e\x6b\x6c\x83\xf4\x5b\xba\x26\xa3\x95\xe8\x8a\xe5\xc7\x7e\xe5\x1f\xa4\x58\xe6\x14\x0b\xc6\xc4\xfc\x99\x4c\x0c\xa0\x66\xfe\x8c\xc7\xf9\x0e\xd6\x64\x68\x74\xd3\x7a\xf7\x05\x72\xc8\x3d\xfa\x52\x81\x7b\xb5\xb3\x76\x72\x97\x7c\x60\x99\x38\x48\x7d\x81\xa7\xe4\xfc\xdf\xa2\x58\xaf\x27\x76\x31\x73\xb7\xe8\xaf\xda\x06\x90\xd6\x32\x9f\x65\xc9\x76\xdf\x53\x3a\x03\xb5\xcc\x5b\xbe\xde\x63\x6b\xa9\x6d\x06\xfd\x96\xaf\x3d\xf5\x50\xa5\x9b\xd9\x80\x9a\x0d\xbf\xb2\xb1\x9f\x98\x08\x5f\x4b\xfb\x8f\xdd\xa3\x9c\x40\xf8\xda\xef\x01\xb3\xc7\x4b\x9d\x70\x97\x45\x96\x82\xa9\xf7\x8a\xc0\x36\xdc\xfd\xe8\x19\xc9\xfd\x05\x9c\xf4\xb6\xd8\x44\xff\xe4\x73\x94\x53\x74\x53\xef\x69\x62\x51\xf5\x64\x28\x1c\xa5\x53\x3a\x84\x00\x98\xa6\x6e\x46\xeb\x69\xd2\x61\x7d\x66\x33\x8f\x60\x7a\x90\x3f\x73\x9a\x7f\xc9\x48\x6f\x3f\xb5\x74\xc3\xbd\xf6\xe3\x20\x82\x38\xe6\x6f\xc6\x2f\x6c\x2e\x90\x3f\xd3\x87\x3d\xad\x3b\xfa\x6a\x73\x31\x17\x72\xa7\xc3\x84\x69\xfe\x60\xcd\x7e\x67\x5c\xd1\xb6\x91\xe0\x89\x0c\xac\x8a\x1d\x8e\x93\x18\x58\x3b\x9a\xe8\xa1\x38\x81\x0a\x81\x5d\xc7\x8e\x46\xa3\x37\xac\x97\xe9\x60\x5d\xe6\xbd\xa5\x18\x18\xea\xff\xd6\x21\x18\x74\x1c\xca\xb9\x2f\x64\x46\x26\xb3\x30\x89\xa5\x5c\x55\x3a\x57\x1b\x4e\x1f\xe2\x99\xcf\x5e\x78\xc9\x69\xea\xfb\x2c\xd3\x46\x5c\xcf\xe8\x1e\x17\x1f\xab\x08\xe6\x97\x4c\x3c\xa2\x77\x7f\xf0\xf5\x1a\x7d\x59\xef\x13\xdd\xc8\xe6\x9e\xa4\x0c\xfb\xfa\xa3\xd4\x3d\x56\xaa\x83\x40\x55\x95\x39\x54\xc9\x48\x23\x3b\xe8\x6c\x63\xca\x10\x46\x52\xbd\x37\xc8\xbc\x45\xb5\xbd\xfd\xd1\x72\xd0\xa3\x00\x9f\x84\x75\xe0\xc7\xe2\x50\x6e\x29\x8f\x21\xd2\x2c\x78\x38\xc0\x8c\x0a\xdc\x9f\x19\xf7\xea\x8c\xf3\x5e\x6c\x72\xed\x34\xaa\x9d\x67\x6b\x1f\xb2\xe3\xd9\x89\xcc\x9e\xc8\x6b\x0b\x80\xb5\x0d\x40\xcc\x40\x85\x3c\xe9\x9c\x33\xe1\xc7\xe9\x83\x8b\xa6\x49\x3c\xf6\x19\xfe\x02\x38\xf2\x04\xca\xad\x7a\x30\x7b\x48\xa3\x1f\x4f\xf8\xae\xdb\xc6\x56\xf0\x5d\xb9\xb5\xab\xdd\xf1\xa7\xfe\xa6\x59\xed\x84\x7e\x02\xab\x38\x2b\xc4\x2a\x0a\x35\x1a\xe4\x77\xd5\x60\x99\xa5\x1f\xa7\x6b\xb8\x27\x4b\x54\x0b\xef\x97\x5f\x0c\x44\xdf\xdf\xc4\x29\x5c\x6f\xca\x7d\xbe\x84\x7b\x3a\x87\x13\xea\x86\xaa\x66\xf6\x5a\xdb\x5f\x6f\xf4\x21\x9a\xac\x96\x99\x78\x4c\x55\x9d\xb1\xc2\x12\x0f\x61\x60\x8e\xfa\x86\xf8\xc9\x74\x50\x38\xad\xfd\x31\xa9\xab\xb2\xa8\xe9\x20\x28\xa3\x98\x3c\x3f\x24\x68\x3e\x7c\x9c\x08\x85\xfa\x7f\xe9\x46\x81\xd0\xb7\x9c\x52\x53\x06\xa3\xee\x83\x61\x65\x8b\x72\x63\x66\x3b\xc3\x0c\x9c\xfa\xbf\x6e\x96\xb6\xb3\xe1\x8b\x4d\x6f\xa9\xfb\xba\xe9\xbc\xb1\xfc\x27\x00\x00\xff\xff\x7e\x14\xe3\xe9\x2e\x29\x00\x00")

func templatesBodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyGohtml,
		"templates/body.gohtml",
	)
}

func templatesBodyGohtml() (*asset, error) {
	bytes, err := templatesBodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body.gohtml", size: 10542, mode: os.FileMode(420), modTime: time.Unix(1529506508, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\xbb\xdf\x00\x00\x00\xff\xff\xd3\x8b\xe8\x22\xbf\x00\x00\x00")

func templatesHeadGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadGohtml,
		"templates/head.gohtml",
	)
}

func templatesHeadGohtml() (*asset, error) {
	bytes, err := templatesHeadGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head.gohtml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1529504948, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/body.gohtml": templatesBodyGohtml,
	"templates/head.gohtml": templatesHeadGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"body.gohtml": &bintree{templatesBodyGohtml, map[string]*bintree{}},
		"head.gohtml": &bintree{templatesHeadGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

