// Code generated by go-bindata.
// sources:
// templates/body.gohtml
// templates/head.gohtml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xe3\x36\x12\x7f\x96\x3e\xc5\x54\xb7\x2d\xa4\x42\xa7\xbc\xfb\xe0\x87\x45\x6e\xb3\xb7\xe8\xed\xb6\xb7\x09\xda\x87\x34\x58\x70\x65\xda\xe6\x59\xa6\x14\x8a\x56\x12\x08\xfa\xee\x07\xfe\x93\x48\x89\xb2\x9d\x64\x71\x68\x81\xee\x43\x9a\xd0\x33\xe4\xfc\xf9\xcd\x70\x7e\x74\x2f\x2e\xe0\x1d\x3d\xec\xeb\xb0\x6d\x19\xa2\x1b\x0c\x6f\x30\x3d\xec\x61\xb1\x84\xec\x8a\x14\x38\x93\x1f\xc2\xdf\xbb\x2e\x0c\x1a\xc4\xa0\x6d\xe5\xe7\xd9\xaf\x88\x11\xf4\xb5\xc0\x9f\xd0\x1e\x77\x1d\x2c\xa1\x6d\x37\xf7\xc5\x2f\xbb\x4d\xd7\x65\x9f\xf0\x83\xd0\x8a\xad\x25\xf1\xf7\x65\x49\xd7\x64\xd3\x86\x41\x20\x94\x16\xa0\xff\x45\x66\xcb\xf7\x0c\x55\xdb\xff\xfc\x5b\xed\x18\xa5\x61\x10\xb4\x2d\x90\xb5\x32\x28\xbb\x2c\xf7\x7b\x4c\xb9\xb2\x24\x08\xfe\x89\xeb\x9c\x91\x8a\x93\x92\x2e\x7a\xa3\xb4\x4c\xd7\x69\x65\x4c\x57\x5a\xfe\x57\x54\x1c\x70\xbd\x80\x91\x49\x72\x59\xd9\xf5\x11\x55\x6d\x08\xd6\xbf\x3e\x1e\x8d\x10\x12\x01\x31\x9e\x8b\xad\x8c\x1d\x81\x30\x5f\x4a\x64\xda\xf0\x05\xfc\x30\x7f\x4a\x2b\x75\x94\x39\xd2\x6e\xa5\x2a\xff\x56\x66\x07\xc6\x6d\x6a\x8e\xee\x5d\x8f\x7e\x8f\x7e\x8f\xa2\xfe\xe4\x69\x10\x1c\x71\x7b\xbb\x21\x10\x41\xa0\x96\xdb\x76\x58\x13\x2b\x5d\x12\x0e\x4b\x61\x78\x71\x01\x1f\x68\x75\xe0\x50\x7e\xfd\x2f\xce\x79\xd8\xb6\xa0\xa3\xa1\x16\x06\x7c\x48\xb1\x9f\xe5\xa2\x0b\x13\x25\x78\x0a\x28\x96\xba\x8d\x17\x6b\xd9\x04\xce\xe4\x45\x81\x27\x1a\x4e\x18\xe3\xc6\x08\x5e\x11\x5c\xac\xdc\x9c\x4f\xb6\x95\x32\x1f\x51\x75\xb3\x3d\xd0\x5d\xbc\x3e\xd0\x3c\x4e\xce\x52\x00\x17\x2c\x0c\xf3\x03\xa3\x67\x69\xba\x8a\x0e\xd2\xd6\x42\x44\x22\x4d\xbb\xa6\x5c\x90\x61\x1d\x2b\x99\xd2\x91\x3a\x7e\xec\x59\x26\xc8\x8d\x74\x24\x6f\x9e\x2a\x89\xbd\x1c\x15\x85\x3e\x33\x13\x6b\xf0\xa6\x13\x98\x99\x5a\x67\x60\x61\xaf\x0e\x7f\x75\x89\xd2\x91\x08\xea\x91\x36\x46\x50\x0d\x0c\xd7\x65\xd1\x60\x56\x5b\x60\x32\x6b\x5e\x38\x7d\x36\x0a\x72\x43\x91\x1b\x01\x2b\xa3\x92\x5d\x1d\x68\x2e\x90\xaf\x5c\x8f\x75\xaf\xc8\x6e\x18\xca\x31\x7b\x47\x05\xe6\x56\xd0\x75\xc0\x05\x1a\xb9\x5c\x55\x61\x51\x12\xa9\x72\xac\xeb\x72\xfe\x28\x82\xc1\x1f\xd5\xa7\x97\x25\xe5\xf8\x91\xa7\x40\x80\x50\x8e\xd9\x1a\xe5\xb8\xed\x12\x88\xbf\x88\xec\x96\x2a\x50\xbd\x11\x3f\x1f\x78\x75\xe0\xef\xe5\x72\xd7\xa5\xc0\x30\x63\x80\x19\x2b\x59\xd2\x86\x81\xdf\x26\x55\x74\x75\x85\xa8\x70\x9b\xb3\xec\x92\x61\xc4\xf1\xe5\x96\x14\xab\xeb\x0a\xd1\x2b\x56\xee\xb5\x15\x71\xce\x1f\x53\x99\xe6\x19\xb7\xa3\x24\x0c\x82\x15\x5e\x63\x06\x62\xc3\xec\x8a\x50\x52\x6f\xe3\x61\x55\x41\x5a\xb6\x1d\xb2\x86\x4a\x98\xb7\x58\x02\xc3\x79\xd9\x60\x16\x27\xff\x50\x4b\xdf\x2d\x81\x92\x02\x54\x77\x92\x1b\x5d\x63\x7e\x83\x36\x71\x24\x7d\x89\x52\x88\x38\x3b\x60\x79\x9a\x4f\xe0\xcb\x1e\xd7\x35\xda\xe0\x28\x95\xfb\xcd\x8a\xd5\x1c\xe5\xbb\x28\x85\x9a\x33\x42\x37\x71\xdb\xae\xf0\xd7\xc3\x46\x05\xfe\x5a\x7c\x16\x27\x89\x54\xee\xb4\xc1\xec\x1b\x5b\x27\xf6\xcb\xde\x89\xc5\x78\x38\xa8\x13\xf1\xb2\x1a\x22\x59\x03\x81\xe5\x70\xa8\x2e\x6e\x4a\x8a\x54\xfc\x08\x85\x12\x62\x9b\x5a\x44\x92\x64\xf1\x1e\x55\xb7\xca\xa1\x3b\x1b\x31\x61\xf0\x05\x96\x20\xe4\x54\x4b\x64\xb8\x3e\x14\x1c\x96\x40\xf1\x43\x6c\xa0\x74\x55\xb2\x4f\xf8\x61\x16\x50\xd2\x2e\x98\x74\x87\x01\x0c\x43\x7f\x90\xe1\x12\xa7\xdd\x0e\x5d\x41\x76\xc6\xfb\x42\xd6\x94\x14\xed\xba\xe8\xce\x09\xa7\x42\x28\xa9\xdf\x32\x86\x9e\x4c\x33\x50\xa7\x3b\x25\x1f\x10\x09\xd6\x73\xf6\xcf\xe2\xdb\x51\x1c\x44\x04\x85\xef\xd9\xa8\x5d\xc1\x12\xf6\x68\x87\xe3\xa1\xae\xec\xf3\x45\x39\x15\x98\xc6\x84\xaa\x4c\xad\x4b\x06\x24\x85\x06\x15\x12\xc1\x32\x26\x84\x6a\x54\xe8\x4a\x53\xfa\xa6\x71\xfc\x46\xf8\x56\xe6\x1a\xcc\x8d\xd9\xa4\xa0\x2b\xc0\x6d\x7f\xf2\xfe\x35\x6a\x10\x35\xa8\x88\x44\x37\x54\x4a\x64\x0d\x13\x14\xf6\xa0\x90\x00\xab\xb3\xdf\x18\xaa\xe2\x48\x23\x30\xd0\x8a\x7e\xaf\x6f\xc9\x1d\x2c\xa1\x31\x66\xe3\xa2\xc6\xc3\x95\x7e\x4c\xe5\x7c\x93\xed\x3e\x6c\xcc\x19\x1f\x35\x9b\x92\x63\xc7\xc4\x79\x49\x73\xc4\x21\x92\x40\x10\xc3\xc8\x1c\x12\xc4\xb0\x72\x17\x25\xc6\x24\x67\x06\xe9\x42\xd7\x42\x1d\x4a\x65\x91\x2a\xb1\xce\xbe\x4b\x2e\x2e\x40\x95\x85\xb9\x4b\xbc\xe3\xc8\x1b\x75\x81\x28\xc9\x97\x0f\x24\xd3\x59\xc4\x1d\x43\xcc\xf4\x7a\x64\x00\x09\x02\xcf\xe8\xa1\x96\x5a\x3d\x6b\x05\xf2\x3a\x23\x94\x70\xd5\x9c\x7d\x55\x3e\x9d\x01\x64\x20\xfd\x7e\x64\x6f\x57\x2b\xeb\x92\x8f\x27\xa3\x41\xea\x8c\x06\x52\x54\x41\xb9\x77\x27\xb3\x1c\x08\x82\x63\x53\x82\x92\xd0\xa8\x58\xa8\x3b\xa6\xb2\x9d\xd5\x1f\xfd\x82\x18\xda\xd7\x09\xc4\x56\x3f\x48\xf5\xf5\x68\x0d\x50\x81\xfc\x51\x3f\x10\x9e\x6f\xa1\x66\xb9\xf0\xbe\xca\xae\xcb\x03\xcb\x71\x16\xf3\xa7\x0a\x27\xa6\xea\x72\x54\x63\xf8\x71\xda\x30\x54\x8e\x54\xdb\x58\x68\x59\x51\xb8\x62\xb7\xa5\x5b\xb8\x9e\x7e\x1e\xd8\x55\x2b\x62\x3c\xf4\x92\x4f\x18\xaf\x2e\x51\xcd\xad\xa9\xbb\xdf\xa0\x0f\xb1\x10\xb8\x29\xbb\x2e\xae\x59\x3e\x54\x94\xb1\x4a\x77\xc6\xc4\x39\xac\x6d\xdd\xc2\x1f\x76\x3d\xb6\xc7\x68\x0b\x67\xae\xd7\xc1\x39\x33\x36\x7f\x1a\x1f\x1d\x17\xfb\x2e\x39\x24\xb0\x6d\x55\x0b\xee\x0b\x38\x8e\x6a\x89\x1c\x28\xd7\x70\xa0\x3b\x5a\x3e\x50\x10\x18\xd2\xcd\x59\x81\x57\x5e\x4b\x76\x00\xc7\x0d\xe7\x23\xaa\x6a\x20\xf4\x54\xd3\x51\x3d\xe7\x23\xaa\xfe\xa2\x41\xcf\xa6\x41\x92\x3d\xef\xf0\xd3\x4b\x58\x8b\xf6\xf9\x27\xfc\x34\xa0\xdb\xe2\x2f\x41\xcf\x90\x24\x25\x7e\xc5\x09\xf2\xfe\xf3\x9e\x71\x2e\x13\xf2\x82\xe9\x4c\x36\xe4\x02\xcb\x25\x44\xc1\x1f\x80\x11\x89\xd1\xd7\xc3\x8a\x7e\xc2\x4f\x66\x86\xbb\xf3\x7c\x2c\x63\x3a\xc7\x99\x8e\x92\xa6\x6f\xc9\x9a\x66\x68\xd3\x94\x37\x9d\x4d\x9c\x4e\x73\x93\x73\xa9\xd3\xab\xb8\x93\xee\x92\x5e\xf6\xf4\x5a\x13\x27\xfc\x49\x1d\x26\x19\x94\xd3\xac\xc7\x1c\xca\x73\xe9\x4a\x31\xaa\x49\xd4\x84\x33\x68\xba\xb4\xd0\x1c\xe1\x1b\x20\x4d\xec\xaa\x49\x04\xf1\xb2\x08\xc1\xd7\x88\xf8\x45\x7f\x2a\xa4\x8e\xd0\xbb\x20\xd8\xa5\xd0\x08\xc1\x06\x15\xb7\xb2\x93\xdd\xa5\xea\x77\xd5\x75\xee\xe4\xa6\x29\x88\x7d\x77\x69\x13\xf6\xd7\xae\x6d\xfe\x94\xac\x98\xdb\x6e\xb7\x9b\xb0\x15\x9f\x22\x44\xbb\x61\xf2\xf7\x72\x95\xf9\xeb\x52\xd0\x96\x75\x8c\x19\x4b\x21\x5a\x23\x22\x0a\x8d\x97\xa6\x37\xc1\xdf\xbe\x5f\x89\x0a\x07\x5c\x60\xf9\xfe\x28\x3c\x4c\x81\x58\x79\x1f\xdd\xf0\xbb\xdd\x73\x8c\x75\xee\xf6\x51\x60\x1c\xda\x31\x0d\x4d\x33\x25\x72\x7e\x55\x88\x9a\xff\x53\x70\x54\xca\x8f\x86\xa7\x69\x9e\x67\xb0\x13\x20\x55\x0f\xb7\xbb\xdd\xdd\xb2\x69\x74\xf5\x78\x88\x93\x3b\xc8\xf4\x97\x4f\x79\x9a\x3f\xf5\x37\xce\x1f\x80\x41\x19\x62\x30\xcf\xa3\x86\x67\xeb\x29\x95\x3a\x93\x21\x29\x38\xfb\x59\x91\xb6\x50\x8a\x84\x13\x36\x34\x37\x7d\x48\xd1\x57\xd3\x22\xd9\x84\xc7\x2c\xe8\x48\x17\xf2\xf3\x1c\x1f\xc9\x31\xcc\xdf\xcc\xe0\x7d\xd3\xd2\x02\xd2\x01\x3d\x1a\x9f\x19\x44\x03\xfb\xa3\x61\xd4\x42\xb3\x81\xf4\x0c\x59\x7f\xbe\x50\xea\x9e\x3f\x0d\x66\x67\x7f\xb3\x72\x71\x01\xd7\x98\x35\x24\xc7\x76\x15\xd6\x6a\x69\x28\x43\x23\x63\x4d\x7a\xef\x31\x6f\x5b\x23\xa9\xb9\xba\x16\xfb\x88\xf9\xb6\x5c\xd5\x71\x6e\xb1\x3f\x23\x78\x89\x8a\xe2\x83\x71\x53\x8c\x5b\x64\x2b\x08\xb4\xf4\x3c\xc7\x15\xef\xdb\xdd\x87\x61\xe5\x5f\x88\xae\x0a\x2c\x4a\x7e\x66\x82\x4c\x67\x46\x48\x33\x41\x26\xd3\x8a\x05\x6b\xb6\x33\xb6\x69\xbb\x87\x16\x37\x66\x0f\x43\xb1\x0b\x5d\x1d\xac\xbd\xd4\x92\x4f\x24\x33\x1b\xa9\x6f\xe5\x94\x9c\xff\xab\x11\xeb\xfd\xc3\x6e\x47\xae\x8a\xfe\xfe\x6c\x84\x59\x2d\xf3\x59\x36\x5d\xf7\x45\xa4\x77\x50\xcb\xbc\x65\x9b\x83\xb8\x1c\x6a\x9b\x03\xbf\x65\x1b\x4f\x47\x53\xf5\x64\x14\x84\x65\xe3\xef\x61\xec\x47\x22\xc4\x36\xd2\xff\x63\xe7\xa8\x20\x20\xb6\xf1\x47\xc0\xe8\x78\xc9\x8f\xd0\xb2\xe8\x4e\x30\xf7\xe2\x10\xd8\x8e\xbb\x1f\x3d\xa3\x76\xbf\x80\x53\xbd\x16\x1f\x18\x1e\x6d\x8e\xb2\x82\x7e\x6e\x3d\x4d\x0d\xaa\x81\xce\x44\x93\x72\xca\xc6\x10\x00\x73\x2d\x9b\xe1\x78\x9e\x36\x58\x9f\xd9\xdc\x21\x98\x1f\xc5\xcf\x9c\xc7\x5f\x32\x94\xdb\x8f\x25\xfd\x78\xae\xe3\x38\xca\xa0\x18\xd4\xb7\xd3\x37\x32\x17\xc8\x9f\xf1\xfd\x01\xd7\x3d\x01\xb5\xd9\x94\x0b\xb9\xd3\x69\x12\x65\x7e\x6f\x4d\x6f\x67\x1c\xd1\x75\x31\x67\xa9\x4c\xac\xca\x9d\x18\x08\x45\x62\xed\x6c\x8a\x08\x25\x29\x54\x02\xd8\x75\xe2\x58\x34\x79\x85\x7a\x99\x0d\xd6\x61\xde\x53\xe8\xc8\x51\xff\xf7\x06\xc1\xe8\x42\xc1\x8c\xf9\x52\x66\x64\x72\x0b\x93\xa2\x95\xab\x4e\xe7\x5a\xc3\xf0\x7d\x12\xfa\xfc\x85\x97\xec\x66\x7f\x3d\x35\x06\x80\x26\x52\xc9\xb1\x8e\x60\x7e\xc9\xf9\xa3\x88\xee\x0f\xbe\xbb\x46\x1f\x36\xc4\x44\x5f\x64\x0b\x4f\x51\x46\x43\xff\x51\xe6\x1e\x6b\xd5\x41\xa0\xba\xca\x02\xaa\x74\x62\x91\x9d\x74\xb2\x35\x6d\x48\x64\x52\xbd\x18\xc8\xba\x15\x66\x7b\xef\x47\x2b\x40\x8f\x1c\x7c\x12\xd6\x86\x1f\x68\x53\xee\x30\x4b\x20\xd6\x3c\x76\x3c\x9f\x4c\x1a\xdc\x5f\x15\xf7\xea\x8a\xf3\x1e\x6c\x6a\xed\x34\xaa\x9d\x87\x67\x1f\xb2\x93\xf0\x44\x65\xcf\xd4\xb5\x05\xc0\xda\x06\xa0\xa8\x40\x85\x3c\x19\x9c\x33\xe1\xc7\xf0\xbd\x8b\xa6\x59\x3c\x0e\x15\xfe\x02\x38\xb2\x14\xca\x9d\x7a\xf2\xba\xcf\xe2\x1f\x4f\xc4\xae\x57\x23\x6b\xf8\xae\xdc\xd9\xdd\xee\xf8\x63\x7d\xdb\xae\xf7\x5c\x3f\x62\x55\x8c\x50\xbe\x8e\x23\x8d\x06\xf9\x6d\x33\x58\x6e\xe9\xe7\xe5\x1a\xbe\xa2\x95\x30\x4b\x9c\x2f\x9f\xf6\xe3\xef\x6f\x92\x0c\xae\xb7\xe5\xa1\x58\xc1\x57\xbc\x80\x13\xe6\x46\xaa\x67\x0e\x56\xdb\x5f\x50\x0c\x29\x9a\xed\x96\x39\x7f\xcc\x54\x9f\xb1\xd2\x92\x8c\x61\x60\xb6\xfa\x86\xf8\xc9\x75\x52\x18\xae\xfd\x39\xa9\xab\x92\xd6\x78\x94\x94\x49\x4e\x9e\x9f\x12\xe1\x3e\x7c\x98\x49\x85\xfa\x1f\xe4\x26\x89\xd0\xa7\x9c\x32\x53\x26\xa3\x1e\x92\x61\x55\x8b\x0a\x63\x6e\x07\xc3\x0c\x9c\xfa\xbf\x6e\x95\x76\xe1\xf8\xcd\x65\xf0\xd4\x7d\x9f\x74\x5e\x49\xfe\x17\x00\x00\xff\xff\xdc\x57\xce\x70\x03\x29\x00\x00")

func templatesBodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyGohtml,
		"templates/body.gohtml",
	)
}

func templatesBodyGohtml() (*asset, error) {
	bytes, err := templatesBodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body.gohtml", size: 10499, mode: os.FileMode(420), modTime: time.Unix(1529655491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\xbb\xdf\x00\x00\x00\xff\xff\xd3\x8b\xe8\x22\xbf\x00\x00\x00")

func templatesHeadGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadGohtml,
		"templates/head.gohtml",
	)
}

func templatesHeadGohtml() (*asset, error) {
	bytes, err := templatesHeadGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head.gohtml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1529504948, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/body.gohtml": templatesBodyGohtml,
	"templates/head.gohtml": templatesHeadGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"body.gohtml": &bintree{templatesBodyGohtml, map[string]*bintree{}},
		"head.gohtml": &bintree{templatesHeadGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

