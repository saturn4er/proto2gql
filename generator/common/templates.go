// Code generated by go-bindata.
// sources:
// templates/body.gohtml
// templates/head.gohtml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xe3\x36\x12\x7f\x96\x3e\xc5\x54\xb7\x2d\xa4\x42\xa7\xbc\xfb\xe0\x87\x45\x6e\xb3\xb7\xe8\xed\xb6\xb7\x09\xda\x87\x34\x58\x70\x65\xda\xe6\x59\xa6\x14\x8a\x56\x12\x08\xfa\xee\x07\xfe\x93\x48\x89\xb2\x9d\x64\x71\xe8\x1d\xba\x0f\x69\x42\xcf\x90\xf3\xe7\x37\xc3\xf9\xd1\xbd\xb8\x80\x77\xf4\xb0\xaf\xc3\xb6\x65\x88\x6e\x30\xbc\xc1\xf4\xb0\x87\xc5\x12\xb2\x2b\x52\xe0\x4c\x7e\x08\x7f\xed\xba\x30\x68\x10\x83\xb6\x95\x9f\x67\xbf\x22\x46\xd0\xd7\x02\x7f\x42\x7b\xdc\x75\xb0\x84\xb6\xdd\xdc\x17\xbf\xec\x36\x5d\x97\x7d\xc2\x0f\x42\x2b\xb6\x96\xc4\xdf\x97\x25\x5d\x93\x4d\x1b\x06\x81\x50\x5a\x80\xfe\x17\x99\x2d\xdf\x33\x54\x6d\xff\xf5\x4f\xb5\x63\x94\x86\x41\xd0\xb6\x40\xd6\xca\xa0\xec\xb2\xdc\xef\x31\xe5\xca\x92\x20\xf8\x3b\xae\x73\x46\x2a\x4e\x4a\xba\xe8\x8d\xd2\x32\x5d\xa7\x95\x31\x5d\x69\xf9\x5f\x51\x71\xc0\xf5\x02\x46\x26\xc9\x65\x65\xd7\x47\x54\xb5\x21\x58\xff\xfa\x78\x34\x42\x48\x04\xc4\x78\x2e\xb6\x32\x76\x04\xc2\x7c\x29\x91\x69\xc3\x17\xf0\xc3\xfc\x29\xad\xd4\x51\xe6\x48\xbb\x95\xaa\xfc\x5b\x99\x1d\x18\xb7\xa9\x39\xba\x77\x3d\xfa\x3d\xfa\x3d\x8a\xfa\x93\xa7\x41\x70\xc4\xed\xed\x86\x40\x04\x81\x5a\x6e\xdb\x61\x4d\xac\x74\x49\x38\x2c\x85\xe1\xc5\x05\x7c\xa0\xd5\x81\x43\xf9\xf5\xdf\x38\xe7\x61\xdb\x82\x8e\x86\x5a\x18\xf0\x21\xc5\x7e\x96\x8b\x2e\x4c\x94\xe0\x29\xa0\x58\xea\x36\x5e\xac\x65\x13\x38\x93\x17\x05\x9e\x68\x38\x61\x8c\x1b\x23\x78\x45\x70\xb1\x72\x73\x3e\xd9\x56\xca\x7c\x44\xd5\xcd\xf6\x40\x77\xf1\xfa\x40\xf3\x38\x39\x4b\x01\x5c\xb0\x30\xcc\x0f\x8c\x9e\xa5\xe9\x2a\x3a\x48\x5b\x0b\x11\x89\x34\xed\x9a\x72\x41\x86\x75\xac\x64\x4a\x47\xea\xf8\xb1\x67\x99\x20\x37\xd2\x91\xbc\x79\xaa\x24\xf6\x72\x54\x14\xfa\xcc\x4c\xac\xc1\x9b\x4e\x60\x66\x6a\x9d\x81\x85\xbd\x3a\xfc\xd5\x25\x4a\x47\x22\xa8\x47\xda\x18\x41\x35\x30\x5c\x97\x45\x83\x59\x6d\x81\xc9\xac\x79\xe1\xf4\xd9\x28\xc8\x0d\x45\x6e\x04\xac\x8c\x4a\x76\x75\xa0\xb9\x40\xbe\x72\x3d\xd6\xbd\x22\xbb\x61\x28\xc7\xec\x1d\x15\x98\x5b\x41\xd7\x01\x17\x68\xe4\x72\x55\x85\x45\x49\xa4\xca\xb1\xae\xcb\xf9\xa3\x08\x06\x7f\x54\x9f\x5e\x96\x94\xe3\x47\x9e\x02\x01\x42\x39\x66\x6b\x94\xe3\xb6\x4b\x20\xfe\x22\xb2\x5b\xaa\x40\xf5\x46\xfc\x7c\xe0\xd5\x81\xbf\x97\xcb\x5d\x97\x02\xc3\x8c\x01\x66\xac\x64\x49\x1b\x06\x7e\x9b\x54\xd1\xd5\x15\xa2\xc2\x6d\xce\xb2\x4b\x86\x11\xc7\x97\x5b\x52\xac\xae\x2b\x44\xaf\x58\xb9\xd7\x56\xc4\x39\x7f\x4c\x65\x9a\x67\xdc\x8e\x92\x30\x08\x56\x78\x8d\x19\x88\x0d\xb3\x2b\x42\x49\xbd\x8d\x87\x55\x05\x69\xd9\x76\xc8\x1a\x2a\x61\xde\x62\x09\x0c\xe7\x65\x83\x59\x9c\xfc\x4d\x2d\x7d\xb7\x04\x4a\x0a\x50\xdd\x49\x6e\x74\x8d\xf9\x0d\xda\xc4\x91\xf4\x25\x4a\x21\xe2\xec\x80\xe5\x69\x3e\x81\x2f\x7b\x5c\xd7\x68\x83\xa3\x54\xee\x37\x2b\x56\x73\x94\xef\xa2\x14\x6a\xce\x08\xdd\xc4\x6d\xbb\xc2\x5f\x0f\x1b\x15\xf8\x6b\xf1\x59\x9c\x24\x52\xb9\xd3\x06\xb3\x6f\x6c\x9d\xd8\x2f\x7b\x27\x16\xe3\xe1\xa0\x4e\xc4\xcb\x6a\x88\x64\x0d\x04\x96\xc3\xa1\xba\xb8\x29\x29\x52\xf1\x23\x14\x4a\x88\x6d\x6a\x11\x49\x92\xc5\x7b\x54\xdd\x2a\x87\xee\x6c\xc4\x84\xc1\x17\x58\x82\x90\x53\x2d\x91\xe1\xfa\x50\x70\x58\x02\xc5\x0f\xb1\x81\xd2\x55\xc9\x3e\xe1\x87\x59\x40\x49\xbb\x60\xd2\x1d\x06\x30\x0c\xfd\x41\x86\x4b\x9c\x76\x3b\x74\x05\xd9\x19\xef\x0b\x59\x53\x52\xb4\xeb\xa2\x3b\x27\x9c\x0a\xa1\xa4\x7e\xcb\x18\x7a\x32\xcd\x40\x9d\xee\x94\x7c\x40\x24\x58\xcf\xd9\x3f\x8b\x6f\x47\x71\x10\x11\x14\xbe\x67\xa3\x76\x05\x4b\xd8\xa3\x1d\x8e\x87\xba\xb2\xcf\x17\xe5\x54\x60\x1a\x13\xaa\x32\xb5\x2e\x19\x90\x14\x1a\x54\x48\x04\xcb\x98\x10\xaa\x51\xa1\x2b\x4d\xe9\x9b\xc6\xf1\x1b\xe1\x5b\x99\x6b\x30\x37\x66\x93\x82\xae\x00\xb7\xfd\xc9\xfb\xd7\xa8\x41\xd4\xa0\x22\x12\xdd\x50\x29\x91\x35\x4c\x50\xd8\x83\x42\x02\xac\xce\x7e\x63\xa8\x8a\x23\x8d\xc0\x40\x2b\xfa\xbd\xbe\x25\x77\xb0\x84\xc6\x98\x8d\x8b\x1a\x0f\x57\xfa\x31\x95\xf3\x4d\xb6\xfb\xb0\x31\x67\x7c\xd4\x6c\x4a\x8e\x1d\x13\xe7\x25\xcd\x11\x87\x48\x02\x41\x0c\x23\x73\x48\x10\xc3\xca\x5d\x94\x18\x93\x9c\x19\xa4\x0b\x5d\x0b\x75\x28\x95\x45\xaa\xc4\x3a\xfb\x2e\xb9\xb8\x00\x55\x16\xe6\x2e\xf1\x8e\x23\x6f\xd4\x05\xa2\x24\x5f\x3e\x90\x4c\x67\x11\x77\x0c\x31\xd3\xeb\x91\x01\x24\x08\x3c\xa3\x87\x5a\x6a\xf5\xac\x15\xc8\xeb\x8c\x50\xc2\x55\x73\xf6\x55\xf9\x74\x06\x90\x81\xf4\xfb\x91\xbd\x5d\xad\xac\x4b\x3e\x9e\x8c\x06\xa9\x33\x1a\x48\x51\x05\xe5\xde\x9d\xcc\x72\x20\x08\x8e\x4d\x09\x4a\x42\xa3\x62\xa1\xee\x98\xca\x76\x56\x7f\xf4\x0b\x62\x68\x5f\x27\x10\x5b\xfd\x20\xd5\xd7\xa3\x35\x40\x05\xf2\x47\xfd\x40\x78\xbe\x85\x9a\xe5\xc2\xfb\x2a\xbb\x2e\x0f\x2c\xc7\x59\xcc\x9f\x2a\x9c\x98\xaa\xcb\x51\x8d\xe1\xc7\x69\xc3\x50\x39\x52\x6d\x63\xa1\x65\x45\xe1\x8a\xdd\x96\x6e\xe1\x7a\xfa\x79\x60\x57\xad\x88\xf1\xd0\x4b\x3e\x61\xbc\xba\x44\x35\xb7\xa6\xee\x7e\x83\x3e\xc4\x42\xe0\xa6\xec\xba\xb8\x66\xf9\x50\x51\xc6\x2a\xdd\x19\x13\xe7\xb0\xb6\x75\x0b\x7f\xd8\xf5\xd8\x1e\xa3\x2d\x9c\xb9\x5e\x07\xe7\xcc\xd8\xfc\xcf\xf8\xe8\xb8\xd8\x77\xc9\x21\x81\x6d\xab\x5a\x70\x5f\xc0\x71\x54\x4b\xe4\x40\xb9\x86\x03\xdd\xd1\xf2\x81\x82\xc0\x90\x6e\xce\x0a\xbc\xf2\x5a\xb2\x03\x38\x6e\x38\x1f\x51\x55\x03\xa1\xa7\x9a\x8e\xea\x39\x1f\x51\xf5\x27\x0d\x7a\x36\x0d\x92\xec\x79\x87\x9f\x5e\xc2\x5a\xb4\xcf\x3f\xe1\xa7\x01\xdd\x16\x7f\x09\x7a\x86\x24\x29\xf1\x2b\x4e\x90\xf7\x9f\xf7\x8c\x73\x99\x90\x17\x4c\x67\xb2\x21\x17\x58\x2e\x21\x0a\xfe\x00\x8c\x48\x8c\xbe\x1e\x56\xf4\x13\x7e\x32\x33\xdc\x9d\xe7\x63\x19\xd3\x39\xce\x74\x94\x34\x7d\x4b\xd6\x34\x43\x9b\xa6\xbc\xe9\x6c\xe2\x74\x9a\x9b\x9c\x4b\x9d\x5e\xc5\x9d\x74\x97\xf4\xb2\xa7\xd7\x9a\x38\xe1\x4f\xea\x30\xc9\xa0\x9c\x66\x3d\xe6\x50\x9e\x4b\x57\x8a\x51\x4d\xa2\x26\x9c\x41\xd3\xa5\x85\xe6\x08\xdf\x00\x69\x62\x57\x4d\x22\x88\x97\x45\x08\xbe\x46\xc4\x2f\xfa\x53\x21\x75\x84\xde\x05\xc1\x2e\x85\x46\x08\x36\xa8\xb8\x95\x9d\xec\x2e\x55\xbf\xab\xae\x73\x27\x37\x4d\x41\xec\xbb\x4b\x9b\xb0\xbf\x76\x6d\xf3\xa7\x64\xc5\xdc\x76\xbb\xdd\x84\xad\xf8\x14\x21\xda\x0d\x93\xbf\x97\xab\xcc\x5f\x97\x82\xb6\xac\x63\xcc\x58\x0a\xd1\x1a\x11\x51\x68\xbc\x34\xbd\x09\xfe\xf2\xfd\x4a\x54\x38\xe0\x02\xcb\xf7\x47\xe1\x61\x0a\xc4\xca\xfb\xe8\x86\xdf\xed\x9e\x63\xac\x73\xb7\x8f\x02\xe3\xd0\x8e\x69\x68\x9a\x29\x91\xf3\xab\x42\xd4\xfc\x97\x82\xa3\x52\x7e\x34\x3c\x4d\xf3\x3c\x83\x9d\x00\xa9\x7a\xb8\xdd\xed\xee\x96\x4d\xa3\xab\xc7\x43\x9c\xdc\x41\xa6\xbf\x7c\xca\xd3\xfc\xa9\xbf\x71\xfe\x00\x0c\xca\x10\x83\x79\x1e\x35\x3c\x5b\x4f\xa9\xd4\x99\x0c\x49\xc1\xd9\xcf\x8a\xb4\x85\x52\x24\x9c\xb0\xa1\xb9\xe9\x43\x8a\xbe\x9a\x16\xc9\x26\x3c\x66\x41\x47\xba\x90\x9f\xe7\xf8\x48\x8e\x61\xfe\x66\x06\xd7\x4d\x2b\xb3\x5e\x60\x06\xd7\xfa\xb6\xd9\xeb\x4b\xff\xf4\xe4\x7c\x66\x8c\x4d\x55\x1c\x8d\xb2\x16\xfa\x7f\x8e\xb3\xbe\x10\x3c\x91\x76\xaf\xa8\x69\xac\x3b\xfb\x7b\x99\x8b\x0b\xb8\xc6\xac\x21\x39\xb6\x6b\xb8\x56\x4b\x43\x11\x1b\x19\x6b\x4e\x7c\x8f\x79\xdb\x1a\x49\xcd\xf4\xb5\xd8\x47\xcc\xb7\xe5\xaa\x8e\x73\x8b\x3b\x1a\xc1\x4b\x54\x14\x1f\x4c\x1c\xc4\xb0\x46\xb6\x82\x7e\xcb\xd0\xe4\xb8\xe2\x7d\xb3\xfc\x30\xac\xfc\x03\xd1\x55\x81\x45\xc3\x98\x99\x3f\xd3\x99\x01\xd4\xcc\x9f\xc9\xb4\xde\xc1\x9a\x0c\x8d\x6d\xda\xee\xa1\x41\x8e\xb9\xc7\xd0\x2a\x84\xae\x0e\xd6\x5e\x6a\xc9\x07\x96\x99\x8d\xd4\x77\x7a\x4a\xce\xff\xc5\x8a\xf5\x7a\x62\x37\x33\x57\x45\x7f\xfb\x36\x82\xb4\x96\xf9\x2c\x5b\xb6\xfb\x9e\xd2\x3b\xa8\x65\xde\xb2\xcd\x41\x5c\x2d\xb5\xcd\xa0\xdf\xb2\x8d\xa7\x1f\xaa\x72\x33\x0a\xc2\xb2\xf1\xb7\x38\xf6\x13\x13\x62\x1b\xe9\xff\xb1\x73\x54\x10\x10\xdb\xf8\x23\x60\x74\xbc\xd4\x49\x68\x59\x64\x29\x98\x7b\xaf\x08\x6c\xc7\xdd\x8f\x9e\x51\xdc\x5f\xc0\x29\x6f\x8b\x4d\x0c\x4f\x3e\x47\x39\x45\x3f\xf5\x9e\x26\x16\xd5\x40\x86\xa2\x49\x39\x65\x63\x08\x80\xb9\xd4\xcd\x68\x3d\x4f\x3a\xac\xcf\x6c\xe6\x11\xcc\x0f\xf2\x67\x4e\xf3\x2f\x19\xe9\xed\xa7\x96\x7e\xb8\xd7\x71\x1c\x65\x50\x8c\xf9\xdb\xe9\x0b\x9b\x0b\xe4\xcf\xf8\xfe\x80\xeb\x9e\xbe\xda\x5c\xcc\x85\xdc\xe9\x34\x89\x32\xbf\xb7\x66\xbf\x33\x8e\xe8\xba\x98\xb3\x54\x26\x56\xe5\x4e\x8c\x93\x22\xb1\x76\x36\x45\x84\x92\x14\x2a\x01\xec\x3a\x71\x2c\x9a\xbc\x61\xbd\xcc\x06\xeb\x30\xef\x29\x74\xe4\xa8\xff\x5b\x87\x60\x74\xe3\x60\xc6\x7c\x29\x33\x32\xb9\x85\x49\xd1\xca\x55\xa7\x73\xad\x61\xf8\x3e\x09\x7d\xfe\xc2\x4b\x76\xb3\xbf\xdc\x1a\x03\x40\xdf\x71\xc9\xb1\x8e\x60\x7e\xc9\xf9\xa3\x88\xee\x0f\xbe\xbb\x46\x1f\x36\xc4\x44\x5f\x64\x0b\x4f\x51\x46\x43\xff\x51\xe6\x1e\x6b\xd5\x41\xa0\xba\xca\x02\xaa\x74\x62\x91\x9d\x74\xb2\x35\x6d\x48\x64\x52\xbd\x37\xc8\xba\x15\x66\x7b\xef\x47\x2b\x40\x8f\x1c\x7c\x12\xd6\x86\x1f\x68\x53\xee\x30\x4b\x20\xd6\x2c\x78\x3c\xc0\x4c\x1a\xdc\x9f\x15\xf7\xea\x8a\xf3\x1e\x6c\x6a\xed\x34\xaa\x9d\x67\x6b\x1f\xb2\x93\xf0\x44\x65\xcf\xd4\xb5\x05\xc0\xda\x06\xa0\xa8\x40\x85\x3c\x19\x9c\x33\xe1\xc7\xf0\xbd\x8b\xa6\x59\x3c\x0e\x15\xfe\x02\x38\xb2\x14\xca\x9d\x7a\x30\xbb\xcf\xe2\x1f\x4f\xc4\xae\x57\x23\x6b\xf8\xae\xdc\xd9\xdd\xee\xf8\x53\x7f\xdb\xae\xf7\x5c\x3f\x81\x55\x8c\x50\xbe\x8e\x23\x8d\x06\xf9\x5d\x35\x58\x6e\xe9\xc7\xe9\x1a\xbe\xa2\x95\x30\x4b\x9c\x2f\xbf\x18\x88\xbf\xbf\x49\x32\xb8\xde\x96\x87\x62\x05\x5f\xf1\x02\x4e\x98\x1b\xa9\x9e\x39\x58\x6d\x7f\xbd\x31\xa4\x68\xb6\x5b\xe6\xfc\x31\x53\x7d\xc6\x4a\x4b\x32\x86\x81\xd9\xea\x1b\xe2\x27\xd7\x49\x61\xb8\xf6\xe7\xa4\xae\x4a\x5a\xe3\x51\x52\x26\x39\x79\x7e\x4a\x84\xfb\xf0\x61\x26\x15\xea\x7f\xaf\x9b\x24\x42\x9f\x72\xca\x4c\x99\x8c\x7a\x48\x86\x55\x2d\x2a\x8c\xb9\x1d\x0c\x33\x70\xea\xff\xba\x55\xda\x85\xe3\x17\x9b\xc1\x53\xf7\x75\xd3\x79\x63\xf9\x4f\x00\x00\x00\xff\xff\x2e\x4f\x38\x9c\x41\x29\x00\x00")

func templatesBodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyGohtml,
		"templates/body.gohtml",
	)
}

func templatesBodyGohtml() (*asset, error) {
	bytes, err := templatesBodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body.gohtml", size: 10561, mode: os.FileMode(420), modTime: time.Unix(1529598143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\xbb\xdf\x00\x00\x00\xff\xff\xd3\x8b\xe8\x22\xbf\x00\x00\x00")

func templatesHeadGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadGohtml,
		"templates/head.gohtml",
	)
}

func templatesHeadGohtml() (*asset, error) {
	bytes, err := templatesHeadGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head.gohtml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1529504948, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/body.gohtml": templatesBodyGohtml,
	"templates/head.gohtml": templatesHeadGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"body.gohtml": &bintree{templatesBodyGohtml, map[string]*bintree{}},
		"head.gohtml": &bintree{templatesHeadGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

