// Code generated by go-bindata.
// sources:
// templates/body.gohtml
// templates/head.gohtml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x73\xdb\x36\x12\x7f\x26\x3f\xc5\x96\xd7\x66\xc8\x1b\x1e\x7d\xcf\xea\xe8\x21\xe3\x8b\x73\x99\x5e\x92\x5e\xed\x69\x1f\x5c\x8f\x07\xa1\x20\x09\x27\x0a\xa4\x41\x8a\xb6\x87\xc3\xef\x7e\x83\x7f\x24\x40\x82\x94\x94\x38\xd3\x76\x26\x7e\x48\x25\x70\x01\x2c\x76\x7f\xbb\xd8\xfd\x51\xbd\xb8\x80\x37\xf4\xb0\x2f\xfd\xa6\x61\x88\x6e\x30\x7c\x8f\xe9\x61\x0f\x8b\x25\x24\x57\x24\xc3\x89\x78\x08\xff\x68\x5b\xdf\xab\x11\x83\xa6\x11\xcf\x93\x5f\x11\x23\xe8\x53\x86\x3f\xa0\x3d\x6e\x5b\x58\x42\xd3\x6c\x1e\xb2\x9f\x77\x9b\xb6\x4d\x3e\xe0\x47\x3e\x2b\x34\x86\xf8\xf7\xcb\x9c\xae\xc9\xa6\xf1\x3d\x8f\x4f\x5a\x80\xfa\x0b\xf4\x92\x6f\x19\x2a\xb6\xff\xfd\x8f\x5c\x31\x88\x7d\xcf\x6b\x1a\x20\x6b\xa9\x50\x72\x99\xef\xf7\x98\x56\x52\x13\xcf\xfb\x17\x2e\x53\x46\x8a\x8a\xe4\x74\xd1\x29\xa5\x64\xda\x56\x4d\xc6\x74\xa5\xe4\x7f\x45\xd9\x01\x97\x0b\x18\xa8\x24\x86\xa5\x5e\xef\x51\xd1\xf8\x60\xfc\x75\xf6\xa8\xb9\x10\x37\x88\x3e\x39\x5f\x4a\xeb\xe1\x71\xf5\x85\x44\xa2\x14\x5f\xc0\xab\xe9\x5d\x1a\x31\x47\xaa\x23\xf4\x96\x53\xc5\x77\xa9\xb6\xa7\x8f\x4d\xf5\xd6\xdd\xd1\x83\xdf\x83\xdf\x83\xa0\xdb\x79\x6c\x04\x4b\xdc\x5c\xae\x37\x84\xe7\xc9\xe1\xa6\xe9\xc7\xf8\x48\x1b\xf9\xfd\x90\xef\x5f\x5c\xc0\x3b\x5a\x1c\x2a\xc8\x3f\xfd\x0f\xa7\x95\xdf\x34\xa0\xac\x21\x07\x7a\x7c\x08\xb1\x8f\x62\xd0\x86\x89\x14\x3c\x06\x14\x63\xba\x89\x17\x63\x58\x1b\x4e\xfb\x45\x82\x27\xe8\x77\x18\xe2\x46\x0b\x5e\x11\x9c\xad\x6c\x9f\x8f\x96\x15\x32\xef\x51\x71\xb3\x3d\xd0\x5d\xb8\x3e\xd0\x34\x8c\x4e\x9a\x00\x36\x58\x18\xae\x0e\x8c\x9e\x34\xd3\x9e\x68\x21\x6d\xcd\x45\x04\xd2\xd4\xd1\xe4\x11\x84\x59\x87\x93\x74\xe8\x88\x39\x6e\xec\x19\x2a\x88\x85\x94\x25\x6f\x9e\x0b\x81\xbd\x14\x65\x99\xda\x33\xe1\x63\xf0\x7d\xcb\x31\x33\xd6\x4e\xc3\xc2\x1c\xed\xbf\xb5\x91\x9c\x23\x10\xd4\x21\x6d\x88\xa0\x12\x18\x2e\xf3\xac\xc6\xac\x34\xc0\xa4\xc7\x9c\x70\xfa\x45\x4f\x10\x0b\x72\xdf\x70\x58\xe9\x29\xc9\xd5\x81\xa6\x1c\xf9\xf2\xe8\xa1\xca\x15\xc9\x0d\x43\x29\x66\x6f\x28\xc7\xdc\x0a\xda\x16\x2a\x8e\xc6\x4a\x8c\x4a\xb3\x48\x89\x58\x1e\xac\x6d\xd3\xea\x89\x1b\xa3\x7a\x92\x4f\x2f\x73\x5a\xe1\xa7\x2a\x06\x02\x84\x56\x98\xad\x51\x8a\x9b\x36\x82\xf0\x9e\x7b\x37\x97\x86\xea\x94\xf8\x78\xa8\x8a\x43\xf5\x56\x0c\xb7\x6d\x0c\x0c\x33\x06\x98\xb1\x9c\x45\x8d\xef\xb9\x75\x92\x41\x57\x16\x88\xf2\x63\x57\x2c\xb9\x64\x18\x55\xf8\x72\x4b\xb2\xd5\x75\x81\xe8\x15\xcb\xf7\x4a\x8b\x30\xad\x9e\x62\xe1\xe6\x89\x63\x07\x91\xef\x79\x2b\xbc\xc6\x0c\xf8\x82\xc9\x15\xa1\xa4\xdc\x86\xfd\xa8\x84\xb4\x48\x3b\x64\x0d\x05\x57\x6f\xb1\x04\x86\xd3\xbc\xc6\x2c\x8c\x7e\x94\x43\xdf\x2d\x81\x92\x0c\x64\x76\x12\x0b\x5d\xe3\xea\x06\x6d\xc2\x40\x9c\x25\x88\x21\xa8\xd8\x01\x07\x91\x3d\x7e\xbf\xc7\x65\x89\x36\x38\x88\xc5\x32\xc3\xa7\x65\x85\xd2\x5d\x10\x43\x59\x31\x42\x37\x61\xd3\xac\xf0\xa7\xc3\x46\x9a\xf9\x9a\x3f\x0b\xa3\x88\x6b\xea\xb5\x4a\x3d\xf6\x32\xba\xf0\x65\x92\x37\x7c\x30\xec\xd7\x6f\xb9\x51\x8c\xac\x47\xd6\x40\x60\xd9\xef\xa5\x22\x98\x92\x2c\xe6\xff\xf8\x7c\x12\x62\x9b\x92\x9b\x8b\x24\xe1\x1e\x15\xb7\xf2\x1c\x77\x26\x2c\x7c\xef\x1e\x96\xc0\xe5\x64\xde\x63\xb8\x3c\x64\x15\x2c\x81\xe2\xc7\x50\xe3\xe5\x2a\x67\x1f\xf0\xe3\x24\x6a\x84\x5e\x30\x4a\x01\xbd\xc7\xfb\x24\x20\xac\xc4\x77\xbb\xed\x43\x5f\xa5\x3f\x11\x38\x42\x54\x21\xe3\xce\xb2\xa4\x84\x22\x29\x5f\x33\x86\x9e\x75\xd4\x4b\x0d\xba\x9b\x81\x08\x40\x9e\xba\x7c\x12\xde\x0e\x4c\xe1\x71\x2b\xf2\xf3\x27\xdd\x6c\x79\x52\x63\x1e\x2c\x61\x8f\x76\x38\xec\x63\xc9\x54\x85\x87\x50\x86\x69\x48\xa8\x74\x9c\xb7\xce\x19\x90\x18\x6a\x94\x09\xd8\x0a\x1b\x11\xaa\xc0\xa1\xe3\x4b\xae\xa0\xd3\xc5\x6f\xa4\xda\x0a\xe7\x43\x77\x4f\xd6\x31\x28\xe0\xdb\x59\x4f\x5c\xbb\x7a\x1e\x04\x35\xca\x02\x9e\x04\xd5\x2c\xb2\x86\x11\x1e\x3d\x1b\x28\x4d\x23\xb0\x57\x4a\x4c\xff\xc6\x50\x11\x62\xc6\x62\x08\xd6\x88\xf0\x50\xaf\x72\x9d\xf6\x80\x18\xc9\x10\xc4\xf6\x41\xa4\x96\xd4\x1b\x1e\x35\xde\x2d\xb9\x83\x25\xd4\xfd\xb5\x9e\x95\xd8\x28\x07\x4e\x9c\x7f\x86\x0d\x86\xa5\x83\xef\xd8\xf7\x44\x27\x9c\xe6\x83\x30\xcd\x69\x8a\x2a\x08\x04\x0a\x79\xb5\x33\x07\x43\x5e\x11\xdd\x05\x51\xaf\xaf\xdb\x65\x2f\xee\x31\xb5\xdb\x29\x60\xaf\x7d\xa7\xaf\x4e\x99\xfa\xf5\xec\x64\xbb\xd5\xfa\xd6\xfa\xd6\xf7\xae\x34\xc9\x29\xce\xd7\x76\x5e\xfa\x48\xf1\xc7\xb5\x95\x9c\x3a\x69\x42\x57\xf8\x29\xb6\x0a\x1a\x3e\xdf\x4e\x65\x5e\xd3\x70\x7f\x3d\x28\x71\xf8\xa7\x1e\x27\x6b\x38\x96\x7e\xee\x63\xc8\x77\xe7\x64\xab\x1f\xb9\xfc\xab\x57\xc7\x17\xee\xc1\x33\x2e\x84\x66\x81\x3e\x55\xa4\x9d\x07\xfc\x79\x37\xde\x2b\x27\xba\xf6\x19\x62\xdf\x25\x63\x94\xaa\xe7\x46\x43\xce\xbd\x6d\x45\xc3\x51\x5b\x06\x91\x53\x89\xb1\xfa\x66\x78\x38\x4d\xf8\x75\xad\xe7\xae\x70\x47\x2e\x7f\x5d\x96\x64\x43\x09\xdd\x70\x3b\x15\x78\xda\xe3\x7d\x70\x4b\xd4\x1f\x0f\xee\xd1\xd2\x41\x1d\x4c\xa8\x3a\x6f\xa9\x53\xb6\xae\x9d\xab\xf6\xf9\xa0\x6d\x1a\xbd\x87\xdc\xec\x5b\x3c\x7e\x8b\x47\xdb\x84\xdf\xe2\xf1\x44\x4b\xbd\x54\x3c\xea\xae\x5a\x11\x37\xf2\x6a\x96\x1f\x7c\x5d\xdf\xc8\xbd\x64\xf7\xd2\x9a\xbd\xf8\xc5\x05\xc8\x7d\x75\x2f\xee\xa4\x73\xbe\x97\x0d\xb8\x94\xfc\x7c\x42\x67\xcc\xe5\xd8\x34\x8e\x66\xff\x66\x08\x1c\xcf\x73\x50\x37\x72\xa8\x51\x5c\x95\x27\xe8\x00\x42\x49\x25\x9b\x5b\x57\x03\x35\xe6\x50\x44\xcd\xe1\x3e\x47\xf2\x7a\xb5\x32\x48\x92\x70\x44\xad\xc4\x16\xb5\x22\x44\x65\x7d\xd9\x1f\xc7\x96\x17\x0f\xe7\xb8\x16\x29\xa1\x62\x66\x21\x3b\xf5\xc2\x3c\xb2\x7a\xf4\x33\x62\x68\x5f\x46\x10\x1a\xdd\x56\xac\x48\x06\x23\xaf\x78\xe2\x9f\xf2\x91\x54\xe9\x16\x4a\x96\x72\x1b\x14\xc9\x75\x7e\x60\x29\x4e\xc2\xea\xb9\xc0\x91\x2e\x88\x53\x54\x62\xf8\x7b\xdf\x82\x69\x3f\xa8\x1e\x6c\xa1\x5b\x1d\xb2\x16\x0b\x2d\x07\x1d\xd0\xb8\x57\xb6\xfb\x18\x59\xd8\x69\x73\x60\xbc\xba\x44\x65\x65\xf4\x29\xdd\x02\x9d\xcd\xb8\xc0\x4d\xde\xb6\x61\xc9\xd2\xbe\x28\x7e\x9b\x1b\xe4\x55\xdb\x46\xd6\x66\xfd\x25\x35\x5c\x75\x6e\x8d\xc1\x12\x56\x77\xa3\xec\x72\xdc\x2c\x7f\x99\xe3\x59\xa7\xeb\x3a\x8f\xa9\xeb\xe6\x03\x7e\x0c\x83\x52\xe0\x05\xf2\x35\x1c\xe8\x8e\xe6\x8f\x14\x38\x72\x54\xe3\x23\x21\x2b\x5a\x7d\xd3\x76\xc3\x64\xf3\x1e\x15\xa5\xd5\x3d\xb9\x13\x8e\xcc\x37\xef\x51\xf1\x8d\x42\x86\x73\x29\x64\xee\x8d\x60\x87\x9f\x3f\x87\xf1\x55\x67\xfe\x09\x3f\x4b\xc9\x01\xf7\xeb\x69\x85\x02\xf1\x3a\xe1\x0b\x76\x10\x35\x81\x73\x0f\xfd\x77\x8c\x45\x76\x82\xe9\x44\x26\xd9\x06\x96\x4d\x26\x7b\x7f\x02\x36\x79\x8f\x8a\x5b\x07\xa3\xfc\x13\x7e\xd6\x09\xe7\xce\xf1\x58\xd8\x74\x8a\x6f\x9e\x25\x9c\x5f\x92\x71\x9e\xa0\x9c\xc7\x9c\xf3\xc9\xa4\xf3\x1f\xc0\x3a\xab\x8c\xe8\xe4\x9d\x5f\x88\x78\x96\x5b\x08\xea\xd9\x4a\xc7\x43\xf2\xd9\x71\xa3\x0a\x31\xaa\xd8\xe7\x11\xd3\xaa\x78\xe6\x85\x62\x53\x5f\x00\x4b\x7c\x55\xc5\xb6\x12\x27\xdd\x7a\x0f\x4b\x20\xfc\x83\x7a\xca\xa5\x66\x78\x71\xcf\xdb\xc5\xb2\x51\xa8\x51\x76\x2b\x72\xd5\x5d\x2c\x3f\xcb\xbc\x72\x27\x16\x8d\x81\xaf\xbb\x8b\xeb\x8e\x10\xb2\xd4\x77\xb7\x75\xdc\xb2\xbb\xdd\xa8\x8f\x73\x4d\x84\x60\xd7\xf3\x99\x4e\x7a\x70\xbe\xff\x5a\x4f\x36\x60\x7f\xfb\x61\xc5\x63\x18\x70\x86\xc5\xdb\x59\x7e\xc2\x18\x48\x64\x32\xa5\xd6\x1d\xbe\xdb\x9d\xa3\xac\x75\x7b\x0f\x0c\x63\x35\x5b\x63\xd3\xd4\xe3\x16\xd7\x3d\xb5\x6b\x6b\xbe\xba\x71\xa4\xcb\x67\xcd\x53\xd7\xe7\x29\x6c\x19\x48\xc6\xc3\xed\x6e\x77\xb7\xac\x6b\x15\x3d\x8e\xb6\xc8\x2e\x55\xba\xeb\x25\x3f\xde\x1d\x75\x77\xca\x9f\xa0\x3f\xd2\x05\xff\x74\x97\xd4\xbf\xd4\x1f\x37\x4a\x27\xf6\x3f\x12\xce\xee\x9e\x47\x69\x28\x44\xfc\x51\x97\x33\x55\x5f\x08\xd1\x2f\x6e\x77\x44\x72\x1e\x76\x37\x33\x59\xc8\xdd\xc4\xb8\x3a\x98\xd6\xb7\xab\xec\x2e\x69\x29\x01\x71\x00\x55\xfc\x9e\x68\x44\x0d\xfb\x59\x33\x2a\xa1\x49\x43\x3a\xca\xa8\xbf\x9e\x29\x55\xce\x1f\x1b\xb3\x35\x7f\x77\x72\x71\x01\xd7\x98\xd5\x24\xc5\x66\x14\x96\x72\xa8\x0f\x43\x2d\x63\xd4\x72\x6f\x71\xd5\x34\x5a\x52\xf5\xe0\x4a\xec\x3d\xae\xb6\xf9\xaa\x0c\x53\xa3\xb5\xd3\x82\x97\x28\xcb\xde\xe9\x63\xf2\x82\x8a\x6c\x79\x63\x2c\x4e\x9e\xe2\xa2\xea\xd2\xdd\xbb\x7e\xe4\xdf\x88\xae\x32\xcc\x60\xb2\x46\x8c\x27\x8a\x44\x5d\x23\x46\xe3\x88\x05\xa3\x7a\xd3\xba\x29\xbd\xfb\x14\x37\xec\x0f\xfa\x60\x37\x5e\xbd\xec\xc5\x2c\x41\x80\x4c\x2c\x24\x7f\xb3\x24\xe5\xdc\x3f\x1c\x31\xd8\x0d\x33\x1d\xd9\x53\xd4\xaf\x8b\x06\x98\x55\x32\x2a\x65\xc9\x64\x69\x13\x1e\xdd\x39\x95\xe8\x6b\xb6\x39\xf0\x3b\xa2\x34\x9b\xdd\xd7\x6c\xe3\x48\x6c\x32\xac\xf4\x04\xae\xe0\x90\x39\x33\x99\x20\xc4\x36\xc2\x0c\x73\xfb\x48\x5b\x20\xb6\x71\x1b\x42\xcf\x71\x76\x39\x7c\x96\xd1\xd7\x78\x53\xac\x82\x67\x1e\xdc\x7e\x74\x46\x08\xdf\x83\x15\xc4\x46\xe1\xdf\x13\x33\xb3\xe5\x7f\x57\xd6\x1e\xef\x01\x8a\xbe\x6f\x09\x46\x51\x95\x0c\x91\x00\xfa\x76\xee\x5e\x68\x4f\xf6\x07\xc6\x33\xb3\x49\xf0\xa6\xeb\xf0\x97\x2c\xc6\x4d\x1a\xa4\x2b\xcb\x5d\x54\x89\x2c\xd0\xb7\x63\xe2\xcb\x46\xee\x2f\xf8\xe1\x80\xcb\xae\xb5\x34\xfb\x24\x1b\x63\xc7\xfd\xc2\xc3\xfb\xc1\xa8\xda\x4e\xd8\xa2\x6d\xc3\x8a\xc5\xc2\x93\xd2\x59\xbc\x10\xe4\x9e\x34\xdd\xc7\x2d\x17\xc5\x50\x70\x24\x97\x91\xa5\xd1\x88\x5f\xfa\x3c\x1d\x8c\xcd\x9c\xbb\xd0\xc1\x41\x27\x7e\x55\x31\xb8\x48\x30\x63\x2e\x97\x69\x99\xd4\x00\x21\x4f\xe1\x32\xc3\xd9\xda\x30\xfc\x10\xf9\xae\xf3\xc2\xe7\xac\xe6\xfa\x3d\x8f\x6d\x1f\xd5\x46\x45\x73\x89\x40\x7f\x48\xab\x27\x6e\xe3\x57\xae\x9b\x46\x6d\xd9\x5b\x46\x5d\x63\x0b\x47\x2c\x06\x7d\xda\x91\x4a\xcf\x25\x6a\xcf\x93\xc9\x64\x01\x45\x3c\xd2\xc8\x74\x3d\xd9\xea\xec\xc3\xfd\x29\x19\x01\x11\xae\x5c\x6d\xe7\xed\x68\x98\xe9\xa9\x02\x97\x84\xb1\xe0\x3b\x5a\xe7\x3b\xcc\x22\x08\x55\x17\x3b\xac\x4e\x46\x79\xed\xe5\xe3\xce\xf5\xae\x66\x74\x97\xf4\x34\xee\x1f\x14\x8d\x67\x6d\x7f\x66\x20\x3a\xf7\xd4\x21\x78\x2a\xd8\x2d\xbe\xd9\x05\xf8\xc8\x77\x87\x3d\x0c\x82\x1d\x0c\x20\x96\x26\x10\x79\x3c\x4a\x04\x0a\x84\x9e\x08\x43\x86\x1f\x6c\x54\x4d\xe2\xb2\x8f\xf7\xcf\x80\x25\xd3\x6f\xbd\x19\x7e\x48\x8c\x9f\xb4\x39\x6d\xd5\xcd\x22\x6b\xf8\x2e\xdf\x99\xa9\x6f\x9e\x93\x6f\x9a\xf5\xbe\x52\xfc\x55\xc1\x08\xad\xd6\x61\xa0\x30\x20\x5e\xb7\x83\x71\x2a\x65\xd7\x12\x3e\xa1\x15\xd7\x8a\xef\x2f\x18\xfc\xf0\x87\x9b\x28\x81\xeb\x6d\x7e\xc8\x56\xf0\x49\x54\x31\x73\xda\x06\x32\x7f\xf6\x4a\x9b\xaf\x21\x7a\x07\x4d\x66\xce\xb4\x7a\x4a\x64\xb6\x31\x9c\x12\x0d\x5f\x65\xe8\xa5\xbe\x04\x2e\xa9\xf2\x01\xc3\xa5\xd3\x05\x65\x91\xd3\x12\x0f\x7c\x30\x72\xc1\xf9\x1e\xe0\xc7\x85\x77\x13\x96\x97\xff\xcb\xc0\xc8\xee\x7d\x09\x3f\xa7\xa5\xb0\x7d\xd9\xdb\xde\x08\x0d\x69\xb5\xd4\x34\x9a\x2e\x2e\xd5\x7f\x07\xaf\x8e\xfd\x21\xcd\xd2\x1f\xd4\xa6\x24\x2d\x62\xe4\xff\x01\x00\x00\xff\xff\x34\x73\xd9\x9e\x14\x32\x00\x00")

func templatesBodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyGohtml,
		"templates/body.gohtml",
	)
}

func templatesBodyGohtml() (*asset, error) {
	bytes, err := templatesBodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body.gohtml", size: 12820, mode: os.FileMode(420), modTime: time.Unix(1529760909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\xbb\xdf\x00\x00\x00\xff\xff\xd3\x8b\xe8\x22\xbf\x00\x00\x00")

func templatesHeadGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadGohtml,
		"templates/head.gohtml",
	)
}

func templatesHeadGohtml() (*asset, error) {
	bytes, err := templatesHeadGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head.gohtml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1529760909, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/body.gohtml": templatesBodyGohtml,
	"templates/head.gohtml": templatesHeadGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"body.gohtml": &bintree{templatesBodyGohtml, map[string]*bintree{}},
		"head.gohtml": &bintree{templatesHeadGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

