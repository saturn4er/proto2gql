// Code generated by go-bindata.
// sources:
// templates/body.gohtml
// templates/head.gohtml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x6f\xdb\x38\xf2\x7f\x96\xfe\x8a\x59\x7d\xbb\x85\xf4\x85\x56\xb9\xe7\x2c\xfc\x10\xe4\x9a\x5e\xb1\xd7\x1f\xd7\x04\xbb\x0f\xd9\x20\x60\x65\xda\xe6\x59\xa6\x14\x4a\x76\x12\x08\xfa\xdf\x0f\xfc\x25\x91\x12\x25\xcb\xdd\xf4\x6e\x17\xa8\x1f\xda\x98\x1a\x0e\x87\xc3\xcf\x0c\x67\x3e\xd6\xd9\x19\xbc\xa1\xfb\x5d\xe9\xd7\x35\x43\x74\x8d\xe1\x15\xa6\xfb\x1d\x9c\x2f\x20\xb9\x22\x19\x4e\xc4\x43\xf8\xa9\x69\x7c\xef\x80\x18\xd4\xb5\x78\x9e\xfc\x8a\x18\x41\x5f\x32\xfc\x01\xed\x70\xd3\xc0\x02\xea\x7a\xfd\x90\x7d\xda\xae\x9b\x26\xf9\x80\x1f\xf9\xac\xd0\x18\xe2\xdf\x2f\x73\xba\x22\xeb\xda\xf7\x3c\x3e\xe9\x1c\xd4\x27\xd0\x2a\xdf\x32\x54\x6c\xfe\xf5\x4f\xa9\x31\x88\x7d\xcf\xab\x6b\x20\x2b\x69\x50\x72\x99\xef\x76\x98\x56\xd2\x12\xcf\xfb\x3b\x2e\x53\x46\x8a\x8a\xe4\xf4\xbc\x35\x4a\xc9\x34\x8d\x9a\x8c\xe9\x52\xc9\xff\x8a\xb2\x3d\x2e\xcf\xa1\x67\x92\x18\x96\x76\xbd\x47\x45\xed\x83\xf1\x69\xfd\x71\xe0\x42\xdc\x21\x7a\xe7\x5c\x95\xb6\xc3\xe3\xe6\x0b\x89\x44\x19\x7e\x0e\xaf\xc7\x57\xa9\xc5\x1c\x69\x8e\xb0\x5b\x4e\x15\xdf\xa5\xd9\x9e\xde\x36\xd5\x4b\xb7\x5b\x0f\x7e\x0f\x7e\x0f\x82\x76\xe5\xa1\x13\x2c\x71\x53\x5d\xe7\x08\xcf\x93\xc3\x75\xdd\x8d\xf1\x91\x26\xf2\xbb\x21\xdf\x3f\x3b\x83\x77\xb4\xd8\x57\x90\x7f\xf9\x37\x4e\x2b\xbf\xae\x41\x79\x43\x0e\x74\xf8\x10\x62\x1f\xc5\xa0\x0d\x13\x29\x78\x0c\x28\xc6\x74\x13\x2f\xc6\xb0\x76\x9c\x3e\x17\x09\x9e\xa0\x5b\xa1\x8f\x1b\x2d\x78\x45\x70\xb6\xb4\xcf\x7c\xa0\x56\xc8\xbc\x47\xc5\xcd\x66\x4f\xb7\xe1\x6a\x4f\xd3\x30\x9a\x35\x01\x6c\xb0\x30\x5c\xed\x19\x9d\x35\xd3\x9e\x68\x21\x6d\xc5\x45\x04\xd2\xd4\xd6\xe4\x16\x84\x5b\xfb\x93\x74\xe8\x88\x39\x6e\xec\x19\x26\x08\x45\xca\x93\x37\xcf\x85\xc0\x5e\x8a\xb2\x4c\xad\x99\xf0\x31\x78\xd5\x70\xcc\x0c\xad\xd3\xb0\x30\x47\xbb\x6f\x4d\x24\xe7\x08\x04\xb5\x48\xeb\x23\xa8\x04\x86\xcb\x3c\x3b\x60\x56\x1a\x60\xd2\x63\x4e\x38\x7d\xd6\x13\x84\x42\x7e\x36\x1c\x56\x7a\x4a\x72\xb5\xa7\x29\x47\xbe\xdc\x7a\xa8\x72\x45\x72\xc3\x50\x8a\xd9\x1b\xca\x31\xb7\x84\xa6\x81\x8a\xa3\xb1\x12\xa3\xd2\x2d\x52\x22\x96\x1b\x6b\x9a\xb4\x7a\xe2\xce\xa8\x9e\xe4\xd3\xcb\x9c\x56\xf8\xa9\x8a\x81\x00\xa1\x15\x66\x2b\x94\xe2\xba\x89\x20\xbc\xe7\xa7\x9b\x4b\x47\xb5\x46\x7c\xdc\x57\xc5\xbe\x7a\x2b\x86\x9b\x26\x06\x86\x19\x03\xcc\x58\xce\xa2\xda\xf7\xdc\x36\xc9\xa0\x2b\x0b\x44\xf9\xb6\x2b\x96\x5c\x32\x8c\x2a\x7c\xb9\x21\xd9\xf2\xba\x40\xf4\x8a\xe5\x3b\x65\x45\x98\x56\x4f\xb1\x38\xe6\x91\x6d\x07\x91\xef\x79\x4b\xbc\xc2\x0c\xb8\xc2\xe4\x8a\x50\x52\x6e\xc2\x6e\x54\x42\x5a\xa4\x1d\xb2\x82\x82\x9b\x77\xbe\x00\x86\xd3\xfc\x80\x59\x18\xfd\x2c\x87\x7e\x58\x00\x25\x19\xc8\xec\x24\x14\x5d\xe3\xea\x06\xad\xc3\x40\xec\x25\x88\x21\xa8\xd8\x1e\x07\x91\x3d\x7e\xbf\xc3\x65\x89\xd6\x38\x88\x85\x9a\xfe\xd3\xb2\x42\xe9\x36\x88\xa1\xac\x18\xa1\xeb\xb0\xae\x97\xf8\xcb\x7e\x2d\xdd\x7c\xcd\x9f\x85\x51\xc4\x2d\xf5\x1a\x65\x1e\x7b\x19\x5b\xb8\x9a\xe4\x0d\x1f\x0c\x3b\xfd\x0d\x77\x8a\x91\xf5\xc8\x0a\x08\x2c\xba\xb5\x54\x04\x53\x92\xc5\xfc\x1f\x9f\x4f\x42\x6c\x5d\x72\x77\x91\x24\xdc\xa1\xe2\x56\xee\xe3\xce\x84\x85\xef\xdd\xc3\x02\xb8\x9c\xcc\x7b\x0c\x97\xfb\xac\x82\x05\x50\xfc\x18\x6a\xbc\x5c\xe5\xec\x03\x7e\x1c\x45\x8d\xb0\x0b\x06\x29\xa0\x3b\xf1\x2e\x09\x08\x2f\xf1\xd5\x6e\xbb\xd0\x57\xe9\x4f\x04\x8e\x10\x55\xc8\xb8\xb3\x3c\x29\xa1\x48\xca\x0b\xc6\xd0\xb3\x8e\x7a\x69\x41\x7b\x33\x10\x01\xc8\xb9\xea\x93\xf0\xb6\xe7\x0a\x8f\x7b\x91\xef\x3f\x69\x67\xcb\x9d\x1a\xf3\x60\x01\x3b\xb4\xc5\x61\x17\x4b\xa6\x29\x3c\x84\x32\x4c\x43\x42\xe5\xc1\x79\xab\x9c\x01\x89\xe1\x80\x32\x01\x5b\xe1\x23\x42\x15\x38\x74\x7c\x49\x0d\x3a\x5d\xfc\x46\xaa\x8d\x38\x7c\x68\xef\xc9\x43\x0c\x0a\xf8\x76\xd6\x13\xd7\xae\x9e\x07\xc1\x01\x65\x01\x4f\x82\x6a\x16\x59\xc1\x00\x8f\x9e\x0d\x94\xba\x16\xd8\x2b\x25\xa6\x7f\x63\xa8\x08\x31\x63\x31\x04\x2b\x44\x78\xa8\x57\xb9\x4e\x7b\x40\x8c\x64\x08\x62\xf9\x20\x52\x2a\xf5\x82\x47\x9d\x77\x4b\xee\x60\x01\x87\xee\x5a\xcf\x4a\x6c\x94\x03\x33\xe7\x9f\xe0\x83\x7e\xe9\xe0\x3b\xd6\x3d\x72\x08\xad\x79\xf3\x0e\x21\x4c\x73\x9a\xa2\x0a\x02\x01\x43\x5e\xee\x4c\xe1\x90\x97\x44\x77\x41\xd4\x19\xec\x3e\xb3\x17\x3f\x32\xb5\xda\x1c\xb4\x1f\x7c\xe7\x61\xcd\x99\xfa\xed\xfc\x64\x9f\xab\xf5\xad\xf1\xad\xef\x6d\x6d\x92\x53\x9c\xaf\xec\xc4\xf4\x91\xe2\x8f\x2b\x2b\x3b\xb5\xd2\x84\x2e\xf1\x53\x6c\x55\x34\x7c\xbe\x9d\xcb\xbc\xba\xe6\xe7\xf5\xa0\xc4\xe1\x6f\x7a\x9c\xac\xe0\x58\xfe\xb9\x8f\x21\xdf\x9e\x92\xae\x7e\xe6\xf2\xaf\x5f\x1f\x57\xdc\x81\x67\x58\x09\x1d\x45\xba\xab\x4a\x3b\x0d\xf8\xd3\xc7\x78\xaf\x0e\xd1\xb5\x4e\x1f\xfb\x2e\x19\xa3\x56\x3d\x35\x1a\x72\x7e\xda\x56\x34\x1c\xf5\x65\x10\x39\x8d\x18\x9a\x6f\x86\x87\xd3\x85\xdf\xd6\x7b\xee\x12\x77\x70\xe4\x17\x65\x49\xd6\x94\xd0\x35\xf7\x53\x81\xc7\x4f\xbc\x0b\x6e\x89\xfa\xe3\xc1\x3d\x50\x1d\x1c\x82\x11\x53\xa7\x3d\x35\x67\xe9\x83\x53\x6b\x97\x0f\x9a\xba\xd6\x6b\xc8\xc5\xbe\xc7\xe3\xf7\x78\xb4\x5d\xf8\x3d\x1e\x67\x7a\xea\xa5\xe2\x51\xb7\xd5\x8a\xb9\x91\x57\xb3\xfc\xc3\xd7\xf5\x8d\x5c\x4b\xb6\x2f\x8d\xd9\x8c\x9f\x9d\x81\x5c\x57\x37\xe3\x4e\x3e\xe7\x95\xec\xc0\xa5\xe4\xd7\x33\x3a\x43\x32\xc7\xe6\x71\x34\xfd\x37\xc1\xe0\x78\x9e\x83\xbb\x91\x43\xb5\x22\xab\x3c\xc1\x07\x10\x4a\x2a\xd9\xdd\xba\x3a\xa8\x21\x89\x22\x6a\x0e\xf7\x3e\x92\x8b\xe5\xd2\x60\x49\xc2\x01\xb7\x12\x5b\xdc\x8a\x10\x95\xf5\x65\xb7\x1d\x5b\x5e\x3c\x9c\x22\x5b\xa4\x84\x8a\x99\x73\xd9\xaa\x17\xe6\x96\xd5\xa3\x4f\x88\xa1\x5d\x19\x41\x68\xb4\x5b\xb1\x62\x19\x8c\xbc\xe2\x89\x7f\xca\x47\x52\xa5\x1b\x28\x59\xca\x7d\x50\x24\xd7\xf9\x9e\xa5\x38\x09\xab\xe7\x02\x47\xba\x20\x4e\x51\x89\xe1\xff\xbb\x1e\x4c\x9f\x83\x6a\xc2\xce\x75\xaf\x43\x56\x42\xd1\xa2\xd7\x02\x0d\x9b\x65\xbb\x91\x91\x85\x9d\x76\x07\xc6\xcb\x4b\x54\x56\x46\xa3\xd2\x2a\x68\x7d\xc6\x05\x6e\xf2\xa6\x09\x4b\x96\x76\x45\xf1\xdb\xdc\x60\xaf\x9a\x26\xb2\x16\xeb\x2e\xa9\xbe\xd6\x29\x1d\x3d\x15\x56\x7b\xa3\xfc\x72\xdc\x2d\x7f\x99\xed\x59\xbb\x6b\x3b\x8f\xb1\xeb\xe6\x03\x7e\x0c\x83\x52\xe0\x05\xf2\x15\xec\xe9\x96\xe6\x8f\x14\x38\x72\x54\xe3\x23\x21\x2b\x7a\x7d\xd3\x77\xfd\x64\xf3\x1e\x15\xa5\xd5\x3d\xb9\x13\x8e\xcc\x37\xef\x51\xf1\x9d\x43\x86\x53\x39\x64\x7e\x1a\xc1\x16\x3f\x7f\x0d\xe5\xab\xf6\xfc\x0b\x7e\x96\x92\x3d\xf2\xd7\xd3\x06\x05\xe2\xf7\x84\x3f\xb0\x82\xa8\x09\x9c\x6b\xe8\xcf\x31\x1a\xd9\x09\xa6\x99\x54\xb2\x0d\x2c\x9b\x4d\xf6\xfe\x04\x74\xf2\x0e\x15\xb7\x0e\x4a\xf9\x17\xfc\xac\x13\xce\x9d\xe3\xb1\xf0\xe9\x18\xe1\x3c\xc9\x38\xbf\x24\xe5\x3c\xc2\x39\x0f\x49\xe7\xd9\xac\xf3\xff\x80\x76\x56\x19\xd1\x49\x3c\xbf\x10\xf3\x2c\x97\x10\xdc\xb3\x95\x8e\xfb\xec\xb3\xe3\x46\x15\x62\x54\xd1\xcf\x03\xaa\x55\x11\xcd\xe7\x8a\x4e\x7d\x01\x2c\x71\xad\x8a\x6e\x25\x4e\xbe\xf5\x1e\x16\x40\xf8\x1f\xea\x29\x97\x9a\x20\xc6\x3d\x6f\x1b\xcb\x46\xe1\x80\xb2\x5b\x91\xab\xee\x62\xf9\xb7\xcc\x2b\x77\x42\x69\x0c\x5c\xef\x36\x3e\xb4\x84\x90\x65\xfe\x38\xa1\xb8\xdd\x0e\xfa\x38\xd7\x44\x08\xb6\x1d\xa1\xe9\xa4\x07\xa7\xfb\xaf\xd5\x68\x03\xf6\x7f\x3f\x2e\x79\x0c\x03\xce\xb0\xf8\x79\x96\xef\x30\x06\x12\x99\x54\xa9\x75\x87\x6f\xb7\xa7\x18\x6b\xdd\xde\x3d\xc7\x58\xcd\xd6\xd0\x35\x87\x61\x8b\xeb\x9e\xda\xb6\x35\xdf\xdc\x39\xf2\xc8\x27\xdd\x73\x38\x9c\x66\xb0\xe5\x20\x19\x0f\xb7\xdb\xed\xdd\xe2\x70\x50\xd1\xe3\x68\x8b\xec\x52\xa5\xbd\x5e\xf2\xe3\xdd\x51\x7b\xa7\xfc\x09\xfa\x23\x5d\xf0\x8f\x77\x49\xdd\xaf\xfa\xc3\x46\x69\x66\xff\x23\xe1\xec\xee\x79\x94\x85\x42\xc4\x1f\x74\x39\x63\xf5\x85\x10\xfd\xc3\xed\x8e\x48\xce\xfd\xee\x66\x22\x0b\xb9\x9b\x18\x57\x07\xd3\xf8\x76\x95\xdd\x26\x2d\x25\x20\x36\xa0\x8a\xdf\x99\x4e\xd4\xb0\x9f\x74\xa3\x12\x1a\x75\xa4\xa3\x8c\xfa\xeb\xb9\x52\xe5\xfc\xa1\x33\x1b\xf3\xc5\x93\xb3\x33\xb8\xc6\xec\x40\x52\x6c\x46\x61\x29\x87\xba\x30\xd4\x32\x46\x2d\xf7\x16\x57\x75\xad\x25\x55\x0f\xae\xc4\xde\xe3\x6a\x93\x2f\xcb\x30\x35\x5a\x3b\x2d\x78\x89\xb2\xec\x9d\xde\x26\x2f\xa8\xc8\x86\x37\xc6\x62\xe7\x29\x2e\xaa\x36\xdd\xbd\xeb\x46\xfe\x81\xe8\x32\xc3\x0c\x46\x6b\xc4\x78\xa4\x48\xd4\x35\x62\x34\x8c\x58\x30\xaa\x37\x6d\x9b\xb2\xbb\x4b\x71\xfd\xfe\xa0\x0b\x76\xe3\xa7\x97\x9d\x98\x25\x08\x90\x11\x45\xf2\xa5\x25\x29\xe7\x7e\x73\xc4\x60\x37\xcc\x74\x64\x4f\x51\xaf\x17\xf5\x30\xab\x64\x54\xca\x92\xc9\xd2\x26\x3c\xda\x7d\x2a\xd1\x0b\xb6\xde\xf3\x3b\xa2\x34\x9b\xdd\x0b\xb6\x76\x24\x36\x19\x56\x7a\x02\x37\xb0\xcf\x9c\x99\x4c\x10\x62\x6b\xe1\x86\xa9\x75\xa4\x2f\x10\x5b\xbb\x1d\xa1\xe7\x38\xbb\x1c\x3e\xcb\xe8\x6b\xbc\x31\x56\xc1\x33\x37\x6e\x3f\x3a\x21\x84\xef\xc1\x0a\x62\xa3\xf0\x9f\xe0\x96\xf9\x87\x77\x24\x22\xc2\x55\x85\x3f\x29\xcc\x8b\xb1\xb4\x7a\x32\x18\x92\xf1\x7e\xa2\xad\x93\x8f\x37\x15\x45\xd7\x08\x05\x83\x30\x4d\xfa\xd0\x02\x7d\xdd\xb7\x3f\x91\x8f\x36\x1c\xc6\x33\xb3\xeb\xf0\xc6\x0b\xfb\x97\xac\xee\x4d\x5e\xa5\xad\xf3\x5d\xdc\x8b\xac\xf8\x37\x43\x26\xcd\x0e\x85\xcf\xf8\x61\x8f\xcb\xb6\x57\x1d\x65\x95\x2d\xc4\x33\xfc\x30\x28\xf7\x46\xf4\x05\x05\x47\x74\x29\x4a\xa8\xba\xfe\x49\xbc\x66\x98\x57\x63\xe2\xaa\xb0\xe4\x56\xa8\x4b\x23\xa4\x24\x8b\x34\xef\x7c\xcc\x30\x38\xe1\x37\x90\xde\x86\xba\x0b\x05\x33\x36\x6b\xd2\x3c\x73\x94\xe6\xd4\x40\x1c\xbf\x00\x64\x7e\x6c\x1a\x13\xa6\x0c\x3f\x44\x56\x48\x4f\xb1\xfc\x2e\xf3\xe7\x2c\xe2\x7a\x4b\xc8\x3e\x0b\xd5\x9b\x45\x53\xd9\xa5\x85\x98\x8a\xf4\xd7\xae\xfb\x4b\xad\xd9\x21\x4f\x5d\x8e\xe7\x8e\x80\x0c\xba\x64\x26\xad\x9e\x4a\xff\x9e\x27\x53\xd4\x39\x14\xf1\xc0\x24\x13\x9b\x64\xa3\x73\x1a\xc7\x60\x48\x04\xd1\x20\x82\x56\x18\xee\xbc\x75\x0d\x4f\x3d\x55\xe0\x92\x30\x54\xbe\xa3\x87\x7c\x8b\x59\x04\xa1\xea\x8e\xfb\x55\x8f\x5d\xf9\xbc\x58\xf8\xa9\x6b\xf9\xbf\x17\x79\x2e\x58\xb6\xe9\x48\x47\xcf\x5c\x68\x59\x94\xb1\x0b\x5e\x91\x91\xc2\x9c\xe9\xf4\x2b\x7f\xc0\x44\xdc\x1f\x91\x03\x32\x42\x1b\xd9\x88\xa8\x51\x30\x11\x38\x9a\x8b\x15\x86\x1f\xec\xa3\x1f\x05\x4f\x17\x97\x5f\x81\x1d\xa6\x7f\xf2\x66\xf8\x21\x31\x5e\x68\x73\x7a\xd9\x37\x2e\xa5\x1f\xf2\xad\x79\x19\x4d\x13\xf2\x75\xbd\xda\x55\x8a\xbc\x2a\x18\xa1\xd5\x2a\x0c\x3e\x1b\x1e\x04\x63\x57\x2a\xbf\x95\xf0\x05\x2d\xb9\x55\x7c\x7d\x41\xdf\x87\x3f\xde\x44\x09\x5c\x6f\xf2\x7d\xb6\x84\x2f\xa2\x84\x99\xb2\x36\x90\xe9\xaf\x33\xda\x84\x9c\x11\x2f\x9f\xd0\x73\x96\xa3\xa5\xb8\x12\x2f\x37\x38\xdd\xce\x8c\x19\x99\x8a\xcb\x36\x33\x8c\xa6\x4a\x7e\xd8\x89\x4c\x2f\xc6\xf1\xba\x7f\xc5\xee\x7f\xbe\xe6\xea\x81\xde\xcf\xf1\x2f\x77\xfb\xc8\x77\x9a\xac\x14\xe1\xf2\x5e\xc0\x70\x19\x34\xcd\x09\xe6\xda\x19\xcc\xd4\x79\x91\xa6\xb8\x2c\x27\x5e\x84\x18\xfb\x28\xaf\x77\x9a\x60\x50\x58\x38\xd7\x51\xc6\x9f\x62\xfa\xec\x5b\xf5\x98\x7d\x0c\x97\x27\xad\x6b\xe7\x38\x13\xe1\x06\x6d\x34\x0f\x00\x06\x8d\x35\x67\xf5\x63\xe5\xc1\x18\xe6\xbb\x08\x1c\x4b\xd0\xba\xcd\x50\xff\xf7\x5e\x22\xf0\xfb\x84\x5b\x07\x74\x9b\x9c\xb6\x28\xb2\xff\x04\x00\x00\xff\xff\xaa\x4b\x04\x8b\x1f\x34\x00\x00")

func templatesBodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyGohtml,
		"templates/body.gohtml",
	)
}

func templatesBodyGohtml() (*asset, error) {
	bytes, err := templatesBodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body.gohtml", size: 13343, mode: os.FileMode(420), modTime: time.Unix(1530015316, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\x3b\xf3\x1b\x00\x00\xff\xff\x76\x6d\x2f\x2d\xc0\x00\x00\x00")

func templatesHeadGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadGohtml,
		"templates/head.gohtml",
	)
}

func templatesHeadGohtml() (*asset, error) {
	bytes, err := templatesHeadGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head.gohtml", size: 192, mode: os.FileMode(420), modTime: time.Unix(1530012498, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/body.gohtml": templatesBodyGohtml,
	"templates/head.gohtml": templatesHeadGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"body.gohtml": &bintree{templatesBodyGohtml, map[string]*bintree{}},
		"head.gohtml": &bintree{templatesHeadGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

