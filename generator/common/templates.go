// Code generated by go-bindata.
// sources:
// templates/body.gohtml
// templates/head.gohtml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xe3\x36\x12\x7f\x96\x3e\xc5\x54\xb7\x5d\x48\x07\x9d\x72\xcf\x2e\xfc\x10\xe4\x36\x7b\x8b\xde\xfe\xb9\x4d\xd0\x3e\xa4\x41\xc0\xc8\xb4\xcd\xb3\x4c\x29\x94\xec\x24\x10\xf4\xdd\x0f\xfc\x27\x91\x12\x25\xdb\x69\x16\x6d\x81\xf5\xc3\x6e\x4c\x0d\x87\xc3\xe1\x6f\x86\x33\x3f\xf9\xec\x0c\xde\xd1\xdd\xb6\xf4\xeb\x9a\x21\xba\xc2\xf0\x06\xd3\xdd\x16\x66\x73\x48\x2e\x49\x86\x13\xf1\x10\xfe\xd1\x34\xbe\xb7\x47\x0c\xea\x5a\x3c\x4f\x7e\x41\x8c\xa0\xfb\x0c\x7f\x42\x5b\xdc\x34\x30\x87\xba\x5e\x3d\x64\x5f\x36\xab\xa6\x49\x3e\xe1\x47\x3e\x2b\x34\x86\xf8\xf7\x8b\x9c\x2e\xc9\xaa\xf6\x3d\x8f\x4f\x9a\x81\xfa\x04\x5a\xe5\x7b\x86\x8a\xf5\x7f\xff\x23\x35\x06\xb1\xef\x79\x75\x0d\x64\x29\x0d\x4a\x2e\xf2\xed\x16\xd3\x4a\x5a\xe2\x79\xff\xc2\x65\xca\x48\x51\x91\x9c\xce\x5a\xa3\x94\x4c\xd3\xa8\xc9\x98\x2e\x94\xfc\x2f\x28\xdb\xe1\x72\x06\x3d\x93\xc4\xb0\xb4\xeb\x23\x2a\x6a\x1f\x8c\x4f\xeb\x8f\x3d\x17\xe2\x0e\xd1\x3b\xe7\xaa\xb4\x1d\x1e\x37\x5f\x48\x24\xca\xf0\x19\xbc\x1d\x5f\xa5\x16\x73\xa4\x39\xc2\x6e\x39\x55\x7c\x97\x66\x7b\x7a\xdb\x54\x2f\xdd\x6e\x3d\xf8\x2d\xf8\x2d\x08\xda\x95\x87\x4e\xb0\xc4\x4d\x75\x9d\x23\x3c\x4f\x0e\xd7\x75\x37\xc6\x47\x9a\xc8\xef\x86\x7c\xff\xec\x0c\x3e\xd0\x62\x57\x41\x7e\xff\x3f\x9c\x56\x7e\x5d\x83\xf2\x86\x1c\xe8\xf0\x21\xc4\x3e\x8b\x41\x1b\x26\x52\xf0\x10\x50\x8c\xe9\x26\x5e\x8c\x61\xed\x38\x7d\x2e\x12\x3c\x41\xb7\x42\x1f\x37\x5a\xf0\x92\xe0\x6c\x61\x9f\xf9\x40\xad\x90\xf9\x88\x8a\xeb\xf5\x8e\x6e\xc2\xe5\x8e\xa6\x61\x74\xd4\x04\xb0\xc1\xc2\x70\xb5\x63\xf4\xa8\x99\xf6\x44\x0b\x69\x4b\x2e\x22\x90\xa6\xb6\x26\xb7\x20\xdc\xda\x9f\xa4\x43\x47\xcc\x71\x63\xcf\x30\x41\x28\x52\x9e\xbc\x7e\x2e\x04\xf6\x52\x94\x65\x6a\xcd\x84\x8f\xc1\x9b\x86\x63\x66\x68\x9d\x86\x85\x39\xda\x7d\x6b\x22\x39\x47\x20\xa8\x45\x5a\x1f\x41\x25\x30\x5c\xe6\xd9\x1e\xb3\xd2\x00\x93\x1e\x73\xc2\xe9\xab\x9e\x20\x14\xf2\xb3\xe1\xb0\xd2\x53\x92\xcb\x1d\x4d\x39\xf2\xe5\xd6\x43\x95\x2b\x92\x6b\x86\x52\xcc\xde\x51\x8e\xb9\x05\x34\x0d\x54\x1c\x8d\x95\x18\x95\x6e\x91\x12\xb1\xdc\x58\xd3\xa4\xd5\x13\x77\x46\xf5\x24\x9f\x5e\xe4\xb4\xc2\x4f\x55\x0c\x04\x08\xad\x30\x5b\xa2\x14\xd7\x4d\x04\xe1\x1d\x3f\xdd\x5c\x3a\xaa\x35\xe2\xf3\xae\x2a\x76\xd5\x7b\x31\xdc\x34\x31\x30\xcc\x18\x60\xc6\x72\x16\xd5\xbe\xe7\xb6\x49\x06\x5d\x59\x20\xca\xb7\x5d\xb1\xe4\x82\x61\x54\xe1\x8b\x35\xc9\x16\x57\x05\xa2\x97\x2c\xdf\x2a\x2b\xc2\xb4\x7a\x8a\xc5\x31\x8f\x6c\x3b\x88\x7c\xcf\x5b\xe0\x25\x66\xc0\x15\x26\x97\x84\x92\x72\x1d\x76\xa3\x12\xd2\x22\xed\x90\x25\x14\xdc\xbc\xd9\x1c\x18\x4e\xf3\x3d\x66\x61\xf4\x93\x1c\xfa\x61\x0e\x94\x64\x20\xb3\x93\x50\x74\x85\xab\x6b\xb4\x0a\x03\xb1\x97\x20\x86\xa0\x62\x3b\x1c\x44\xf6\xf8\xdd\x16\x97\x25\x5a\xe1\x20\x16\x6a\xfa\x4f\xcb\x0a\xa5\x9b\x20\x86\xb2\x62\x84\xae\xc2\xba\x5e\xe0\xfb\xdd\x4a\xba\xf9\x8a\x3f\x0b\xa3\x88\x5b\xea\x35\xca\x3c\xf6\x3a\xb6\x70\x35\xc9\x3b\x3e\x18\x76\xfa\x1b\xee\x14\x23\xeb\x91\x25\x10\x98\x77\x6b\xa9\x08\xa6\x24\x8b\xf9\x3f\x3e\x9f\x84\xd8\xaa\xe4\xee\x22\x49\xb8\x45\xc5\x8d\xdc\xc7\xad\x09\x0b\xdf\xbb\x83\x39\x70\x39\x99\xf7\x18\x2e\x77\x59\x05\x73\xa0\xf8\x31\xd4\x78\xb9\xcc\xd9\x27\xfc\x38\x8a\x1a\x61\x17\x0c\x52\x40\x77\xe2\x5d\x12\x10\x5e\xe2\xab\xdd\x74\xa1\xaf\xd2\x9f\x08\x1c\x21\xaa\x90\x71\x6b\x79\x52\x42\x91\x94\xe7\x8c\xa1\x67\x1d\xf5\xd2\x82\xf6\x66\x20\x02\x90\xc7\xaa\x4f\xc2\x9b\x9e\x2b\x3c\xee\x45\xbe\xff\xa4\x9d\x2d\x77\x6a\xcc\x83\x39\x6c\xd1\x06\x87\x5d\x2c\x99\xa6\xf0\x10\xca\x30\x0d\x09\x95\x07\xe7\x2d\x73\x06\x24\x86\x3d\xca\x04\x6c\x85\x8f\x08\x55\xe0\xd0\xf1\x25\x35\xe8\x74\xf1\x2b\xa9\xd6\xe2\xf0\xa1\xbd\x27\xf7\x31\x28\xe0\xdb\x59\x4f\x5c\xbb\x7a\x1e\x04\x7b\x94\x05\x3c\x09\xaa\x59\x64\x09\x03\x3c\x7a\x36\x50\xea\x5a\x60\xaf\x94\x98\xfe\x95\xa1\x22\xc4\x8c\xc5\x10\x2c\x11\xe1\xa1\x5e\xe5\x3a\xed\x01\x31\x92\x21\x88\xe5\x83\x48\xa9\xd4\x0b\x1e\x74\xde\x0d\xb9\x85\x39\xec\xbb\x6b\x3d\x2b\xb1\x51\x0e\x1c\x39\xff\x04\x1f\xf4\x4b\x07\xdf\xb1\xee\x81\x43\x68\xcd\x3b\xee\x10\xc2\x34\xa7\x29\xaa\x20\x10\x30\xe4\xe5\xce\x14\x0e\x79\x49\x74\x1b\x44\x9d\xc1\xee\x33\x7b\xf5\x23\x53\xab\x1d\x83\xf6\xbd\xef\x3c\xac\x63\xa6\x7e\x3b\x3f\xd9\xe7\x6a\x7d\x6b\x7c\xeb\x7b\x5b\x9b\xe4\x14\xe7\x4b\x3b\x31\x7d\xa6\xf8\xf3\xd2\xca\x4e\xad\x34\xa1\x0b\xfc\x14\x5b\x15\x0d\x9f\x6f\xe7\x32\xaf\xae\xf9\x79\x3d\x28\x71\xf8\xa7\x1e\x27\x4b\x38\x94\x7f\xee\x62\xc8\x37\xa7\xa4\xab\x9f\xb8\xfc\xdb\xb7\x87\x15\x77\xe0\x19\x56\x42\x07\x91\xee\xaa\xd2\x4e\x03\xfe\xf4\x31\xde\xa9\x43\x74\xad\xd3\xc7\xbe\x4b\xc6\xa8\x55\x4f\x8d\x86\x9c\x9f\xb6\x15\x0d\x07\x7d\x19\x44\x4e\x23\x86\xe6\x9b\xe1\xe1\x74\xe1\xb7\xf5\x9e\xbb\xc4\x1d\x1c\xf9\x79\x59\x92\x15\x25\x74\xc5\xfd\x54\xe0\xf1\x13\xef\x82\x5b\xa2\xfe\x70\x70\x0f\x54\x07\xfb\x60\xc4\xd4\x69\x4f\x1d\xb3\xf4\xde\xa9\xb5\xcb\x07\x4d\x5d\xeb\x35\xe4\x62\xdf\xe3\xf1\x7b\x3c\xda\x2e\xfc\x1e\x8f\x47\x7a\xea\xb5\xe2\x51\xb7\xd5\x8a\xb9\x91\x57\xb3\xfc\xc3\xd7\xf5\x8d\x5c\x4b\xb6\x2f\x8d\xd9\x8c\x9f\x9d\x81\x5c\x57\x37\xe3\x4e\x3e\xe7\x8d\xec\xc0\xa5\xe4\xcb\x19\x9d\x21\x99\x63\xf3\x38\x9a\xfe\x9b\x60\x70\x3c\xcf\xc1\xdd\xc8\xa1\x5a\x91\x55\x9e\xe0\x03\x08\x25\x95\xec\x6e\x5d\x1d\xd4\x90\x44\x11\x35\x87\x7b\x1f\xc9\xf9\x62\x61\xb0\x24\xe1\x80\x5b\x89\x2d\x6e\x45\x88\xca\xfa\xb2\xdb\x8e\x2d\x2f\x1e\x4e\x91\x2d\x52\x42\xc5\xcc\x4c\xb6\xea\x85\xb9\x65\xf5\xe8\x0b\x62\x68\x5b\x46\x10\x1a\xed\x56\xac\x58\x06\x23\xaf\x78\xe2\x9f\xf2\x91\x54\xe9\x1a\x4a\x96\x72\x1f\x14\xc9\x55\xbe\x63\x29\x4e\xc2\xea\xb9\xc0\x91\x2e\x88\x53\x54\x62\xf8\x7b\xd7\x83\xe9\x73\x50\x4d\xd8\x4c\xf7\x3a\x64\x29\x14\xcd\x7b\x2d\xd0\xb0\x59\xb6\x1b\x19\x59\xd8\x69\x77\x60\xbc\xb8\x40\x65\x65\x34\x2a\xad\x82\xd6\x67\x5c\xe0\x3a\x6f\x9a\xb0\x64\x69\x57\x14\xbf\xcf\x0d\xf6\xaa\x69\x22\x6b\xb1\xee\x92\xea\x6b\x9d\xd2\xd1\x53\x61\xb5\x37\xca\x2f\x87\xdd\xf2\x97\xd9\x9e\xb5\xbb\xb6\xf3\x18\xbb\x6e\x3e\xe1\xc7\x30\x28\x05\x5e\x20\x5f\xc2\x8e\x6e\x68\xfe\x48\x81\x23\x47\x35\x3e\x12\xb2\xa2\xd7\x37\x7d\xd7\x4f\x36\x1f\x51\x51\x5a\xdd\x93\x3b\xe1\xc8\x7c\xf3\x11\x15\xdf\x39\x64\x38\x95\x43\xe6\xa7\x11\x6c\xf0\xf3\x4b\x28\x5f\xb5\xe7\x9f\xf1\xb3\x94\xec\x91\xbf\x9e\x36\x28\x10\xef\x13\x7e\xc7\x0a\xa2\x26\x70\xae\xa1\x3f\x87\x68\x64\x27\x98\x8e\xa4\x92\x6d\x60\xd9\x6c\xb2\xf7\x27\xa0\x93\xb7\xa8\xb8\x71\x50\xca\x3f\xe3\x67\x9d\x70\x6e\x1d\x8f\x85\x4f\xc7\x08\xe7\x49\xc6\xf9\x35\x29\xe7\x11\xce\x79\x48\x3a\x1f\xcd\x3a\xff\x01\xb4\xb3\xca\x88\x4e\xe2\xf9\x95\x98\x67\xb9\x84\xe0\x9e\xad\x74\xdc\x67\x9f\x1d\x37\xaa\x10\xa3\x8a\x7e\x1e\x50\xad\x8a\x68\x9e\x29\x3a\xf5\x15\xb0\xc4\xb5\x2a\xba\x95\x38\xf9\xd6\x3b\x98\x03\xe1\x7f\xa8\xa7\x5c\x6a\x82\x18\xf7\xbc\x4d\x2c\x1b\x85\x3d\xca\x6e\x44\xae\xba\x8d\xe5\xdf\x32\xaf\xdc\x0a\xa5\x31\x70\xbd\x9b\x78\xdf\x12\x42\x96\xf9\xe3\x84\xe2\x66\x33\xe8\xe3\x5c\x13\x21\xd8\x74\x84\xa6\x93\x1e\x9c\xee\xbf\x96\xa3\x0d\xd8\xdf\x7e\x5c\xf0\x18\x06\x9c\x61\xf1\x7a\x96\xef\x30\x06\x12\x99\x54\xa9\x75\x87\x6f\x36\xa7\x18\x6b\xdd\xde\x3d\xc7\x58\xcd\xd6\xd0\x35\xfb\x61\x8b\xeb\x9e\xda\xb6\x35\xdf\xdc\x39\xf2\xc8\x27\xdd\xb3\xdf\x9f\x66\xb0\xe5\x20\x19\x0f\x37\x9b\xcd\xed\x7c\xbf\x57\xd1\xe3\x68\x8b\xec\x52\xa5\xbd\x5e\xf2\xc3\xdd\x51\x7b\xa7\xfc\x09\xfa\x23\x5d\xf0\x8f\x77\x49\xdd\x5b\xfd\x61\xa3\x74\x64\xff\x23\xe1\xec\xee\x79\x94\x85\x42\xc4\x1f\x74\x39\x63\xf5\x85\x10\xfd\xdd\xed\x8e\x48\xce\xfd\xee\x66\x22\x0b\xb9\x9b\x18\x57\x07\xd3\xf8\x76\x95\xdd\x26\x2d\x25\x20\x36\xa0\x8a\xdf\x23\x9d\xa8\x61\x3f\xe9\x46\x25\x34\xea\x48\x47\x19\xf5\xd7\x73\xa5\xca\xf9\x43\x67\x36\xe6\x0f\x4f\xce\xce\xe0\x0a\xb3\x3d\x49\xb1\x19\x85\xa5\x1c\xea\xc2\x50\xcb\x18\xb5\xdc\x7b\x5c\xd5\xb5\x96\x54\x3d\xb8\x12\xfb\x88\xab\x75\xbe\x28\xc3\xd4\x68\xed\xb4\xe0\x05\xca\xb2\x0f\x7a\x9b\xbc\xa0\x22\x6b\xde\x18\x8b\x9d\xa7\xb8\xa8\xda\x74\xf7\xa1\x1b\xf9\x37\xa2\x8b\x0c\x33\x18\xad\x11\xe3\x91\x22\x51\xd7\x88\xd1\x30\x62\xc1\xa8\xde\xb4\x6d\xca\xee\x2e\xc5\xf5\xfb\x83\x2e\xd8\x8d\x57\x2f\x5b\x31\x4b\x10\x20\x23\x8a\xe4\x8f\x96\xa4\x9c\xfb\x97\x23\x06\xbb\x61\xa6\x23\x7b\x8a\xfa\x79\x51\x0f\xb3\x4a\x46\xa5\x2c\x99\x2c\x6d\xc2\xa3\xdd\xa7\x12\x3d\x67\xab\x1d\xbf\x23\x4a\xb3\xd9\x3d\x67\x2b\x47\x62\x93\x61\xa5\x27\x70\x03\xfb\xcc\x99\xc9\x04\x21\xb6\x12\x6e\x98\x5a\x47\xfa\x02\xb1\x95\xdb\x11\x7a\x8e\xb3\xcb\xe1\xb3\x8c\xbe\xc6\x1b\x63\x15\x3c\x73\xe3\xf6\xa3\x13\x42\xf8\x0e\xac\x20\x36\x0a\xff\x8e\x98\x99\x2c\xff\xdb\xb2\xf6\x70\x0f\x50\x74\x7d\x4b\x30\x88\xaa\xa4\x8f\x04\xd0\xb7\x73\xfb\x46\x7b\xb4\x3f\x30\x9e\x99\x4d\x82\x37\x5e\x87\xbf\x66\x31\x6e\xd2\x20\x6d\x59\xee\xa2\x4a\x64\x81\xbe\x1e\x12\x5f\x36\x72\xbf\xe2\x87\x1d\x2e\xdb\xd6\xd2\xec\x93\x6c\x8c\x1d\x3e\x17\x1e\xde\x0f\x46\xd5\x76\xc4\x12\x4d\x13\x56\x2c\x16\x27\x29\x0f\x8b\x17\x82\xfc\x24\xcd\xe3\xe3\x9e\x8b\x62\x28\x38\x92\xcb\xc8\xb2\x68\xc0\x2f\xbd\xcc\x06\x63\x31\xe7\x2a\xb4\xb7\xd1\x91\x9f\x55\xf4\x2e\x12\xcc\x98\xeb\xc8\xb4\x4c\x6a\x80\x90\xa7\x70\x99\xe1\x6c\x6b\x18\x7e\x88\x7c\xd7\x7e\xe1\x25\xda\x5c\x3f\xe8\xb1\xfd\xa3\xda\xa8\x68\x2a\x11\xe8\x3f\xd2\xea\x89\xfb\xf8\xad\xeb\xa6\x51\x4b\x76\x9e\x51\xd7\xd8\xcc\x11\x8b\x41\x97\x76\xa4\xd1\x53\x89\xda\xf3\x64\x32\x99\x41\x11\x0f\x2c\x32\x8f\x9e\xac\x75\xf6\xe1\xe7\x29\x19\x01\x11\xae\xdc\x6c\xe7\xed\x68\xb8\xe9\xa9\x02\x97\x84\xa1\xf0\x03\xdd\xe7\x1b\xcc\x22\x08\x55\x17\xdb\xaf\x4e\x06\x79\xed\xf5\xe3\xce\xf5\xae\x66\x70\x97\x74\x34\xee\x1f\x14\x8d\x27\x2d\x7f\x62\x20\x3a\xd7\xd4\x21\x78\x2c\xd8\x2d\xbe\xd9\x05\xf8\xc8\x3f\x10\xf6\x2f\x7c\xfb\x89\xd8\xaa\xec\xae\x1b\x03\xc5\x42\x1b\x59\x8b\x38\x96\xc8\x15\xc8\x3e\x12\xbe\x0c\x3f\xd8\x68\x1c\xc5\x73\x97\x27\x5e\x00\x67\xa6\xdf\x96\x33\xfc\x90\x18\xbf\x85\x73\xfa\xb8\x9d\x45\x96\xf0\x43\xbe\x31\x53\xe6\x34\x97\x5f\xd7\xcb\x6d\xa5\x78\xaf\x82\x11\x5a\x2d\xc3\xe0\xab\xe1\x3f\x30\x76\xa5\xd8\xe7\x12\xee\xd1\x82\x5b\xc5\xd7\x17\xcc\x7f\xf8\xe3\x75\x94\xc0\xd5\x3a\xdf\x65\x0b\xb8\x17\xd5\xcf\x94\xb5\x81\xcc\xbb\x9d\xd1\x26\xe0\x8c\x10\xfe\x82\x9e\xb3\x1c\x2d\xc4\xf5\x7c\xb1\xc6\xe9\x66\xe2\xf5\x6d\xff\xc3\x70\xd9\xa6\xaa\xd1\xd4\x9d\x56\x4f\x89\x4c\x77\xc6\xe9\xba\xdf\x7f\xf7\x3f\xc7\xbe\xb8\x1f\xda\x65\xdf\x5f\xc7\xcc\x39\xbc\x63\xf9\x6b\x28\xab\xb8\x76\x39\x2f\x60\xb8\x0c\x9a\xe6\x04\x73\xed\x9c\x6a\xea\x3c\x4f\x53\x5c\x96\x13\x3f\xa1\x18\xfb\x48\xa7\x77\x8a\x8c\xf7\xea\x53\xcb\x28\xdb\x4f\xb1\x7c\xf2\xa5\xfb\x09\xe6\x31\x5c\x9e\xb4\x6c\xbf\x9a\x19\xe6\x4e\x8d\xce\x83\x6a\x0d\xfa\xeb\x98\xd5\x0f\xd5\x2a\x23\x80\xef\xa2\x6f\x2c\x35\xeb\xee\x44\xfd\xdf\xfb\xed\x81\xdf\xe7\xe9\x3a\x94\xdb\x9c\xb6\xc5\xac\xfd\x3f\x00\x00\xff\xff\xee\x50\x7a\x25\x56\x34\x00\x00")

func templatesBodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyGohtml,
		"templates/body.gohtml",
	)
}

func templatesBodyGohtml() (*asset, error) {
	bytes, err := templatesBodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body.gohtml", size: 13398, mode: os.FileMode(420), modTime: time.Unix(1529937709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\x3b\xf3\x1b\x00\x00\xff\xff\x76\x6d\x2f\x2d\xc0\x00\x00\x00")

func templatesHeadGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadGohtml,
		"templates/head.gohtml",
	)
}

func templatesHeadGohtml() (*asset, error) {
	bytes, err := templatesHeadGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head.gohtml", size: 192, mode: os.FileMode(420), modTime: time.Unix(1529927996, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/body.gohtml": templatesBodyGohtml,
	"templates/head.gohtml": templatesHeadGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"body.gohtml": &bintree{templatesBodyGohtml, map[string]*bintree{}},
		"head.gohtml": &bintree{templatesHeadGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

