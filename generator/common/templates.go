// Code generated by go-bindata.
// sources:
// templates/body.gohtml
// templates/head.gohtml
// DO NOT EDIT!

package common

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBodyGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xe3\x36\x12\x7f\x96\x3f\xc5\x54\xb7\x5d\x48\x85\x4e\xb9\x67\x17\x7e\x58\xe4\x36\x7b\x41\x2f\xbb\xbd\x4d\xd0\x3e\xa4\x41\xc0\xc8\xb4\xcd\xb3\x4c\x29\x14\xed\x24\x10\xf4\xdd\x0f\xfc\x27\x91\x12\x65\x3b\xd9\xf4\xda\x02\xc9\xc3\xae\x4d\x0d\xc9\xe1\xcc\x6f\x86\x33\x3f\xf9\xe4\x04\x3e\xd2\xed\xa6\x9a\xd4\x35\x43\x74\x89\xe1\x1d\xa6\xdb\x0d\x4c\x67\x90\x9e\x91\x1c\xa7\xf2\x21\xfc\xbd\x69\x26\xc1\x0e\x31\xa8\x6b\xf9\x3c\xfd\x05\x31\x82\xee\x72\xfc\x19\x6d\x70\xd3\xc0\x0c\xea\x7a\x79\x9f\xff\xbc\x5e\x36\x4d\xfa\x19\x3f\x88\x59\x91\x35\x24\xbe\x9f\x16\x74\x41\x96\xf5\x24\x08\xc4\xa4\x29\xe8\xbf\xd0\x2c\xf9\x89\xa1\x72\xf5\x9f\x7f\xab\x15\xc3\x64\x12\x04\x75\x0d\x64\xa1\x14\x4a\x4f\x8b\xcd\x06\x53\xae\x34\x09\x82\x7f\xe2\x2a\x63\xa4\xe4\xa4\xa0\xd3\x56\x29\x2d\xd3\x34\x7a\x32\xa6\x73\x2d\xff\x0b\xca\xb7\xb8\x9a\x42\x4f\x25\x39\xac\xf4\xba\x40\x65\x3d\x01\xeb\xaf\xb5\xc7\x4e\x08\x09\x83\x98\x93\x8b\xa5\x8c\x1e\x81\x50\x5f\x4a\xa4\x5a\xf1\x29\xbc\x1f\xdf\xa5\x96\x73\x94\x3a\x52\x6f\x35\x55\x7e\x57\x6a\x07\xe6\xd8\xd4\x6c\xdd\x1e\x3d\xfc\x2d\xfc\x2d\x0c\xdb\x9d\x87\x46\x70\xc4\xed\xe5\x3a\x43\x04\x81\x1a\xae\xeb\x6e\x4c\x8c\x34\xf1\xa4\x1b\x9a\x4c\x4e\x4e\xe0\x9c\x96\x5b\x0e\xc5\xdd\x7f\x71\xc6\x27\x75\x0d\xda\x1a\x6a\xa0\xc3\x87\x14\xfb\x22\x07\x5d\x98\x28\xc1\x43\x40\xb1\xa6\xdb\x78\xb1\x86\x8d\xe1\x8c\x5f\x14\x78\xc2\x6e\x87\x3e\x6e\x8c\xe0\x19\xc1\xf9\xdc\xf5\xf9\x60\x59\x29\x73\x81\xca\xab\xd5\x96\xae\xa3\xc5\x96\x66\x51\x7c\xd4\x04\x70\xc1\xc2\x30\xdf\x32\x7a\xd4\x4c\x77\xa2\x83\xb4\x85\x10\x91\x48\xd3\x47\x53\x47\x90\x66\xed\x4f\x32\xa1\x23\xe7\xf8\xb1\x67\xa9\x20\x17\xd2\x96\xbc\x7a\x2a\x25\xf6\x32\x94\xe7\x7a\xcf\x54\x8c\xc1\xbb\x46\x60\x66\xa8\x9d\x81\x85\x3d\xda\x7d\x6b\x62\x35\x47\x22\xa8\x45\x5a\x1f\x41\x15\x30\x5c\x15\xf9\x0e\xb3\xca\x02\x93\x19\xf3\xc2\xe9\xab\x99\x20\x17\x14\xbe\x11\xb0\x32\x53\xd2\xb3\x2d\xcd\x04\xf2\xd5\xd1\x23\x9d\x2b\xd2\x2b\x86\x32\xcc\x3e\x52\x81\xb9\x39\x34\x0d\x70\x81\x46\x2e\x47\x95\x59\x94\x44\xa2\x0e\xd6\x34\x19\x7f\x14\xc6\xe0\x8f\xea\xe9\x69\x41\x39\x7e\xe4\x09\x10\x20\x94\x63\xb6\x40\x19\xae\x9b\x18\xa2\x5b\xe1\xdd\x42\x19\xaa\x55\xe2\xcb\x96\x97\x5b\xfe\x49\x0e\x37\x4d\x02\x0c\x33\x06\x98\xb1\x82\xc5\xf5\x24\xf0\xeb\xa4\x82\xae\x2a\x11\x15\xc7\xe6\x2c\x3d\x65\x18\x71\x7c\xba\x22\xf9\xfc\xb2\x44\xf4\x8c\x15\x1b\xad\x45\x94\xf1\xc7\x44\xba\x79\xe4\xd8\x61\x3c\x09\x82\x39\x5e\x60\x06\x62\xc1\xf4\x8c\x50\x52\xad\xa2\x6e\x54\x41\x5a\xa6\x1d\xb2\x80\x52\xa8\x37\x9d\x01\xc3\x59\xb1\xc3\x2c\x8a\x7f\x54\x43\xdf\xcd\x80\x92\x1c\x54\x76\x92\x0b\x5d\x62\x7e\x85\x96\x51\x28\xcf\x12\x26\x10\x72\xb6\xc5\x61\xec\x8e\xdf\x6e\x70\x55\xa1\x25\x0e\x13\xb9\x4c\xff\x69\xc5\x51\xb6\x0e\x13\xa8\x38\x23\x74\x19\xd5\xf5\x1c\xdf\x6d\x97\xca\xcc\x97\xe2\x59\x14\xc7\x42\xd3\xa0\xd1\xea\xb1\xd7\xd1\x45\x2c\x93\x7e\x14\x83\x51\xb7\x7e\x23\x8c\x62\x65\x3d\xb2\x00\x02\xb3\x6e\x2f\x1d\xc1\x94\xe4\x89\xf8\x67\x22\x26\x21\xb6\xac\x84\xb9\x48\x1a\x6d\x50\x79\xad\xce\x71\x63\xc3\x62\x12\xdc\xc2\x0c\x84\x9c\xca\x7b\x0c\x57\xdb\x9c\xc3\x0c\x28\x7e\x88\x0c\x5e\xce\x0a\xf6\x19\x3f\x8c\xa2\x46\xea\x05\x83\x14\xd0\x79\xbc\x4b\x02\xd2\x4a\x62\xb7\xeb\x2e\xf4\x65\xfa\xbb\xcf\x65\xe0\x48\xd1\xa6\x09\x6f\x1c\x2b\x2a\x18\x92\xea\x03\x63\xe8\xc9\x44\xbc\xda\xdd\x89\xeb\x80\x48\x44\x1e\xb3\x7e\x1a\x5d\xf7\xec\x20\x2c\x28\xce\x9e\xf6\x72\x12\xcc\x60\x83\xd6\x38\xea\x82\xc7\xde\x5f\xc4\x4c\x8e\x69\x44\xa8\xf2\xd4\xa2\x60\x40\x12\xd8\xa1\x5c\xc2\x54\xda\x84\x50\x0d\x06\x1d\x4e\x6a\xbe\xc9\x0e\xbf\x12\xbe\x92\xbe\x06\x73\x2d\xee\x12\xd0\x30\x77\x73\x9c\xbc\x64\xcd\x34\x08\x77\x28\x0f\x45\xca\x53\x93\xc8\x02\x06\xe0\x73\x41\x51\xd7\x12\x67\x95\xc2\xef\xaf\x0c\x95\x11\x66\x2c\x81\x70\x81\x88\x08\x6b\x5e\x98\x14\x07\xc4\x4a\x7c\x20\x37\x97\x71\x6a\x90\x3e\x34\x95\x02\x84\xb4\xae\xb2\xda\x35\xb9\x81\x19\xec\xcc\xb1\x71\x5e\xe1\xee\xde\x3f\x72\xf6\xf1\xa7\x77\x2b\x84\x66\xe2\xd9\xf4\xe0\x9e\x07\x36\x8c\xb2\x82\x66\x88\x43\x28\xd1\x25\xca\x98\x31\x78\x89\x32\xe7\x26\x8c\x8d\x72\x8e\x6e\xcd\xc4\xf9\xde\x5e\x9c\x05\xc5\xc5\xc2\x8d\x9a\x2f\x14\x7f\x59\x38\xa1\xd3\x4a\x13\x3a\xc7\x8f\x89\x73\xdd\x8a\xf9\x6e\xa0\x05\x75\x2d\x30\x71\xaf\xc5\xe1\x1f\x66\x9c\x2c\x60\x5f\x6c\xdc\x26\x50\xac\x8f\x0d\xa3\x1f\x85\xec\xfb\xf7\xfb\x17\xec\x40\x39\xbc\x9a\xf7\x06\xc4\x58\xd9\x70\x5c\x80\x18\x8f\x8d\xfb\xe9\x56\x7b\xc9\xb7\x47\x3f\x9e\x7c\x32\xd0\x15\x4e\xcf\x8d\xb0\x42\x78\xd7\x89\xb0\xbd\x36\x0c\x63\xaf\x02\x43\xd5\x6d\xd8\x7b\x4d\xf7\xfb\x59\xcd\x5f\x67\x0d\xdc\xfc\xa1\xaa\xc8\x92\x12\xba\x14\xf6\x29\xf1\xb8\x97\xbb\x88\x55\xe8\xf6\x47\xec\xd8\xaa\xe1\x2e\xf4\x6b\xb2\xd7\x3c\xc7\xec\xb9\xf3\xae\x6a\xa5\x9f\xba\x36\x7b\xa8\xcd\xde\x02\xee\x2d\xe0\xde\x02\xee\xf7\x0d\x38\xd3\xb5\x69\x62\x40\x5d\xae\xea\xc3\xc4\x54\x41\x6a\x2f\x55\x1d\x37\x76\xaf\x77\x72\x02\x6a\x5f\xd3\xeb\x79\xe9\x82\x77\xaa\xc1\x53\x92\x2f\x27\x0c\x86\x5c\x81\x4b\x13\x18\x76\x69\x0f\x41\x10\x04\x1e\x6a\x40\x0d\xd5\x9a\x0b\x09\x64\xbb\x49\x28\xe1\xaa\x79\xf2\x15\xe8\xc3\x1e\x5d\x56\x0d\xfe\x73\xa4\x1f\xe6\x73\xab\x09\x8f\xc2\xf1\x4a\x2a\x4c\x9c\x2e\x5e\x3e\x51\x05\x69\x77\x32\xa7\xeb\x57\x3c\xcf\xbe\xb6\x5e\x49\xe8\x98\x99\xaa\xa6\xb0\xb4\x4f\xaf\x1f\xfd\x8c\x18\xda\x54\x31\x44\x56\x6d\x9f\xe8\x7e\xd6\xca\x29\x81\xfc\xa7\x7a\x20\x3c\x5b\x41\xc5\x32\x61\x8e\x32\xbd\x2c\xb6\x2c\xc3\x69\xc4\x9f\x4a\x1c\x9b\x0a\x3a\x43\x15\x86\x1f\x86\xc5\xbf\x72\x9a\x6a\x01\xa6\x5a\x56\x94\x56\x62\xb5\x99\x5b\x84\x7b\x7a\xb3\xc0\x2e\xa6\x75\xa9\x66\x6c\x82\xf1\xfc\x14\x55\xdc\xa2\xc9\xda\x05\x5a\xc3\x09\x81\xab\xa2\x69\xa2\x8a\x65\x5d\x4d\x6b\xb4\xd2\x39\x2c\x76\x36\xeb\x6e\xa5\xfe\xaa\xfb\xd6\xe8\x2d\xe1\x10\x71\xda\x38\x47\xda\xe6\x2f\x73\x46\xe7\x88\x6d\xc7\x32\x76\xe9\x7c\xc6\x0f\x51\x58\x49\xe4\x40\xb1\x80\x2d\x5d\xd3\xe2\x81\x82\xc0\x90\xee\x99\x14\x78\x65\x8b\x69\x1b\xb0\x9f\x81\x2e\x50\x59\x39\x8d\x97\x3f\x0b\xa9\x24\x74\x81\xca\x37\xde\x12\x9e\xcb\x5b\x4a\xba\x7b\x8d\x9f\x5e\x42\x33\xea\x33\xff\x84\x9f\x3a\x74\x5b\x84\x63\x60\x14\x0a\x25\x87\xfd\x0d\x3b\xc8\xea\xc0\xbb\x87\xf9\x3b\x44\x5d\x7a\xc1\x74\x24\x7d\xe9\x02\xcb\x65\x30\x83\x3f\x01\x85\xb9\x41\xe5\xb5\x87\xc6\xfc\x09\x3f\x19\x3e\xe6\xc6\xf3\x58\xda\x74\x8c\xe4\xdc\xcb\x72\xbe\x26\xcd\x39\xc2\x73\x0e\x89\xce\xa3\x99\xce\x3f\x80\xea\xd4\x19\xd1\x4b\x76\xbe\x12\xdb\xa9\xb6\x90\x7c\xa7\x93\x8e\xfb\x8c\xa7\xe7\x5a\x95\x62\x54\x53\x9e\x03\x86\x4f\x93\x9b\x53\xcd\xe8\xbd\x02\x96\xc4\xaa\x9a\xf2\x23\x5e\xce\xef\x16\x66\x40\xc4\x07\xfd\x54\x48\xed\x21\x63\x83\x60\x9d\xa8\x96\x61\x87\xf2\x6b\x99\xab\x6e\x12\xf5\x59\xe5\x95\x1b\xb9\x68\x02\x62\xdd\x75\xb2\x6b\x79\x1e\x47\x7d\x7f\x63\x27\x2c\xbb\x5e\x0f\x3a\x39\xdf\x44\x08\xd7\x1d\xb9\xe6\x65\x16\xf7\x77\x61\x8b\xd1\x36\xec\x6f\xdf\xcf\x45\x0c\x03\xce\xb1\x7c\x25\x28\x4e\x98\x00\xb1\xfc\xde\xbb\xc3\xd7\xeb\xe7\x28\xeb\xdc\xde\x3d\xc3\x38\x6d\xd7\xd0\x34\xbb\x61\x93\xeb\x9f\x2a\x3a\x9d\xff\x8f\x71\x94\xcb\xf7\x9a\x67\xb7\x7b\x9e\xc2\x8e\x81\x54\x3c\x5c\xaf\xd7\x37\xb3\xdd\x4e\x47\x8f\xa7\x57\x72\x4b\x95\xf6\x7a\x29\x0e\xb7\x4c\xed\x9d\xf2\x27\x68\x9a\x4c\xe9\x3f\xde\x3a\x75\x6f\x92\x87\xdd\xd3\x91\x4d\x91\x82\xb3\xbf\xfb\xd1\x1a\x4a\x91\xc9\xa0\xdf\x19\xab\x2f\xa4\xe8\x37\x37\x3e\x32\x39\xf7\xfb\x9c\x3d\x59\xc8\xdf\xc9\xf8\xda\x18\xc3\xae\x9b\x2a\xbb\x4d\x5a\x5a\x40\x1e\x40\x17\xbf\x47\x1a\xd1\xc0\x7e\xaf\x19\xb5\xd0\xa8\x21\x3d\x65\xd4\x5f\xcf\x94\x3a\xe7\x0f\x8d\xd9\xd8\x3f\x76\x38\x39\x81\x4b\xcc\x76\x24\xc3\x76\x14\x56\x6a\xa8\x0b\x43\x23\x63\xd5\x72\x9f\x30\xaf\x6b\x23\xa9\xbb\x71\x2d\x76\x81\xf9\xaa\x98\x57\x51\x66\xf5\x77\x46\xf0\x14\xe5\xf9\xb9\x39\xa6\x28\xa8\xc8\x4a\xb4\xc8\xf2\xe4\x19\x2e\x79\x9b\xee\xce\xbb\x91\x7f\x21\x3a\xcf\x31\x83\xd1\x1a\x31\x19\x29\x12\x4d\x8d\x18\x0f\x23\x16\xac\xea\xcd\xe8\xa6\xf5\xee\x52\x5c\xbf\x3f\xe8\x82\xdd\x7a\xa3\xb2\x91\xb3\x24\x2b\x32\xb2\x90\xfa\xa1\x8c\x92\xf3\xff\x5a\xc1\xe2\x39\xec\x74\xe4\x4e\xd1\x3f\x69\xe9\x61\x56\xcb\x7c\x95\x49\xd7\xe5\x3c\xda\x03\x6a\x99\x0f\x6c\xb9\x15\x97\x43\x65\x77\xb9\x1f\xd8\xd2\x93\xd1\x54\x3c\x99\x09\x42\xb3\x3e\x8f\x66\xf3\x42\x88\x2d\xe5\xf9\xf7\xed\xa3\x8c\x80\xd8\xd2\x6f\x01\x33\xc7\xdb\xde\x88\x59\x56\x43\x13\x8c\x71\x0a\x81\x7d\x70\xf7\xd1\x33\x62\xf7\x16\x9c\xe8\xb5\x2a\xfe\x8e\x96\xd9\x5b\xf7\xb7\xf5\xec\xe1\xe2\xbf\xec\x1a\x96\x70\x10\x4e\x69\x1f\x02\x60\xae\x65\xf3\x4a\x75\xbc\x31\xb0\x9e\xd9\xdd\x41\x30\x5e\x80\xbf\x66\x15\x6e\xf3\x1f\x6d\x3d\xee\xe3\x48\x54\x65\xbe\x1a\xd2\x5e\x2e\x72\xbf\xe2\xfb\x2d\xae\xda\x9e\xd2\x6e\x90\x5c\x8c\x1d\xf6\x8b\x88\xeb\x7b\xab\x5c\x3b\x62\x8b\xa6\x89\x38\x4b\xa4\x27\x95\xb3\x44\x05\x28\x3c\x69\xbb\x4f\x58\x2e\x4e\xa0\x14\x48\xae\x62\x47\xa3\x01\xb1\xf4\x32\x1d\xac\xcd\xbc\xbb\xd0\xde\x41\xfd\xaf\xf5\x83\xde\x0d\x82\x19\xf3\xb9\xcc\xc8\x64\x16\x08\x45\xee\x56\xa9\xcd\xd5\x86\xe1\xfb\x78\xe2\x3b\x2f\xbc\x64\x35\xfb\xd7\x23\x7d\x00\xe8\xce\x29\xde\x97\x02\xcc\x87\x8c\x3f\x0a\xeb\xbe\xf7\x5d\x2e\x7a\xb3\xce\x26\xfa\xe6\x9a\x7a\xa2\x30\xec\x12\x8e\x52\x77\x5f\x6e\x0e\x02\x95\x46\xa6\x50\x26\x03\x8d\x6c\xa7\x93\x95\xc9\x3b\xc2\x93\x8a\x04\x90\x81\x2a\xd4\xf6\x5e\x88\x96\x81\x1e\x39\xf8\x24\xac\x05\xcf\xe9\xae\x58\x63\x16\x43\xa4\x1b\xd7\x7e\x41\x32\xc8\x68\x6f\x11\xf7\xcd\x11\xe7\xdd\xd8\xc4\xda\x61\x54\x3b\x5c\xb2\x0f\xd9\xf1\xe4\x40\x64\x8f\xc4\xb5\x05\xc0\xca\x06\xa0\x88\x40\x85\x3c\x69\x9c\x23\xe1\xc7\xf0\xbd\x8b\xa6\x51\x3c\x76\x11\xfe\x02\x38\x32\xf3\x6a\x9b\xe1\xfb\x34\xfa\xe1\x80\xed\xda\x69\x64\x01\xdf\x15\x6b\x3b\xdb\xed\xe7\xdf\xeb\x7a\xb1\xe1\x9a\xab\x2a\x19\xa1\x7c\x11\x85\x1a\x0d\xf2\xa5\x3a\x58\xc7\xd2\x8c\x71\x05\x77\x68\x2e\xd4\x12\xfb\x4b\xb6\x3e\xfa\xfe\x2a\x4e\xe1\x72\x55\x6c\xf3\x39\xdc\xe1\x29\x1c\x50\x37\x54\x39\xb3\xd3\xda\x7e\xe7\xd0\xb9\x68\x34\x5b\x66\xfc\x31\x55\x79\xc6\x72\x4b\xdc\x87\x81\x59\xea\x15\xf1\x93\x69\xa7\x30\x5c\xf9\x7d\x52\x95\x05\xad\x70\xcf\x29\x03\x9f\x3c\xdf\x25\xe2\xf8\x70\x3e\xe2\x0a\xf5\x23\xf5\x81\x23\xf4\x2e\x87\xd4\x94\xce\xa8\x3a\x67\x58\xd1\xa2\xcc\x98\xd9\xc6\x30\x15\xa6\xfe\x7f\xf8\xeb\x31\x97\x64\xe9\x4e\xea\x12\x92\x0e\x2d\xf2\xbf\x00\x00\x00\xff\xff\x16\xed\x5b\xa3\x87\x30\x00\x00")

func templatesBodyGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesBodyGohtml,
		"templates/body.gohtml",
	)
}

func templatesBodyGohtml() (*asset, error) {
	bytes, err := templatesBodyGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/body.gohtml", size: 12423, mode: os.FileMode(420), modTime: time.Unix(1529665264, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHeadGohtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xca\xb1\x4a\xc5\x30\x14\xc6\xf1\xd9\x3c\xc5\xc7\xa5\x83\x0e\x26\x20\x4e\x82\x83\x70\x1d\xee\x62\x1d\xf2\x02\xa7\xed\x31\x0d\xb6\x49\x4d\x52\x44\x0e\xe7\xdd\x05\x2d\xdc\xed\xcf\xef\xfb\x9c\x83\x9f\x63\xc5\x47\x5c\x18\xdf\x54\x11\x38\x71\xa1\xc6\x13\x86\x1f\x84\xd8\xe6\x7d\xb0\x63\x5e\x5d\xa5\xb6\x97\xf4\xc8\xc5\x6d\x25\xb7\xfc\x10\xbe\x16\x8b\x73\x8f\xb7\xde\xe3\xf5\x7c\xf1\xb8\x78\xb3\xd1\xf8\x49\x81\x21\xd2\xd9\xa3\x55\x8d\x89\xeb\x96\x4b\xc3\xad\x11\x29\x94\x02\xa3\x3b\xe4\xe9\x19\x9d\xfd\xef\x8a\x7b\x55\x73\x23\x72\x6c\xf6\x65\x89\x54\x55\x71\xba\xd2\x3b\xb5\x59\xf5\x64\x44\x38\x4d\x7f\xff\xbb\xdf\x00\x00\x00\xff\xff\xd3\x8b\xe8\x22\xbf\x00\x00\x00")

func templatesHeadGohtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHeadGohtml,
		"templates/head.gohtml",
	)
}

func templatesHeadGohtml() (*asset, error) {
	bytes, err := templatesHeadGohtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/head.gohtml", size: 191, mode: os.FileMode(420), modTime: time.Unix(1529662507, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/body.gohtml": templatesBodyGohtml,
	"templates/head.gohtml": templatesHeadGohtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"body.gohtml": &bintree{templatesBodyGohtml, map[string]*bintree{}},
		"head.gohtml": &bintree{templatesHeadGohtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

